<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo攻略-更换网页图标</title>
    <url>/2020/10/28/Hexo%E6%94%BB%E7%95%A5-%E6%9B%B4%E6%8D%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="Hexo攻略—更改网页图标"><a href="#Hexo攻略—更改网页图标" class="headerlink" title="Hexo攻略—更改网页图标"></a>Hexo攻略—更改网页图标</h2><p>Hexo next主题默认的网页图标长这个样子~</p>
<p><img src="/images/icon1.PNG"></p>
<p>当然要和别人不一样！</p>
<a id="more"></a>

<h4 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h4><p>自己也可以绘制，懒得话就去下载，到<a href="https://www.easyicon.net/">这里</a>进行下载，<code>ico</code>文件和<code>png</code>都可以，我下载的是<code>ico</code></p>
<h4 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h4><p>下载的图标重命名为<code>favicon.ico</code>，位置放在<code>/themes/next/source/images</code></p>
<h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>在<code>/themes/next/_config.yml</code>中修改成自己的图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  #medium: &#x2F;images&#x2F;favicon-32x32-next.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line">  #android_manifest: &#x2F;manifest.json</span><br></pre></td></tr></table></figure>

<p>进入测试上传就好啦~</p>
<p>效果图<img src="/images/icon2.PNG"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo攻略-去除代码块的行序列号</title>
    <url>/2020/11/16/Hexo%E6%94%BB%E7%95%A5-%E5%8E%BB%E9%99%A4%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="Hexo攻略—去除代码块的行序列号"><a href="#Hexo攻略—去除代码块的行序列号" class="headerlink" title="Hexo攻略—去除代码块的行序列号"></a>Hexo攻略—去除代码块的行序列号</h1><p>Hexo博客Next主题默认的代码块是标有行序列号的，看代码时会有些干扰，怎么将它去除呢？</p>
<a id="more"></a>

<p><img src="/images/hexo1.PNG" alt="在这里插入图片描述"><br>其实很简单，但我找了好久才找到，现在分享给大家！在<strong>配置文件</strong>-config.yml中，找到highlight，并将line_number：true改为false。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#39;&#39;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br></pre></td></tr></table></figure>
<p>最终效果：<br><img src="/images/hexo%E8%A1%8C.PNG"><br>这样代码看着就清爽许多了~</p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/2020/10/26/HashMap/</url>
    <content><![CDATA[<h4 id="Map实现类之一：HashMap"><a href="#Map实现类之一：HashMap" class="headerlink" title="Map实现类之一：HashMap"></a>Map实现类之一：HashMap</h4><ul>
<li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li>
<li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li>
</ul>
<a id="more"></a>

<ul>
<li>一个key-value构成一个entry</li>
<li>所有的entry构成的集合是Set:无序的、不可重复的</li>
<li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li>
<li>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</li>
</ul>
<h5 id="HashMap的存储结构"><a href="#HashMap的存储结构" class="headerlink" title="HashMap的存储结构"></a>HashMap的存储结构</h5><p><strong>数组+链表  （jdk7及之前）</strong></p>
<img src="https://img-blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img" style="zoom:67%;" />

<p><strong>数组+链表+红黑树 （jdk 8）</strong></p>
<img src="https://img-blog.csdn.net/20170803204952538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG9naW5fc29uYXRh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="存储结构" style="zoom:67%;" />

<h5 id="HashMap添加元素的过程"><a href="#HashMap添加元素的过程" class="headerlink" title="HashMap添加元素的过程"></a>HashMap添加元素的过程</h5><p>HashMap map=new HashMap();</p>
<p>实例化后底层创建了长度是<strong>16</strong>的一维数组Entry[] table。这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 </p>
<p> 每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</p>
<p>…可能已经多次put…</p>
<p>map.put(key1,value1):</p>
<ol>
<li><p>调用key1所在类的HashCode()方法计算key1的哈希值</p>
</li>
<li><p>此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置</p>
<p>1).如果此位置上的数据为空，此时的key1-value1（即entyr1）添加成功。 —-&gt;情况1</p>
<p>2).如果此位置已存在一个或多个数据（以链表形式存在），比较key1和已存在数据的哈希值</p>
<ul>
<li>key1的哈希值与已存在数据的哈希值都不相同，添加成功。 —-&gt;情况2</li>
<li>key1的哈希值与key2的哈希值相同，调用key1所在类的equals()方法<ul>
<li>equals()返回false：此时key1-value1添加成功。   —&gt;情况3</li>
<li>equals()返回true：value1替换value2</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>对于情况2、3添加成功的元素a与已存在的元素以链表形式存储—7上8下</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/21/167cf3bc3724604a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
</li>
</ul>
<h5 id="HashMap的扩容"><a href="#HashMap的扩容" class="headerlink" title="HashMap的扩容"></a>HashMap的扩容</h5><h6 id="jdk7及以前"><a href="#jdk7及以前" class="headerlink" title="jdk7及以前"></a>jdk7及以前</h6><ul>
<li><pre><code> DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</code></pre>
</li>
<li><pre><code> DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</code></pre>
</li>
<li><pre><code> threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</code></pre>
</li>
<li><pre><code> TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</code></pre>
</li>
<li><pre><code> MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</code></pre>
</li>
</ul>
<p>​       当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的默认值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么<strong>当HashMap中元素个数超过$16<em>0.75 = 12$（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 $2</em>16=32$，即扩大一倍</strong>，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>
<h6 id="jdk8"><a href="#jdk8" class="headerlink" title="jdk8"></a>jdk8</h6><p> 相较于jdk7在底层实现方面的不同：</p>
<ol>
<li><p>new HashMap():底层没有创建一个长度为16的数组</p>
</li>
<li><p>jdk 8底层的数组是：<strong>Node[]</strong>,而非Entry[]</p>
</li>
<li><p>首次调用put()方法时，底层创建长度为16的数组</p>
</li>
<li><p>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p>
<p>4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）<br>4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo攻略-添加分类</title>
    <url>/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="Hexo攻略-添加分类"><a href="#Hexo攻略-添加分类" class="headerlink" title="Hexo攻略-添加分类"></a>Hexo攻略-添加分类</h2><h3 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h3><p>在命令窗口输入下方命令</p>
<blockquote>
<p> hexo new page categories</p>
</blockquote>
<a id="more"></a>

<p>/source/categories文件夹下会有index.md文件，打开后内容默认为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-10-26 19:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加type: categories到内容中，添加后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
<h3 id="2-新建文章并添加“categories”属性"><a href="#2-新建文章并添加“categories”属性" class="headerlink" title="2.新建文章并添加“categories”属性"></a>2.新建文章并添加“categories”属性</h3><p>在命令行输入下方命令创建新文章</p>
<blockquote>
<p>hexo n “新文章名称”  </p>
</blockquote>
<p>在/source/_posts下自动生成.md文件，打开为其添加categories属性。下方的categories:Hexo攻略，表示这篇文章添加到到“Hexo攻略”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hexo攻略-添加分类及标签</span><br><span class="line">date: 2020-10-27 15:22:42</span><br><span class="line">categories: Hexo攻略</span><br></pre></td></tr></table></figure>

<p>至此，成功给文章添加分类，点击首页的“分类”即可看到该分类下的所有文章。效果如图。</p>
<p><img src="/images/cate.jpg"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo攻略-设置分页与显示文章数</title>
    <url>/2020/10/29/Hexo%E6%94%BB%E7%95%A5-%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E4%B8%8E%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Hexo攻略-设置分页与显示文章数"><a href="#Hexo攻略-设置分页与显示文章数" class="headerlink" title="Hexo攻略-设置分页与显示文章数"></a>Hexo攻略-设置分页与显示文章数</h2><p>使用next主题下，默认首页、分类、标签页都是显示10个文章，想进行分页和设置显示文章数。按照以下步骤操作~</p>
<a id="more"></a>

<ul>
<li><p>在Git Bash下安装插件</p>
<blockquote>
<p>$ npm  install hexo-generator-index –save</p>
</blockquote>
<blockquote>
<p>$ npm install hexo-generator-archive – save</p>
</blockquote>
<blockquote>
<p>$ npm install hexo-generator-tag –save</p>
</blockquote>
</li>
<li><p>在主题配置文件<code>_config.yml</code>中修改</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line"># For more information: https:&#x2F;&#x2F;www.algolia.com</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 5</span><br><span class="line"></span><br><span class="line">#主页每页显示文章数</span><br><span class="line">index_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#archive分页每页显示文章数</span><br><span class="line">archive_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#tag分页每页显示文章数</span><br><span class="line">tag_generator:</span><br><span class="line">    per_page: 10</span><br><span class="line">#category分页每页显示文章数</span><br><span class="line">category_generator: </span><br><span class="line">    per_page: 10</span><br></pre></td></tr></table></figure>

<p>按照以上步骤操作，保证一次就能修改好啦！</p>
<p>实现分页效果如图</p>
<p><img src="/images/%E5%88%86%E9%A1%B5.PNG"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Java实现单链表与循环链表</title>
    <url>/2020/10/29/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="链表的引入"><a href="#链表的引入" class="headerlink" title="链表的引入"></a>链表的引入</h2><h3 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h3><ul>
<li><p>数组：</p>
<p>访问数组时，其实是利用指针，即内存地址，直接访问对应内存地址中的数值，所以访问速度非常快。查找复杂度：<strong>O(1)</strong></p>
<a id="more"></a>

<p>添加元素时，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。删除一个元素，同样需要移动大量元素去填掉被移动的元素。添加/删除元素的时间复杂度： <strong>O(n)</strong></p>
</li>
<li><p>链表：</p>
<p>链表与数组相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。第一个元素指向第二个，以此类推直到最后一个元素。所以查找链表中某一个元素就要从第一个元素开始找，一直到找到需要的元素。 查找复杂度：<strong>O(n)</strong></p>
<p>但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改相应位置前后元素中的指针就可以了。复杂度：<strong>O(1)</strong></p>
<p>添加node：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">node.next = pre.next;</span><br><span class="line">pre.next = node;</span><br></pre></td></tr></table></figure>

<p>删除node：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pre.next = node.next;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>​        单向链表是一种线性表，实际上是由节点（Node）组成的，一个链表拥有不定数量的节点。head为头节点，他不存放任何的数据，只是充当一个指向链表中真正存放数据的第一个节点的作用，而每个节点中都有一个next引用，指向下一个节点，就这样一节一节往下面记录，直到最后一个节点，其中的next指向null。</p>
<p><img src="/images/%E9%93%BE%E8%A1%A81.png"></p>
<p>代码实现（已定义<code>Node head</code>）</p>
<ul>
<li><p>其他功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取链表长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;<span class="comment">//从头遍历找</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getLength(); i++, temp = temp.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == index)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *判断链表是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *打印链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(temp.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.next = node;</span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> l = getLength();</span><br><span class="line">    l++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *在指定位置插入节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        head = node;</span><br><span class="line">        node.next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1 2 3 4 ,length=4</span></span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="number">0</span> &amp;&amp; index &lt; length - <span class="number">1</span>)&#123;</span><br><span class="line">        Node pre = getNode(index - <span class="number">1</span>);</span><br><span class="line">        node.next = pre.next;</span><br><span class="line">        pre.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除指定位置的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除头节点</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(index == getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        Node newEndNode = getNode(getLength() - <span class="number">2</span>);</span><br><span class="line">        newEndNode.next = getNode(index).next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除指定位置</span></span><br><span class="line">    <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        getNode(index - <span class="number">1</span>).next = getNode(index + <span class="number">1</span>);</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>单链表的尾结点指向 NULL，而循环链表的尾结点指向头结点，构成环状。</p>
<p><img src="/images/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.PNG"></p>
<p>代码实现：</p>
<ul>
<li><p>其他功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNodeByIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从头节点开始遍历链表查找</span></span><br><span class="line">        Node curr = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;length; i++,curr = curr.next)</span><br><span class="line">            <span class="keyword">if</span> (i == index)</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置元素的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到此元素！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getNodeByIndex(index).val;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表全部节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             Node temp = head;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                 System.out.print(temp.val+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                 temp = temp.next;</span><br><span class="line">             &#125;</span><br><span class="line">             System.out.println(getVal(length - <span class="number">1</span>));</span><br><span class="line">             System.out.println(<span class="string">&quot;length = &quot;</span>+length);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">add</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node temp = head;</span><br><span class="line">            <span class="comment">//head后还有节点，继续向后</span></span><br><span class="line">            <span class="keyword">while</span>(temp.next != head)&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到目前最后一个元素，它指向head。在它后面插入node</span></span><br><span class="line">            temp.next = node;</span><br><span class="line">            node.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定位置添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node newNode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index = 0,将newNode设为头节点</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将newNode插入到链表中，先获取前一个和后一个节点</span></span><br><span class="line">            Node pre = getNodeByIndex(index - <span class="number">1</span>);</span><br><span class="line">            newNode.next = pre.next;</span><br><span class="line">            pre.next = newNode;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            getNodeByIndex(length - <span class="number">1</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除尾节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(length - <span class="number">2</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定位置节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到该删除元素！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != length -<span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(index - <span class="number">1</span>).next = getNodeByIndex(index + <span class="number">1</span>);</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>summary: 原理大概都懂，代码实现上有些细节要注意。讨论头节点是否为null；给定某个位置index，讨论index是否在合理范围内。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的值传递机制</title>
    <url>/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><strong>Java中方法的值传递方式只有一种：值传递。</strong></p>
<a id="more"></a>

<p>值传递机制：</p>
<ul>
<li>如果参数是基本数据类型，此时实参赋给形参的是<strong>实参真实存储的数据值</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;排序前：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);</span><br><span class="line">     valueTransferTest t=<span class="keyword">new</span> valueTransferTest();</span><br><span class="line">     t.swap(a,b);</span><br><span class="line">     System.out.println(<span class="string">&quot;排序后：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);<span class="comment">//a = 10,b = 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp=m;</span><br><span class="line">     m=n;</span><br><span class="line">     n=temp;</span><br><span class="line">     <span class="comment">// System.out.println(&quot;m=&quot;+m+&quot;,n=&quot;+n);//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实参a,b将值传给形参，排序后a,b的值未发生改变，对实参值没有影响。</p>
<p>内存中</p>
<p><img src="/images/image_1.jpg"></p>
<ul>
<li>如果参数是引用数据类型，此时实参赋给形参的是<strong>实参存储数据的地址值</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	 Data data = <span class="keyword">new</span> Data();</span><br><span class="line">		</span><br><span class="line">	 data.m = <span class="number">10</span>; data.n = <span class="number">20</span>;</span><br><span class="line">		</span><br><span class="line">	 System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 10, n = 20</span></span><br><span class="line">	 swap(data);</span><br><span class="line">     System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span></span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> temp = data.m;</span><br><span class="line">	 data.m = data.n;</span><br><span class="line">	 data.n = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内存中显示</p>
<p><img src="/images/image_2.jpg"></p>
<p>参数保存的是实际对象的地址值，改变的只是地址值指向的堆内存中的实际对象，<strong>并没有真正改变参数</strong>，<strong>参数的地址值没有变</strong>。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer刷题—数组类</title>
    <url>/2020/11/09/%E5%89%91%E6%8C%87Offer%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="剑指Offer刷题——数组类"><a href="#剑指Offer刷题——数组类" class="headerlink" title="剑指Offer刷题——数组类"></a>剑指Offer刷题——数组类</h1><p>持续更新…好好总结，早日刷完！</p>
<p><a href="#03%EF%BC%8Ceasy">找出数组中重复的数字</a></p>
<p><a href="#04%EF%BC%8Cmiddle">二维数组中的查找</a></p>
<p><a href="#11%EF%BC%8Ceasy">旋转数组的最小数字</a></p>
<p><a href="#12%EF%BC%8Cmiddle">矩阵中的路径</a></p>
<p><a href="#21%EF%BC%8Ceasy">调整数组顺序使奇数位于偶数前面</a></p>
<p><a href="#39%EF%BC%8Ceasy">数组中出现次数超过一半的数字</a></p>
<p><a href="#57%EF%BC%8Ceasy">和为s的两个数字</a></p>
<a id="more"></a>

<h2 id="03，easy"><a href="#03，easy" class="headerlink" title="03，easy"></a>03，easy</h2><h3 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a>找出数组中重复的数字</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br></pre></td></tr></table></figure>

<p>输出：2 或 3 </p>
<ul>
<li><p>方法一. 利用Arrays.Sort()方法排序，比较相邻两个数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">      Arrays.Sort(nums);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])</span><br><span class="line">              <span class="keyword">return</span> nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二. 把数组元素赋给新数组的索引，如果个数&gt;1,则返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] newNum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(++newNum[i] &gt; <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三. 新建Set集合，利用Set的无序不可重复性，如果不能添加此元素，说明重复，返回此元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!set.add(i))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="04，middle"><a href="#04，middle" class="headerlink" title="04，middle"></a>04，middle</h2><h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p>给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<ul>
<li><p>判空。matrix和其行列均不能为空</p>
</li>
<li><p>方法一：暴力查询。遍历二维数组，直到找到相同整数，返回true；或遍历完也没有找到，返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix)</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;<span class="comment">//列数</span></span><br><span class="line">        <span class="comment">//遍历此二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(target == matrix[i][j])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<ul>
<li>思路：由此数组从左向右递增，从上向下递增的规律，比较target与右上角的数字，如果比它小(大)，则在左(右)边找，再与下一数字比较…直到找到相同整数，返回true；或遍历完也没有找到，返回false。</li>
<li>边界条件：遍历的行列指针i，j不能超过数组的行数rows，列数columns</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(matrix == <span class="keyword">null</span>|| matrix.length == <span class="number">0</span>|| matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;<span class="comment">//列数</span></span><br><span class="line">        <span class="comment">//从右上角开始比较</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = columns - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; rows &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//target比此二维数组元素大,向下找，行指针++</span></span><br><span class="line">            <span class="keyword">if</span>(target &gt; matrix[i][j]) i++;</span><br><span class="line">            <span class="comment">//target比此二维数组元素小,向左找，列指针--</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; matrix[i][j]) j--;</span><br><span class="line">            <span class="comment">//相等</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="11，easy"><a href="#11，easy" class="headerlink" title="11，easy"></a>11，easy</h2><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。<br>示例 1：<br><code>输入：[3,4,5,1,2] 输出：1 </code><br>示例 2：<br><code>输入：[2,2,2,0,1] 输出：0 </code></p>
<ul>
<li><p>方法一：逐项查找，不考虑旋转。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numbers.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[index] &gt; numbers [i])&#123;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：二分查找（减治思想），考虑旋转，比较nums[mid]与nums[right]。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//中间值大于最右边的值，说明旋转之后最小数字在mid右面</span></span><br><span class="line">        <span class="keyword">if</span>(numbers[middle] &gt; numbers[right])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//中间值小于最右边的值，说明旋转之后最小的数字在mid或mid的左边</span></span><br><span class="line">        <span class="comment">//如[4,5,1⭐m,2,3] [5,1⭐,2m,3,4]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numbers[middle] &lt; numbers[right])&#123;</span><br><span class="line">            right = middle ;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//中间值与最右边的值相等，不能判断最小数字在哪一边，可以缩小范围，right--</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[right];<span class="comment">//此时left,right指向同一数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>思考：为什么不能用最左边的值和middle比较？</p>
<p>举例：[3, 4, 5, 1, 2] 与 [1, 2, 3, 4, 5] ，此时，中间位置的值都比左边大，但最小值一个在后面，一个在前面，因此这种做法不能有效地减治。</p>
<h2 id="12，middle"><a href="#12，middle" class="headerlink" title="12，middle"></a>12，middle</h2><h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p>
<p>路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p>
<p>[[“a”,”b”,”c”,”e”],</p>
<p>[“s”,”f”,”c”,”s”],</p>
<p>[“a”,”d”,”e”,”e”]]</p>
<p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>
<p>示例 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：board &#x3D; [</span><br><span class="line">			   [&quot;a&quot;,&quot;b&quot;],</span><br><span class="line">               [&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">              ],</span><br><span class="line"></span><br><span class="line">     word &#x3D; &quot;abcd&quot;</span><br><span class="line"></span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：回溯算法。（DFS+剪枝）</p>
<ul>
<li>深度优先遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。</li>
<li>剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="comment">//找回words的第0个元素</span></span><br><span class="line">                <span class="keyword">if</span>(dfs(board,words,i,j,<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//board[i][j]表示矩阵元素，k表示字符串words的第k个元素</span></span><br><span class="line">        <span class="comment">//① 行或列索引越界 或 ② 当前矩阵元素与目标字符不同 或 ③ 当前矩阵元素已访问过 （③ 可合并至 ② ） 。</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] != word[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//字符串 word 已全部匹配，即 k = len(word) - 1 。</span></span><br><span class="line">        <span class="keyword">if</span>(k  == word.length- <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//将 board[i][j] 值暂存于变量 tmp ，并修改为字符 &#x27;/&#x27; ，</span></span><br><span class="line">        <span class="comment">// 代表此元素已访问过，防止之后搜索时重复访问。</span></span><br><span class="line">        <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="comment">//从当前坐标的上下左右四个方向查找，只要有一个能查找到，就返回true</span></span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board, word,i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word,i - <span class="number">1</span>, j, k + <span class="number">1</span>)|| dfs(board, word ,i ,j - <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//恢复其本身值</span></span><br><span class="line">        board[i][j] = temp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="21，easy"><a href="#21，easy" class="headerlink" title="21，easy"></a>21，easy</h2><h3 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h3><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3,4]</span><br><span class="line">输出：[1,3,2,4] </span><br><span class="line">注：[3,1,2,4] 也是正确的答案之一。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：遍历数组，因为不要求数字顺序，从数组索引为0开始++ 保存奇数，从末位开始– 保存偶数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] exchange(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> l = nums.length - <span class="number">1</span>;<span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">         <span class="comment">//如果为偶数</span></span><br><span class="line">         <span class="keyword">if</span>(nums[i] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">             res[l--] = nums[i];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">             res[m++] = nums[i];</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>错误点：在for循环中<code>i &lt; l + 1</code>的写法是错误的，因为l在循环体中会变化。</strong></p>
<ul>
<li><p>方法二：双指针left，right。若为奇数，left++;若为偶数,right–。否则nums[left]和nums[right]交换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] exchange(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">             left++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(nums[right] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">             right--;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">             nums[left] = nums[right];</span><br><span class="line">             nums[right] = temp;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="39，easy"><a href="#39，easy" class="headerlink" title="39，easy"></a>39，easy</h2><h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先进行排序，若存在这样的数字，排序后一定位于数组中间位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        //数组先排序再找出现次数超过数组长度一半的数字</span></span><br><span class="line">       Arrays.sort(nums);<span class="comment">//1, 2, 2, 2, 2, 2, 3 ,4 , 5</span></span><br><span class="line">    <span class="comment">//    for(int i = 0; i &lt; nums.length; i++)&#123;</span></span><br><span class="line">    <span class="comment">//        if(nums[i] == nums[i + nums.length / 2] )&#123;</span></span><br><span class="line">    <span class="comment">//            return nums[i];</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    return -1;</span></span><br><span class="line">        <span class="keyword">int</span> l = nums.length;</span><br><span class="line">        <span class="keyword">return</span> nums[l/<span class="number">2</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：借助map，key保存数组元素，value保存出现次数。遍历数组元素，如果keySet中包含此元素，用map.get(key)得到此时的value，并更新(+1)，判断若此时value &gt;= 数组长度的一半，返回此时的key；如果keySet中不包含此元素，加入map且使value为1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//用hashMap实现，key保存数组元素，value保存出现次数</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(nums[i]))&#123;</span><br><span class="line">             map.put(nums[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            value = map.get(nums[i]);</span><br><span class="line">            map.put(nums[i], value + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(value + <span class="number">1</span> &gt; nums.length / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="57，easy"><a href="#57，easy" class="headerlink" title="57，easy"></a>57，easy</h2><h3 id="和为s的两个数字"><a href="#和为s的两个数字" class="headerlink" title="和为s的两个数字"></a>和为s的两个数字</h3><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">输出：[2,7] 或者 [7,2]</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [10,26,30,31,47,60], target &#x3D; 40</span><br><span class="line">输出：[10,30] 或者 [30,10]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：左右双指针。</p>
<ul>
<li>如果两指针指向数字和 = target，返回这个数字构成的数组。</li>
<li>​         …                            &lt;     ….  ，left 向右移。</li>
<li>​         …                            &gt;     ….  ，right 向左移。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[left] &gt;= target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(nums[right] &gt; target)&#123;</span><br><span class="line">         right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] + nums[right] == target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[left], nums[right]&#125;;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[left] + nums[right] &gt; target) right--;</span><br><span class="line">        <span class="keyword">else</span> left++;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>注意：</strong> 数组遍历都可以用双指针想一想</p>
<p>​            双指针固定套路：<code>while(left &lt; right)</code></p>
<p>​            if判断中先判断 == 再判断 &lt; , &gt;，有助于减少运行时间</p>
<ul>
<li><p>方法二：利用set的不可重复性，遍历数组将数组元素添加到set，如果set包含target - i，则返回两个元素构成的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">	Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">         set.add(i);</span><br><span class="line">         <span class="keyword">if</span> (set.contains(target - i)) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, target - i&#125;;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>刷题数组类</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式不同实现（秀恩爱版）</title>
    <url>/2020/11/03/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%A7%80%E6%81%A9%E7%88%B1%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java设计模式—单例设计模式（秀恩爱版）"><a href="#Java设计模式—单例设计模式（秀恩爱版）" class="headerlink" title="Java设计模式—单例设计模式（秀恩爱版）"></a>Java设计模式—单例设计模式（秀恩爱版）</h2><p>对于系统中的某些类来说，只有一个实例很重要。<em>就像男朋友（类）只有一个ChaoWang(对象)。</em></p>
<p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p>
<a id="more"></a>

<h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>①. 私有化类的构造器</p>
<p>②. 提供一个自身的静态私有成员变量</p>
<p>③. 提供公共静态方法，返回当前类的对象。</p>
<p><strong>通常单例模式在Java语言中，有两种构建方式：</strong></p>
<ul>
<li>懒汉式。指全局的单例实例在<strong>第一次被使用时构建</strong>。</li>
<li>饿汉式。指全局的单例实例<strong>在类装载时构建</strong>，<strong>实例在整个程序周期都存在</strong>。</li>
</ul>
<p>单例模式有很多种写法，大部分写法都或多或少有一些不足。下面将分别对这几种写法进行介绍。</p>
<h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="comment">//①.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//②.提供静态私有成员变量（我的男朋友ChaoW）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    <span class="comment">//③. 提供公共静态方法，返回当前类的对象。   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式的<strong>好处</strong>是只<strong>在类加载的时候创建一次实例</strong>，不会存在多个线程创建多个实例的情况，<strong>避免了多线程同步的问题</strong>。但它的<strong>缺点</strong>也很明显，即使这个单例没有用到也会被创建，而且在类加载之后就被创建，<strong>内存就被浪费</strong>了。</p>
<h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//还未创建过对象</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式<strong>单例是在需要的时候才去创建的</strong>，如果单例已经创建，再次调用获取接口将不会重新创建新的对象，而是直接返回之前创建的对象。但<strong>缺点</strong>是此写法<strong>不安全</strong>，如果两个线程同时运行到判断ChaoW是否为null的if语句，并且ChaoW的确没有被创建时，那么两个线程都会创建一个实例，此时类型BoyFriend就不再满足单例模式的要求了。</p>
<h3 id="3-懒汉式改进-加锁"><a href="#3-懒汉式改进-加锁" class="headerlink" title="3.懒汉式改进(加锁)"></a>3.懒汉式改进(加锁)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;  <span class="comment">//Single Checked</span></span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样<strong>每次调用getName()方法时都被synchronized关键字锁住</strong>，可能会引起线程阻塞，影响程序的性能。</p>
<h3 id="4-懒汉式改进（双重检验锁）"><a href="#4-懒汉式改进（双重检验锁）" class="headerlink" title="4.懒汉式改进（双重检验锁）"></a>4.懒汉式改进（双重检验锁）</h3><blockquote>
<p>为了在多线程环境下，不影响程序的性能，不让线程每次调用getName()方法时都加锁，而只是在实例未被创建时再加锁，在<strong>加锁处理里面还需要判断一次实例是否已存在</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 先判断实例是否存在，若不存在再对类对象进行加锁处理</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">synchronized</span> (BoyFriend.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">                    ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到上面在同步代码块外多了一层ChaoW为空的判断。由于单例对象只需要创建一次，如果后面再次调用getName()只需要直接返回单例对象。因此，大部分情况下，调用getName()都不会执行到同步代码块，从而提高了程序性能。</p>
<h3 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5.静态内部类"></a>5.静态内部类</h3><blockquote>
<p>加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个私有的静态内部类，用于初始化一个静态final实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriendHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BoyFriendHolder.ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式同样利用了<strong>类加载机制</strong>来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。不一样的是，它是在内部类里面去创建对象实例。这样的话，只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式<strong>可以同时保证延迟加载和线程安全</strong>。</p>
<h3 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6.枚举"></a>6.枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyLove</span></span>&#123;</span><br><span class="line">    LOVE;</span><br><span class="line">    <span class="keyword">private</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取实例的方式很简单，<code>MyLove.LOVE.getName()</code></p>
<p>单例是如何被保证的： </p>
<ul>
<li>首先，在枚举中我们<strong>明确了构造方法限制为私有</strong>，在我们访问枚举实例时会执行构造方法。</li>
<li>同时每个<strong>枚举实例都是<code>static final</code>类型的</strong>，也就表明只能被实例化一次。在调用构造方法时，我们的单例被实例化。 </li>
<li>也就是说，因为enum中的实例被保证只会被实例化一次，所以我们的<code>LOVE</code>也被保证实例化一次。 </li>
</ul>
<h3 id="单例模式的线程安全性"><a href="#单例模式的线程安全性" class="headerlink" title="单例模式的线程安全性"></a>单例模式的线程安全性</h3><p>单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。总结一下：</p>
<p>（1）饿汉式：线程安全</p>
<p>（2）懒汉式：非线程安全</p>
<p>（3）双检锁：线程安全</p>
<p>（4）静态内部类：线程安全</p>
<p>（5）枚举：线程安全</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>从JDBCUtils看代码简洁之道</title>
    <url>/2020/11/16/%E4%BB%8EJDBCUtils%E7%9C%8B%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h1 id="从JDBCUtils看代码简介之道"><a href="#从JDBCUtils看代码简介之道" class="headerlink" title="从JDBCUtils看代码简介之道"></a>从JDBCUtils看代码简介之道</h1><h3 id="使用PreparedStatement实现增删改查"><a href="#使用PreparedStatement实现增删改查" class="headerlink" title="使用PreparedStatement实现增删改查"></a>使用PreparedStatement实现增删改查</h3><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPreparedStatement1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">             <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">             System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">             String name = input.next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------连接数据库的步骤------------------------</span></span><br><span class="line"></span><br><span class="line">             Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">             info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">             String user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">             String password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">             String url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">             String driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//1.注册驱动</span></span><br><span class="line">             Class.forName(driver);</span><br><span class="line">             <span class="comment">//2.获取连接</span></span><br><span class="line">             Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//3.执行修改</span></span><br><span class="line">             String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">             PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">             statement.setString(<span class="number">1</span>, name);</span><br><span class="line">             statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">             <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">             System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//4.关闭</span></span><br><span class="line">             statement.close();</span><br><span class="line">             connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工具类JDBCUtils"><a href="#工具类JDBCUtils" class="headerlink" title="工具类JDBCUtils"></a>工具类JDBCUtils</h3><p>由于每次都要加载配置文件，读取配置信息，注册驱动，获取连接，想到封装成工具类JDBCUtils。功能：</p>
<ul>
<li> 1、获取连接</li>
<li> 2、释放资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：获取可用的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：释放资源</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set != <span class="keyword">null</span>) set.close();</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在getConnection()方法中仍有可以提出的部分，使用静态代码块只执行一次加载配置文件，读取配置信息，注册驱动的步骤，使代码更加简洁，效率更高。注意：提出的步骤需要处理异常。将user\password\url\driver提出静态代码块可以在获取连接时调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">static</span> String url ;</span><br><span class="line">    <span class="keyword">static</span> String driver;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);<span class="comment">//编译时异常转为运行时异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：获取可用的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：释放资源</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set != <span class="keyword">null</span>) set.close();</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改进之后"><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3><p>有了JDBCUtils工具类，再看改进后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrepasredStatementByUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">        String name = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------连接数据库的步骤----------------</span></span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Connection connection = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//2.执行修改</span></span><br><span class="line">        String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">        PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>, name);</span><br><span class="line">        statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">        System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭</span></span><br><span class="line">        JDBCUtils.close(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用工具类中的方法就简洁多啦！</p>
<p>再体会一下编译时异常变为运行时异常：</p>
<p>如果不抛异常，会报错</p>
<p><img src="/images/2020.11.16/1.png"></p>
<p>对JDBCUtils工具类中的getConnection()方法进行try-catch处理，将编译时异常转为运行时异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此时将不会报编译时错误</p>
<p><img src="/images/2020.11.16/2.png"></p>
<p>对另一个close方法的处理也一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) set.close();</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrepasredStatementByUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">        String name = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------连接数据库的步骤----------------</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.执行修改</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            statement.setString(<span class="number">1</span>, name);</span><br><span class="line">            statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">            System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.关闭</span></span><br><span class="line">            JDBCUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>二维数组</title>
    <url>/2020/10/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>最近做题总涉及到二维数组，觉得掌握还不熟悉，再复习一下。</p>
<h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p>在Java中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。声明二维数组的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type array[][];</span><br></pre></td></tr></table></figure>

<p>其中，type 表示二维数组的类型，array 表示数组名称，第一个中括号表示行，第二个中括号表示列。</p>
<a id="more"></a>

<h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><ul>
<li><p>第一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">ints[i][j] =__; <span class="comment">//分别赋值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> a[ ][ ] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][ ]；</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="获取单个元素"><a href="#获取单个元素" class="headerlink" title="获取单个元素"></a>获取单个元素</h3><p>当需要获取二维数组中元素的值时，也可以使用下标来表示。语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><ul>
<li><p>第一种：双重for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rows = matrix.length;</span><br><span class="line"><span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">       System.out.println(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种：增强for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] i : matrix)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j : i)&#123;</span><br><span class="line">       System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>二维数组</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序算法</title>
    <url>/2020/11/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>几种经典的排序算法会慢慢总结，今天先总结一下快速排序算法。</p>
<h2 id="【图文详解】快速排序算法及Java实现"><a href="#【图文详解】快速排序算法及Java实现" class="headerlink" title="【图文详解】快速排序算法及Java实现"></a>【图文详解】快速排序算法及Java实现</h2><h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>采用“分治”的思想，对于一组数据，选择一个基准元素（base），通常选择第一个或最后一个元素，通过第一轮扫描，比base小的元素都在base左边，比base大的元素都在base右边，再有同样的方法递归排序这两部分，直到序列中所有数据均有序为止。</p>
<h3 id="图文详解"><a href="#图文详解" class="headerlink" title="图文详解 :"></a>图文详解 :</h3><a id="more"></a>

<p>以 <strong>[3,4,6,1,2,4,7]</strong> 为例，以第一个元素<strong>3</strong>为base，定义左右两个指针（小熊<strong>l</strong>，小熊<strong>r</strong>），分别从两端开始扫描。从右向左找比<strong>3</strong>小的数，替换<strong>l</strong>所在位置的元素。再从左往右找比<strong>3</strong>大的数，然后替换r所在位置的元素。重复此过程直至两个小熊重合（两个指针指向同一元素），base替换此元素，此时第一轮结束。再递归排序base左右两部分的元素。</p>
<p>刚开始的时候让🐻<strong>l</strong> 指向序列的最左边，指向数字<strong>3</strong>。让🐻<strong>r</strong> 指向序列的最右边，指向数字 <strong>7</strong>。</p>
<p><img src="/images/qs1.jpg"></p>
<p>首先🐻<strong>r</strong>出动，一步步向左移，直到找到比base小的数停下来，替换此时🐻<strong>l</strong>所在位置的元素</p>
<p><img src="/images/qs2.jpg"></p>
<p>替换后的序列为 <strong>[2,4,6,1,2,4,7]</strong></p>
<p><img src="/images/qs3.jpg"></p>
<p>🐻<strong>l</strong>出动，向右移直到找到比base大的数停下来，替换此时🐻<strong>r</strong>所在位置的元素</p>
<p><img src="/images/qs4.jpg"></p>
<p>替换后的序列为 [2,4,6,1,4,4,7]，🐻r再次出动，重复上述步骤</p>
<p><img src="/images/qs5.jpg"></p>
<p>比base小，替换🐻<strong>l</strong>所在位置的元素</p>
<p><img src="/images/qs6.jpg"></p>
<p>替换后的序列为[2,1,6,1,4,4,7]，🐻l再次出动</p>
<p><img src="/images/qs7.jpg"></p>
<p>比base大，替换🐻<strong>r</strong>所在位置的元素</p>
<p><img src="/images/qs8.jpg"></p>
<p>替换后的序列为[2,1,6,6,4,4,7]，🐻r再次出动</p>
<p><img src="/images/qs9.jpg"></p>
<p>此时🐻<strong>l</strong>、🐻<strong>r</strong>指向同一元素</p>
<p><img src="/images/qs10.jpg"></p>
<p>base替换此元素</p>
<p><img src="/images/qs11.jpg"></p>
<p>第一轮扫描完成，序列为 [2,1,3,6,4,4,7]，此时base(3)左边的元素都比它小，右边的元素都比它大，再对这两部分进行上述操作。</p>
<p><img src="/images/qs12.jpg"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现 :"></a>代码实现 :</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组有多个元素进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> base = nums[start];<span class="comment">//以要进行排序数组第0个元素为base</span></span><br><span class="line">        <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">        <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//从右向左找，比base大，right--</span></span><br><span class="line">            <span class="keyword">while</span> (left&lt; right &amp;&amp; nums[right] &gt;= base) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base小，替换left所在位置的数字</span></span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            <span class="comment">//从左向右找，比base小，left++</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= base)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base大，替换right所在位置的数字</span></span><br><span class="line">            nums[right] = nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[left] = base;<span class="comment">//此时left=right，用base替换这个位置的数字</span></span><br><span class="line">        <span class="comment">//排列比base小的数字的数组</span></span><br><span class="line">        quickSort(nums, start, left - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//排列比base大的数字的数组</span></span><br><span class="line">        quickSort(nums, left + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先遍历</title>
    <url>/2020/10/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。</p>
<a id="more"></a>

<h3 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h3><p>二叉树的深度优先遍历分为前序遍历，中序遍历和后续遍历。</p>
<ul>
<li>前序遍历：先访问根，在访问左子树，最后访问右子树，总结就是“根左右”；</li>
<li>中序遍历：先访问左子树，再访问根，最后访问右子树，总结就是“左根右”；</li>
<li>后序遍历：先访问左子树，再访问右子树，最后访问根，总结就是“左右根”；</li>
</ul>
<p>通常采用<strong>递归</strong>的方式实现遍历，非递归方式需要结合<strong>栈</strong>（后进先出）的特点实现。</p>
<p>以前序遍历为例：</p>
<h4 id="1-非递归方式实现（栈）"><a href="#1-非递归方式实现（栈）" class="headerlink" title="1. 非递归方式实现（栈）"></a>1. 非递归方式实现（栈）</h4><p><img src="/images/dfs1.PNG"></p>
<p>1.1 二叉树结构定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>1.2 创建上图的树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">initTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode node1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">    TreeNode node2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">    TreeNode node3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">    TreeNode node4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">    TreeNode node5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">    TreeNode node6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">    TreeNode node7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">    TreeNode node8 = <span class="keyword">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line">    TreeNode node9 = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    node1.left = node2;</span><br><span class="line">    node1.right = node3;</span><br><span class="line">    node2.left = node4;</span><br><span class="line">    node2.right = node5;</span><br><span class="line">    node3.left = node6;</span><br><span class="line">    node3.right = node7;</span><br><span class="line">    node5.right = node8;</span><br><span class="line">    node7.left = node9;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.3 非递归方式实现dfs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//栈先进后出，先将右子节点压入栈</span></span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>1.4 测试及结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        dfs(initTree());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/dfs2.PNG"></p>
<h4 id="2-递归方式实现"><a href="#2-递归方式实现" class="headerlink" title="2.递归方式实现"></a>2.递归方式实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h3><p>同样有两种实现方式：递归和非递归。</p>
<p>递归好理解一点，非递归还没摸透，等弄懂了再来填坑~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从第i个节点开始深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 标记第i个节点已遍历</span></span><br><span class="line">    vertex[i].visited = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 打印当前遍历的节点</span></span><br><span class="line">    System.out.println(vertex[i].getValue());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历邻接矩阵中第i个节点的直接联通关系</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; vertex.length;j++)&#123;</span><br><span class="line">        <span class="comment">// 目标节点与当前节点直接联通，并且该节点还没有被访问，递归</span></span><br><span class="line">        <span class="keyword">if</span>(adjMat[i][j]==<span class="number">1</span> &amp;&amp; vertex[j].visited==<span class="keyword">false</span>)&#123;</span><br><span class="line">            traverse(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图的深度优先遍历（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点遍历标记</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex.length; i++) &#123;</span><br><span class="line">        vertex[i].visited = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从没有被遍历的节点开始深度遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; vertex.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vertex[i].visited == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">// 若是连通图，只会执行一次</span></span><br><span class="line">            traverse(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>递归与回溯</title>
    <url>/2020/11/15/%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="递归与回溯"><a href="#递归与回溯" class="headerlink" title="递归与回溯"></a>递归与回溯</h1><h4 id="一句话讲递归与回溯"><a href="#一句话讲递归与回溯" class="headerlink" title="一句话讲递归与回溯"></a>一句话讲递归与回溯</h4><p>递归：自己调用自己。本质就是找到前后的联系，找到递归的公式。</p>
<p>回溯：执行一次深度优先遍历（DFS），一条路走到底，走不通的时候，返回回来，继续执行，一直这样下去，直到回到起点。</p>
<a id="more"></a>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="一般情况为："><a href="#一般情况为：" class="headerlink" title="一般情况为："></a>一般情况为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;        </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">recursion(参数<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="例子：阶乘"><a href="#例子：阶乘" class="headerlink" title="例子：阶乘"></a>例子：阶乘</h4><ol>
<li><p>阶乘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//调用自己</span></span><br><span class="line">    <span class="keyword">return</span> n * recursion(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归过程：</p>
<p><img src="/images/%E9%80%92%E5%BD%92.PNG"></p>
</li>
</ol>
<p>求f(5)的时候，只需要求出f(4)即可，如果求f(4)我们要求出f(3)……，一层一层的调用，当n=1的时候，我们直接返回1，然后再一层一层的返回，直到返回f(5)为止。</p>
<h4 id="一些较实际的情况："><a href="#一些较实际的情况：" class="headerlink" title="一些较实际的情况："></a>一些较实际的情况：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;       </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">&#125;</span><br><span class="line">可能有一些逻辑运算   </span><br><span class="line">recursion(参数<span class="number">1</span>);    </span><br><span class="line">可能有一些逻辑运算    </span><br><span class="line">recursion(参数<span class="number">2</span>);            </span><br><span class="line">……    </span><br><span class="line">recursion(参数n);</span><br><span class="line">可能有一些逻辑运算</span><br></pre></td></tr></table></figure>

<h4 id="例子：反转链表"><a href="#例子：反转链表" class="headerlink" title="例子：反转链表"></a>例子：反转链表</h4><ol start="2">
<li><p>反转链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseList</span><span class="params">(ListNode root)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//（终止条件）</span></span><br><span class="line">     <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> ;</span><br><span class="line">       <span class="comment">//（递归调用）先打印下一个</span></span><br><span class="line">     reverseList(root.next);</span><br><span class="line">       <span class="comment">//（逻辑处理）把后面的都打印完了在打印当前节点</span></span><br><span class="line">     System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
</li>
</ol>
<p><img src="/images/reverse.PNG"></p>
<h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>回溯的本质，其实是在递归基础上进行了改进</p>
<h4 id="一般情况为：-1"><a href="#一般情况为：-1" class="headerlink" title="一般情况为："></a>一般情况为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(不满足继续递归查找的条件，通常为界限判断)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(满足查找条件)</span><br><span class="line">    <span class="keyword">return</span> 这个值/节点;</span><br><span class="line">递归左边</span><br><span class="line">递归右边</span><br><span class="line">递归结果-回溯</span><br></pre></td></tr></table></figure>

<h4 id="例子：矩阵中的路径（剑指Offer12）"><a href="#例子：矩阵中的路径（剑指Offer12）" class="headerlink" title="例子：矩阵中的路径（剑指Offer12）"></a>例子：矩阵中的路径（剑指Offer12）</h4><p>判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：board &#x3D; [</span><br><span class="line">			   [&quot;a&quot;,&quot;b&quot;],</span><br><span class="line">               [&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">              ],</span><br><span class="line">     word &#x3D; &quot;abcd&quot;</span><br><span class="line"></span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：回溯算法（DFS+剪枝）。遍历矩阵中所以字符，先朝一个方向搜索到底，再回溯至上个节点，再沿另一方向搜索，以此类推。在搜索中，遇到匹配不成功（如索引越界、此元素已访问、此矩阵元素和目标字符不同）的情况就立即返回。</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界条件（越界、与目标元素不同）</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//全部匹配完成</span></span><br><span class="line">        <span class="keyword">if</span>(k == word.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//将当前元素标记为&#x27;\0&#x27;,不可再被访问</span></span><br><span class="line">        <span class="comment">//递归上下左右</span></span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) ||dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        board[i][j] = temp;<span class="comment">//恢复其本身值</span></span><br><span class="line">        <span class="comment">//递归结果判断-回溯</span></span><br><span class="line">        <span class="keyword">return</span> res;<span class="comment">//上面4个方向，只要有一个能查找到，就返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="例子：二叉搜索树的最近公共祖先-剑指Offer68-Ⅱ"><a href="#例子：二叉搜索树的最近公共祖先-剑指Offer68-Ⅱ" class="headerlink" title="例子：二叉搜索树的最近公共祖先(剑指Offer68-Ⅱ)"></a>例子：二叉搜索树的最近公共祖先(剑指Offer68-Ⅱ)</h4><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="/images/OFfer68.PNG"></p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思想：通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。从底至顶回溯，当节点 p, q 在节点 root 的异侧时，节点root 即为最近公共祖先，则向上返回 root 。</p>
<p>p,q和root有三种情况：</p>
<pre><code>1). p,q在root左右，返回root
2). p,q都在root左，返回`lowestCommonAncestor( root.left, TreeNode p, TreeNode q)`
3). p,q都在root右，返回`lowestCommonAncestor( root.right, TreeNode p, TreeNode q)`</code></pre>
<ul>
<li><p>递归终止条件<br>if(root == null) return null;//越过叶子节点，返回null<br>if(root == p) return p;//找到p，返回p<br>if(root == q) return q;//找到q，返回q</p>
</li>
<li><p>递归体<br>递归左子节点，返回值为left<br><code>TreeNode left = lowestCommonAncestor( root.left, TreeNode p, TreeNode q);</code><br>递归右子节点，返回值为right<br><code>TreeNode right = lowestCommonAncestor( root.right, TreeNode p, TreeNode q);</code></p>
</li>
<li><p>递归结果<br>1).left == null &amp;&amp; right == null<br>两边都没找到，返回null<br>2).left == null<br>右边找到，返回right<br>3). right == null<br>右边找到，返回left<br>4).left != null &amp;&amp; right != null<br>说明p,q在root两侧，返回root</p>
</li>
</ul>
</li>
<li><p>图文过程详解</p>
<p><img src="/images/Offer68/1.PNG"></p>
<p><img src="/images/Offer68/2.PNG"></p>
<p><img src="/images/Offer68/3.PNG"></p>
<p><img src="/images/Offer68/4.PNG"></p>
<p><img src="/images/Offer68/5.PNG"></p>
<p><img src="/images/Offer68/6.PNG"></p>
<p><img src="/images/Offer68/7.PNG"></p>
<p><img src="/images/Offer68/8.PNG"></p>
<p><img src="/images/Offer68/9.PNG"></p>
<p><img src="/images/Offer68/10.PNG"></p>
<p><img src="/images/Offer68/11.PNG"></p>
<p><img src="/images/Offer68/12.PNG"></p>
<p><img src="/images/Offer68/13.PNG"></p>
<p><img src="/images/Offer68/14.PNG"></p>
<p><img src="/images/Offer68/15.PNG"></p>
<p><img src="/images/Offer68/16.PNG"></p>
<p><img src="/images/Offer68/17.PNG"></p>
<p><img src="/images/Offer68/18.PNG"></p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归体</span></span><br><span class="line">        TreeNode left = lowestCommonAncestor( root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor( root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归结果判断-回溯</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<!--2020/11/24更新-->

<p>与上一题相似的<strong>机器人运动范围</strong>问题</p>
<p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：m &#x3D; 2, n &#x3D; 3, k &#x3D; 1</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：m &#x3D; 3, n &#x3D; 1, k &#x3D; 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归回溯（DFS）。与上一题类似。</p>
<ul>
<li>递归出口： ① 行列索引越界 或 ② 数位和超出目标值 k 或 ③ 当前元素已访问过 </li>
<li>递归体：将[i,j]状态设为true，代表已走过，在回溯之后继续走的时候需要避开已走过的方格</li>
<li>回溯返回值： 返回 1 + 右方搜索的可达解总数 + 下方搜索的可达解总数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];        </span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,m,n,k,visited);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算两个数的位数和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> si = <span class="number">0</span>, sj = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">          si += i % <span class="number">10</span>;</span><br><span class="line">          i/=<span class="number">10</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">            sj += j % <span class="number">10</span>;</span><br><span class="line">            j /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> si + sj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DFS+回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">boolean</span>[][] visited)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口： ① 行列索引越界 或 ② 数位和超出目标值 k 或 ③ 当前元素已访问过 </span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= m || j &gt;= n || sum(i,j) &gt; k || visited[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将【i,j】状态设为true，代表已走过，在回溯之后继续走的时候需要避开已走过的方格</span></span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//回溯返回值： 返回 1 + 右方搜索的可达解总数 + 下方搜索的可达解总数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(i + <span class="number">1</span>, j, m, n, k, visited) + dfs(i, j + <span class="number">1</span>, m, n, k, visited);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<!--2020/11/26更新-->

<p><strong>礼物的最大价值</strong></p>
<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归回溯。每次只能向右或向下，对每一格的来源只有向左或向上。从右下角开始递归，定义helper方法找到当前位置的礼物最大值。</p>
<ul>
<li>递归出口： ① 行列索引越界 ，返回 0（礼物最小为1） ② 当前元素已访问过 ，返回当前结果</li>
<li>递归体：比较左边格子与上边格子的返回结果，取最大值，与当前位置的价值加和。将visited[i,j]状态设为true，代表已走过，在回溯之后继续走的时候需要避开已走过的方格。</li>
<li>回溯返回值： 返回 当前位置加和后的结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m ;<span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">int</span> n ;<span class="comment">//列数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(grid.length == <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> helper(grid, m - <span class="number">1</span>, n - <span class="number">1</span>, visited);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">boolean</span>[][] visited)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口：边界条件</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &gt;= n || j &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;         </span><br><span class="line">        <span class="comment">//如果已访问过，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(visited[i][j] == <span class="keyword">true</span>) <span class="keyword">return</span> grid[i][j];</span><br><span class="line">        <span class="comment">//递归比较当前位置的左边格子与上边格子的返回结果，取最大值</span></span><br><span class="line">        grid[i][j] += Math.max(helper(grid, i - <span class="number">1</span>, j, visited),helper(grid, i, j - <span class="number">1</span>, visited));</span><br><span class="line">        <span class="comment">//并把当前元素状态设为true</span></span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> grid[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：动态规划。</p>
</li>
</ul>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>算法小白对递归和回溯的理解只到这里，希望随着刷的题越来越多，理解也越来越清晰透彻，到时再来分享！</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>递归与回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-MySQL学生管理系统</title>
    <url>/2020/11/19/Java-MySQL%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="Java-MySQL学生管理系统"><a href="#Java-MySQL学生管理系统" class="headerlink" title="Java+MySQL学生管理系统"></a>Java+MySQL学生管理系统</h1><p>源码：<a href="https://github.com/ruiwang-97/StudentManagement.git">https://github.com/ruiwang-97/StudentManagement.git</a></p>
<p><a href="%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">需求分析</a></p>
<p><a href="%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF">设计思路</a></p>
<p><a href="%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></p>
<p><a href="%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C">测试效果</a></p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>这是一个学生管理系统，以管理员身份登录，实现对学员以及年级信息的增删改查操作。</p>
<p>具体需要实现的功能有：</p>
<a id="more"></a>

<p>1、统计学生人数。</p>
<p>2、查看学生名单。</p>
<p>3、按学号查询学生姓名。</p>
<p>4、按姓名查询学生信息。</p>
<p>5、删除学生记录。</p>
<p>6、修改学生年级。</p>
<p>7、添加学生。</p>
<p>8、退出。</p>
<p>分析：</p>
<p>其中1，2，3，4为查询操作，1、3返回单个值，调用dao包中BasicDao中的<code>scalar()</code>方法，2返回多个对象，调用BasicDao中的<code>queryMulti()</code>方法，3返回单个对象，调用BasicDao中的<code>querySingle()</code>方法。5，6，7为增删改，调用<code>update()</code>方法。</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>分为五个模块：dao、domain、service、view、utils。其中</p>
<ul>
<li><p>dao包访问数据类，包括BasicDao，StuDao，ManagerDao。提供对数据的增删改查的通用方法。</p>
</li>
<li><p>domain包实体类，包括Manager，Student。</p>
</li>
<li><p>service包业务类，包括managerService提供登录验证方法，stdentService提供增删改查方法。</p>
</li>
<li><p>view包界面类，stuView提供主界面，TSUtility封装控制台操作。</p>
</li>
<li><p>utils包数据库连接类，通过德鲁伊数据库连接池获取连接对象。</p>
</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="MySQL部分"><a href="#MySQL部分" class="headerlink" title="MySQL部分"></a>MySQL部分</h3><ol>
<li><p>建库<code>studentm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE studentm;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建表</p>
<ul>
<li><p>manager表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE manager(</span><br><span class="line">id INT(11)PRIMARY KEY ,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pword VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT(11)PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">stunumber VARCHAR(20) NOT NULL,</span><br><span class="line">stuname VARCHAR(20) NOT NULL,</span><br><span class="line">gender VARCHAR(20) NOT NULL,</span><br><span class="line">grade VARCHAR(20) NOT NULL,</span><br><span class="line">tel INT(20) NOT NULL,</span><br><span class="line">email VARCHAR(20) NOT NULL,</span><br><span class="line">birth VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置管理员用户名、密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &#96;manager&#96; VALUES(1,&#39;john&#39;,8888);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以先加入一些学生用于测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &#96;stu&#96; VALUES(1,&#39;S0018&#39;,&#39;梅小凤&#39;,&#39;女&#39;,&#39;B2&#39;,158111876544,&#39;xiaofeng@qq.com&#39;,&#39;1998-3-3&#39;),(2,&#39;S0035&#39;,&#39;晓梅&#39;,&#39;女&#39;,&#39;B3&#39;,156091875566,&#39;xiaomei@qq.com&#39;,&#39;1996-2-16&#39;),(</span><br><span class="line">3,&#39;S0025&#39;,&#39;王小锐&#39;,&#39;女&#39;,&#39;B5&#39;,18345278844,&#39;rui97@qq.com&#39;,&#39;1997-9-16&#39;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Java部分"><a href="#Java部分" class="headerlink" title="Java部分"></a>Java部分</h3><ol>
<li><p>导入jar包和druid.properties(注意修改库名)，utils包下的JDBCUtilsByDruid类与数据库建立连接和关闭连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.ECField;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 此类是通过德鲁伊数据库连接池获取连接对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/17$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsByDruid</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.创建一个指定参数的数据流连接池</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从数据库连接池中获取可用的连接对象</span></span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立dao包，定义一个用来被继承的对数据库进行基本操作的BasicDao，提供通用的增删改查方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"><span class="keyword">import</span> sm.utils.JDBCUtilsByDruid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供通用的增删改查方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：通用的增删改方法，针对于任何表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> update = qr.update(connection, sql, params);</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回单个对象，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">querySingle</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//        QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(clazz), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回多个对象，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryMulti</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//            QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(clazz), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回单个值，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">scalar</span><span class="params">(String sql, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//            QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> ScalarHandler(), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StuDao和ManagerDao继承于BasicDao。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDao</span> <span class="keyword">extends</span> <span class="title">BasicDao</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerDao</span> <span class="keyword">extends</span> <span class="title">BasicDao</span>&lt;<span class="title">Manager</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立domain包，Manager类和Student对应MySQL中的表定义属性及其类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 管理员类 id,username,pword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pword;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(<span class="keyword">int</span> id, String username, String pword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.pword = pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPword</span><span class="params">(String pword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pword = pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Manager&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pword=&#x27;&quot;</span> + pword + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 学生类  id,stunumber,stuname,gender,grade,tel,email,birth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String stunumber;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String stuname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String grade;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String stunumber, String stuname, String gender, String grade, String tel, String email, String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.stunumber = stunumber;</span><br><span class="line">        <span class="keyword">this</span>.stuname = stuname;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStunumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stunumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStunumber</span><span class="params">(String stunumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stunumber = stunumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuname</span><span class="params">(String stuname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuname = stuname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(String grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stunumber + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 stuname + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 gender + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 grade + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 tel + <span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                 email + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 birth;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立service包，其中managerService类提供管理员登录验证的方法，studentService类用于提供学生增删改查的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.dao.ManagerDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 提供管理员登录验证的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">managerService</span> </span>&#123;</span><br><span class="line">    ManagerDao dao = <span class="keyword">new</span> ManagerDao();</span><br><span class="line"><span class="comment">//登录验证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line"><span class="comment">//此处易出现java.lang.ClassCastException异常，Long型不可强转为Boolean型</span></span><br><span class="line">        Long count =  (Long)dao.scalar(<span class="string">&quot;select count(*) from manager where username=? and pword=?&quot;</span>, username,password);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.dao.StuDao;</span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类用于提供学生增删改查的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentService</span> </span>&#123;</span><br><span class="line">    StuDao dao = <span class="keyword">new</span> StuDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、统计学生人数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nums</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long longnums = (Long) dao.scalar(<span class="string">&quot;select count(*) from stu&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = longnums.intValue();</span><br><span class="line">        <span class="keyword">return</span> nums ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、查看学生名单-返回学生列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; students = dao.queryMulti(<span class="string">&quot;select * from stu&quot;</span>,Student.class);</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、按学号查询学生姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByStuNumber</span><span class="params">(String stunumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) dao.scalar(<span class="string">&quot;select stuname from stu where stunumber = ?&quot;</span>, stunumber);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4、按姓名查询学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryByStuName</span><span class="params">(String stuName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.querySingle(<span class="string">&quot;select * from stu where stuname like ?&quot;</span>, Student.class, <span class="string">&quot;%&quot;</span>+stuName+<span class="string">&quot;%&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.删除学生记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteStu</span><span class="params">(String stunumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.update(<span class="string">&quot;delete from stu where stunumber = ?&quot;</span>, stunumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.修改学生年级</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">changeStu</span><span class="params">(String stunumber,String newGrade)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> dao.update(<span class="string">&quot;update stu set grade = ? where stunumber = ?&quot;</span>,newGrade,stunumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStu</span><span class="params">(<span class="keyword">int</span> id, String stunumber, String stuname, String gender, String grade, String tel, String email, String birth)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> dao.update(<span class="string">&quot;insert into stu values(?,?,?,?,?,?,?,?)&quot;</span>,id,stunumber,stuname,gender,grade,tel,email,birth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立view包，其中TSUtility工具类用于读取控制台操作，stuView用于主界面的显示。首先是登陆界面，输入正确的用户名和密码后进入主菜单，控制台输入相应功能序号调取相应方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"><span class="keyword">import</span> sm.service.managerService;</span><br><span class="line"><span class="keyword">import</span> sm.service.studentService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 主界面显示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stuView</span> </span>&#123;</span><br><span class="line">    managerService ms = <span class="keyword">new</span> managerService();</span><br><span class="line">    studentService ss = <span class="keyword">new</span> studentService();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> stuView().login();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录界面显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = input.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ms.login(username, password))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            showMainMenu();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：显示主菜单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> loopFlag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span> key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">            key = TSUtility.readMenuSelection();</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前学生人数为：&quot;</span> + ss.nums());</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    listStudents();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    queryByStuNumber();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    queryByStuName();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    deleteByStuName();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    changeGrade();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">                    addStudent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                    <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span> (yn == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">                        loopFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (loopFlag);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始显示主菜单</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================请选择操作键================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1、统计学生人数&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2、查看学生名单&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3、按学号查询学生姓名&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4、按姓名查询学生信息&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5、删除学生记录&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;6、修改学生年级&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;7、添加学生&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;8、退出&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示当前学生列表方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------学生列表-----------------------------&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; allStudents = ss.getAllStudents();</span><br><span class="line">        <span class="keyword">if</span> (allStudents.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有客户记录！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t性别\t年级\t电话\t邮箱\t出生日期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student e : allStudents) &#123;</span><br><span class="line">            System.out.println(e.getStunumber() + <span class="string">&quot;\t&quot;</span> + e.getStuname()  + <span class="string">&quot;\t&quot;</span> + e.getGender() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    + e.getGrade() + <span class="string">&quot;\t&quot;</span> + e.getTel() + <span class="string">&quot;\t&quot;</span> + e.getEmail() + <span class="string">&quot;\t&quot;</span> + e.getBirth());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按学号查询学生姓名方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryByStuNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================查询操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        String s1 = ss.queryByStuNumber(s);</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败,请重新操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按姓名查询学生信息方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryByStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================查询操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        Student s1 = ss.queryByStuName(s);</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t性别\t年级\t电话\t邮箱\t出生日期&quot;</span>);</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败，请重新操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生记录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteByStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================删除操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;确认是否删除(Y/N)：&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(yn == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ss.deleteStu(s) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">&quot;输入信息错误，请重新操作！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生年级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================修改操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入修改后的年级：&quot;</span>);</span><br><span class="line">        String newGrade = TSUtility.readString();</span><br><span class="line">        <span class="keyword">if</span> (ss.changeStu(s,newGrade) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;确认是否修改(Y/N)：&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">            <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================添加操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生序号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = TSUtility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String stuNumber = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        String stuName = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生性别：&quot;</span>);</span><br><span class="line">        String gender = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生年级：&quot;</span>);</span><br><span class="line">        String grade = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生电话：&quot;</span>);</span><br><span class="line">        String tel = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生邮箱：&quot;</span>);</span><br><span class="line">        String email = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生出生日期:&quot;</span>);</span><br><span class="line">        String birth = TSUtility.readString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ss.addStu(id,stuNumber, stuName, gender, grade, tel, email, birth) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;确认是否添加(Y/N)：&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">            <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><ol>
<li><p>登陆界面</p>
<ul>
<li><p>如果用户名密码输入正确，显示“登陆成功！”</p>
<p><img src="/images/SM/1.PNG"></p>
</li>
<li><p>如果用户名密码输入不正确，显示“登陆失败！”</p>
<p><img src="/images/SM/2.PNG"></p>
</li>
</ul>
</li>
<li><p>功能1、统计学生人数</p>
<p><img src="/images/SM/3.PNG"></p>
</li>
<li><p>功能2、查看学生名单</p>
<p><img src="/images/SM/4.PNG"></p>
</li>
<li><p>功能3、按学号查询学生姓名</p>
<ul>
<li><p>如果输入学号正确</p>
<p><img src="/images/SM/5.PNG"></p>
</li>
<li><p>如果输入学号不正确</p>
<p><img src="/images/SM/6.PNG"></p>
</li>
</ul>
</li>
<li><p>功能4、按姓名查询学生信息</p>
<ul>
<li><p>如果输入名字正确（可以模糊查询）</p>
<p><img src="/images/SM/7.PNG"></p>
</li>
<li><p>如果输入名字不正确</p>
<p><img src="/images/SM/8.PNG"></p>
</li>
</ul>
</li>
<li><p>功能5、删除学生记录</p>
<ul>
<li><p>如果输入学号正确</p>
<ul>
<li><p>确认删除(Y)</p>
<p><img src="/images/SM/9.PNG"></p>
<p>删除后查看学生列表，确定已删除</p>
<p><img src="/images/SM/10.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>如果输入学号不正确</p>
<p><img src="/images/SM/11.PNG"></p>
</li>
</ul>
</li>
<li><p>功能6、修改学生年级</p>
<p>例如将学号为S0018的学生年级改为B1</p>
<ul>
<li><p>确认修改(Y)</p>
<p><img src="/images/SM/12.PNG"></p>
<p>修改后查看学生列表，确定已修改</p>
<p><img src="/images/SM/15.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>功能7、添加学生</p>
<p>输入学生序号、学号、姓名、性别、年级、电话、邮箱、出生日期</p>
<ul>
<li><p>确认添加(Y)</p>
<p><img src="/images/SM/13.PNG"></p>
<p>添加后查看学生列表，确定已添加</p>
<p><img src="/images/SM/14.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>功能8、退出</p>
<ul>
<li><p>确认退出(Y)</p>
<p><img src="/images/SM/16.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java Mysql</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>/2020/11/26/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>因为在学习Spring AOP，其中用到了Java动态代理机制，所以好好把动态代理模式梳理了一遍。</p>
<h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><ul>
<li>原理：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>静态代理弊端：只能一个代理类实现一个接口，如果接口中的还有未实现的方法时，代理类也要必须实现。同时会产生大量重复的代码。</p>
</li>
<li><p>动态代理：通过反射机制实现动态代理（利用java.lang.reflect.InvocationHandler与java.lang.reflect.Proxy），抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理。</p>
</li>
<li><p>结构示意图：</p>
</li>
</ul>
<p><img src="/images/proxy.png"></p>
<p>代理类和委托类通常会实现相同的接口，所以在访问者看来两者没有丝毫的区别。通过代理类这中间一层，能有效控制对委托类对象的直接访问，也可以很好地隐藏和保护委托类对象，同时也为实施不同控制策略预留了空间，从而在设计上获得了更大的灵活性。</p>
<h2 id="Java-动态代理相关API"><a href="#Java-动态代理相关API" class="headerlink" title="Java 动态代理相关API"></a>Java 动态代理相关API</h2><p>Java动态代理类位于java.lang.reflect包下，一般主要涉及到以下两个类：</p>
<p>（1）Interface InvocationHandler：调用处理器接口，该接口中仅定义了一个invoke方法，用于集中处理在动态代理类实例上的方法调用，通常在该方法中实现对实现类的代理访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象</span><br><span class="line">&#x2F;&#x2F; 第三个方法是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上发射执行</span><br><span class="line">public object invoke(Object obj,Method method, Object[] args)</span><br></pre></td></tr></table></figure>

<p>每次生成动态代理类实例时都需要指定一个实现了该接口的调用处理器对象。</p>
<p>（2）Proxy：该类即为<strong>动态代理类</strong>，提供了一组静态方法来为一组接口动态地生成代理类及其实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Proxy的静态方法</span></span><br><span class="line"><span class="comment">// 方法 1: 该方法用于获取指定代理对象所关联的调用处理器</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> InvocationHandler <span class="title">getInvocationHandler</span><span class="params">(Object proxy)</span> </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 2：该方法用于获取关联于指定类装载器和一组接口的 动态代理类的类对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Class <span class="title">getProxyClass</span><span class="params">(ClassLoader loader, Class[] interfaces)</span> </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 3：该方法用于判断指定类对象是否是一个动态代理类</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProxyClass</span><span class="params">(Class cl)</span> </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 4：该方法用于为指定类装载器、一组接口及调用处理器 创建一个动态代理对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class[] interfaces, </span></span></span><br><span class="line"><span class="function"><span class="params">    InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="代理机制"><a href="#代理机制" class="headerlink" title="代理机制"></a>代理机制</h2><h4 id="动态代理步骤："><a href="#动态代理步骤：" class="headerlink" title="动态代理步骤："></a>动态代理步骤：</h4><ol>
<li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法</li>
<li>创建被代理的类以及接口</li>
<li>通过Proxy的静态方法newProxyInstance(ClassLoaderloader, Class[] interfaces, InvocationHandler h)创建一个代理</li>
<li>通过代理实现类的方法</li>
</ol>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><ol>
<li><p>需要动态代理的接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Human&#123;</span><br><span class="line"></span><br><span class="line">    String getBelief();</span><br><span class="line"></span><br><span class="line">    void eat(String food);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>被代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据被代理类，动态的<strong>创建一个代理类及其对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代理类的对象调用方法a时，动态调用<strong>被代理类的同名方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值，使用方法或构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法(创建代理类对象时传参handler)</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Scanner类</title>
    <url>/2020/11/28/Java-Scanner%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="Java-Scanner类"><a href="#Java-Scanner类" class="headerlink" title="Java Scanner类"></a>Java Scanner类</h2><ul>
<li><p>用于获取用户输入<br>语法：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可通过调用下列函数<code>nextDouble()</code>，<code>nextFloat</code>，<code>nextInt()</code>，<code>nextLine()</code>，<code>nextLong()</code>，<code>nextShot()</code>读取用户在命令行输入的各种数据类型　</p>
</li>
<li><p>next()与nextLine()区别：</p>
  <a id="more"></a>

<ul>
<li>next() : </li>
</ul>
<ol>
<li>一定要读到有效字符结束输入</li>
<li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。<ol start="3">
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
<li>next() 不能得到带有空格的字符串。<br>总之就是<strong>遇到空格停止扫描</strong></li>
</ol>
<ul>
<li>nextLine()：</li>
</ul>
<ol>
<li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>可以获得空白。<br>总之就是<strong>以回车为停止扫描</strong></li>
</ol>
</li>
</ol>
</li>
</ul>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入：&quot;</span>);</span><br><span class="line">String s = sc.next();<span class="comment">//Hello World!</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>
<p>  测试效果：<br><img src="https://img-blog.csdnimg.cn/20201127160744149.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入：&quot;</span>);</span><br><span class="line">String s = sc.nextLine();<span class="comment">//Hello World!</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>
<p>  测试效果：<br><img src="https://img-blog.csdnimg.cn/20201127160901915.png" alt="在这里插入图片描述"></p>
<ul>
<li><p>控制台输入一个可变长度数组</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String[] strArray = <span class="keyword">null</span>;</span><br><span class="line">strArray = sc.nextLine().split(<span class="string">&quot;\\s*,\\s*&quot;</span>);  <span class="comment">// &#x27;,&#x27;分割，前后可以有空格</span></span><br><span class="line"><span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[strArray.length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; strArray.length; i++) &#123;</span><br><span class="line">    intArray[i] = Integer.parseInt(strArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制台输入一个二维数组</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> System.out.print(<span class="string">&quot;二维数组的行数：&quot;</span>);</span><br><span class="line"> <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line"> System.out.println(<span class="string">&quot;二维数组的列数：&quot;</span>);</span><br><span class="line"> <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line"> <span class="keyword">int</span>[][]matrix = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line"> sc.nextLine();<span class="comment">//用来跳过行列后的回车符</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++)&#123;</span><br><span class="line">         matrix[i][j] = sc.nextInt();</span><br><span class="line">         System.out.print(matrix[i][j] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> 测试效果：<br><img src="https://img-blog.csdnimg.cn/20201128205414284.PNG" alt="在这里插入图片描述"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Scanner类</tag>
      </tags>
  </entry>
  <entry>
    <title>全国高校计算机能力挑战赛</title>
    <url>/2020/11/30/%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="2020真题"><a href="#2020真题" class="headerlink" title="2020真题"></a>2020真题</h2><h4 id="16题：1-N整数中所有立方值的平方根为整数的数的个数"><a href="#16题：1-N整数中所有立方值的平方根为整数的数的个数" class="headerlink" title="16题：1-N整数中所有立方值的平方根为整数的数的个数"></a>16题：1-N整数中所有立方值的平方根为整数的数的个数</h4><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 10</span><br><span class="line">输出： 3</span><br></pre></td></tr></table></figure>

<ul>
<li>输入是10，其中1* 1* 1 = 1，平方根是1，为整数<br>输入是4，其中4 * 4 * 4 = 64，平方根是8，为整数<br>输入是8，其中9 * 9 * 9 = 729，平方根是27，为整数<br>输出 3</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mul = i * i * i;</span><br><span class="line">            <span class="keyword">int</span> sqrt = (<span class="keyword">int</span>)Math.sqrt(mul);</span><br><span class="line">            <span class="keyword">if</span>(sqrt * sqrt == mul)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。"><a href="#17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。" class="headerlink" title="17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。"></a>17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">8 4</span><br><span class="line">11 9 12 5 10 19 8 6  </span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">42</span><br></pre></td></tr></table></figure>

<ul>
<li>思路：要找出M个重量差距最小的放在一盒（即一组），可以先将所有鸡蛋的重量（数组中所有元素）从小到大排序，找出每组的<strong>最大值 - 最小值</strong>，其中差值最小的且数组元素总和最大的一组即为所求，输出这组的元素总和。</li>
<li>实现步骤：<ul>
<li>将数组进行排序（采用了快速排序，具体讲解请见另一篇博文）</li>
<li>将N- M + 1组的差值保存在abs数组</li>
<li>找出abs数组的最小值（与排序后nums的索引相同）</li>
<li>上面找出的最小值可能有多个元素相同为最小值，从后向前遍历abs数组，找到最小值的那组nums元素，输出它们的和。</li>
<li>题目要求输入的N和M是整数，鸡蛋重量和最后的输出都是浮点型，输出结果保留两位小数。</li>
</ul>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String str1 = sc.nextLine();</span><br><span class="line">      String str2 = sc.nextLine();</span><br><span class="line">      String[] num = str1.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> N = Integer.parseInt(num[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">int</span> M = Integer.parseInt(num[<span class="number">1</span>]);</span><br><span class="line">      String[] ff = str2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">float</span>[] nums = <span class="keyword">new</span> <span class="keyword">float</span>[N];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">          nums[i] = Float.parseFloat(ff[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//        Arrays.sort(nums);</span></span><br><span class="line">      quickSort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">float</span> res = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//M个重量差距最小 即找出最小差值</span></span><br><span class="line">      <span class="keyword">float</span>[] abs = <span class="keyword">new</span> <span class="keyword">float</span>[N - M + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - M + <span class="number">1</span>; i++)&#123;</span><br><span class="line">              abs[i] = nums[i + M - <span class="number">1</span>] - nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//找出abs中的最小值</span></span><br><span class="line">      <span class="keyword">float</span> min = abs[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; abs.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(abs[i] &lt; min)&#123;</span><br><span class="line">              min = abs[i];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//返回abs[i]中元素的和</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = abs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(min == abs[i])&#123;</span><br><span class="line">              <span class="comment">//3-6 N=8 M=4 i=6</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j = i + (N - M -<span class="number">1</span>); j &gt;= i ; j--)&#123;</span><br><span class="line">                  res += nums[j];</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//题目要求结果保留两位小数</span></span><br><span class="line">      DecimalFormat fnum  =   <span class="keyword">new</span>  DecimalFormat(<span class="string">&quot;##0.00&quot;</span>);</span><br><span class="line">      String dd = fnum.format(res);</span><br><span class="line">      System.out.println(dd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//快速排序</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">float</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//数组有多个元素进行排序</span></span><br><span class="line">      <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">          <span class="keyword">float</span> base = nums[start];<span class="comment">//以要进行排序数组第0个元素为base</span></span><br><span class="line">          <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">          <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">          <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">              <span class="comment">//从右向左找，比base大，right--</span></span><br><span class="line">              <span class="keyword">while</span> (left&lt; right &amp;&amp; nums[right] &gt;= base) &#123;</span><br><span class="line">                  right--;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//比base小，替换left所在位置的数字</span></span><br><span class="line">              nums[left] = nums[right];</span><br><span class="line">              <span class="comment">//从左向右找，比base小，left++</span></span><br><span class="line">              <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= base)&#123;</span><br><span class="line">                  left++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//比base大，替换right所在位置的数字</span></span><br><span class="line">              nums[right] = nums[left];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//交换base与此时left、right指向的元素</span></span><br><span class="line">          <span class="keyword">float</span> temp = nums[left];</span><br><span class="line">          nums[left] = base;<span class="comment">//此时left=right，用base替换这个位置的数字</span></span><br><span class="line">          base = temp;</span><br><span class="line">          <span class="comment">//排列比base小的数字的数组</span></span><br><span class="line">          quickSort(nums, start, left - <span class="number">1</span>);</span><br><span class="line">          <span class="comment">//排列比base大的数字的数组</span></span><br><span class="line">          quickSort(nums, left + <span class="number">1</span>, end);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201130161528809.png" alt="在这里插入图片描述"></li>
</ul>
<h4 id="19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y-求当天饮料店两种饮料的销量"><a href="#19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y-求当天饮料店两种饮料的销量" class="headerlink" title="19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y 求当天饮料店两种饮料的销量"></a>19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y 求当天饮料店两种饮料的销量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：400 300</span><br><span class="line">输出：10 25</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：数学方法，解一元二次方程组。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">    <span class="comment">//15 * m + 10 * n = 400   5 * m + 10 * n = 300</span></span><br><span class="line">    System.out.println((a - b) / <span class="number">10</span> + <span class="string">&quot; &quot;</span> + (<span class="number">3</span> * b - a) / <span class="number">20</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a>模拟题</h2><h4 id="题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。"><a href="#题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。" class="headerlink" title="题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。"></a>题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Hello World!</span><br><span class="line">输出：</span><br><span class="line">a-z 10</span><br><span class="line">0-9 0</span><br><span class="line">others 1</span><br></pre></td></tr></table></figure>

<ul>
<li>ASCII 码一共规定了128个字符的编码，0-31及127是控制字符或通信专用字符，32-126是字符，其中：32为空格，48-57为0~9十个阿拉伯数字，65-90为26个大写英文字母，97-122为26个小写英文字母。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String input = in.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> count1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count3 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count4 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">          <span class="keyword">char</span> temp = input.charAt(i);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">65</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">90</span> || <span class="number">97</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">              count1++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">48</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">              count2++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//空格</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(temp &lt;= <span class="number">32</span>)</span><br><span class="line">              count3++;</span><br><span class="line">          <span class="keyword">else</span> count4++;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;a-z&quot;</span> + <span class="string">&quot; &quot;</span> + count1);</span><br><span class="line">      System.out.println(<span class="string">&quot;0-9&quot;</span> + <span class="string">&quot; &quot;</span> + count2);</span><br><span class="line">      System.out.println(<span class="string">&quot;others&quot;</span> + <span class="string">&quot; &quot;</span> + count4);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="题目2：输入第一行，数组中元素的个数-第二行，N个正整数，空行隔开-输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间"><a href="#题目2：输入第一行，数组中元素的个数-第二行，N个正整数，空行隔开-输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间" class="headerlink" title="题目2：输入第一行，数组中元素的个数 第二行，N个正整数，空行隔开 输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间"></a>题目2：输入第一行，数组中元素的个数 第二行，N个正整数，空行隔开 输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">7</span><br><span class="line">6 8 4 9 7 5 8</span><br><span class="line">输出：</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<ul>
<li>合数即 除了能被1和它本身整除，还能被其他数整除。与质数相对，质数也叫素数。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     <span class="keyword">int</span> N = sc.nextInt();<span class="comment">//N个整数</span></span><br><span class="line">     <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">         nums[i] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!isPrime(nums[i]) &amp;&amp; !isPrime(nums[i + <span class="number">1</span>]) &amp;&amp; !isPrime(nums[i + <span class="number">2</span>])) count++;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(count);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//返回true,不是合数;返回false,是合数</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="comment">//质数不小于2    2，3，5，7。。。</span></span><br><span class="line">     <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(n); i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="题目3：统计1-N之间所有平方数的个数"><a href="#题目3：统计1-N之间所有平方数的个数" class="headerlink" title="题目3：统计1-N之间所有平方数的个数"></a>题目3：统计1-N之间所有平方数的个数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：50</span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = (<span class="keyword">int</span>)Math.sqrt(i);</span><br><span class="line">        <span class="keyword">if</span>(m * m == i)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。"><a href="#题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。" class="headerlink" title="题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。"></a>题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。</h4><p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：8 2</span><br><span class="line">     12 23 27 34 19 17 45 8</span><br><span class="line">输出：36</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一： 双重for循环。建立一个数组res存储所有K区间的Sk值。第一层遍历所有的N - K + 1个区间，第二层遍历区间的K个元素，如果有素数，加入到res[i]中，最后在结果数组res中取最大值。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2_19</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">      <span class="keyword">int</span> K = sc.nextInt();</span><br><span class="line">      <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">          nums[i] = sc.nextInt();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//区间个数</span></span><br><span class="line">      <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[N - K + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + K; j++) &#123;</span><br><span class="line">              <span class="comment">//是素数</span></span><br><span class="line">              <span class="keyword">if</span> (isPrime(nums[j])) &#123;</span><br><span class="line">                  res[i] += nums[j];</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> (res[i] &gt; max) &#123;</span><br><span class="line">              temp = max;</span><br><span class="line">              max = res[i];</span><br><span class="line">              res[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(max);</span><br><span class="line">      <span class="comment">//        Arrays.sort(res);</span></span><br><span class="line">      <span class="comment">//        System.out.println(res[N - K]);</span></span><br><span class="line">      ｝</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//判断是否是素数</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">      	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">      	<span class="keyword">if</span> (a &lt; <span class="number">2</span>) &#123;<span class="comment">// 素数不小于2</span></span><br><span class="line">          	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         	 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(a); i++) &#123;</span><br><span class="line">              	<span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;<span class="comment">// 若能被整除，则说明不是素数，返回false</span></span><br><span class="line">                  flag = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">break</span>;<span class="comment">// 跳出循环</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> flag;</span><br><span class="line"> 	 &#125;</span><br><span class="line">  ｝</span><br></pre></td></tr></table></figure></li>
<li>测试<br> <img src="https://img-blog.csdnimg.cn/20201127150704668.PNG#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h4 id="题目5：由N个整数组成的数组，其中连续K（K-lt-200）个元素构成一个区间，称为K区间。-一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。"><a href="#题目5：由N个整数组成的数组，其中连续K（K-lt-200）个元素构成一个区间，称为K区间。-一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。" class="headerlink" title="题目5：由N个整数组成的数组，其中连续K（K &lt;= 200）个元素构成一个区间，称为K区间。 一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。"></a>题目5：由N个整数组成的数组，其中连续K（K &lt;= 200）个元素构成一个区间，称为K区间。 一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。</h4><p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入：8 2</span><br><span class="line">     12 23 27 34 35 36 8 45</span><br><span class="line">输出：37</span><br></pre></td></tr></table></figure>
<ul>
<li>方法一：和另一道题类似，在双重循环中定义最大值max，最小值min为K区间首个元素，下面再进行判断是否还有比max大的重新确定为max，比min小的重新确定为min。max-min即为Dk，保存在数组res中，res长度为N - K + 1，输出即为res中的最大值。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> K = input.nextInt();</span><br><span class="line">        <span class="comment">//先划分为 N-K+1 个 K区间，在区间内排序，计算最大绝对值</span></span><br><span class="line">        <span class="comment">//N-K+1 数组的区间数</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[N - K + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;<span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + K ; j++) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                min = nums[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt; max) &#123;</span><br><span class="line">                    max = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; min) &#123;</span><br><span class="line">                    min = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res[i] = max - min;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        Arrays.sort(res);</span></span><br><span class="line"><span class="comment">//        System.out.println(res[N - K]);</span></span><br><span class="line">        System.out.println(Dk(res));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//找到数组最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Dk</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max)&#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试结果<br><img src="https://img-blog.csdnimg.cn/20201127211427402.png" alt="在这里插入图片描述"></li>
</ul>
<h4 id="题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。"><a href="#题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。" class="headerlink" title="题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。"></a>题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。</h4><p>示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：abbcddcaba</span><br><span class="line">输出：YES</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：asdfghhgf</span><br><span class="line">输出：asd</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：借助辅助栈。<ul>
<li>若栈为空，将输入字母入栈。否则，比较栈顶元素与下一个入栈的字母，若相等，则弹出栈顶元素；若不同，入栈。最后判断栈是否为空，若空，输出YES；若栈不为空，倒序输出栈中元素。<ul>
<li> 借助StringBuilder，将栈中元素加入，再逆序打印。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String s = sc.next();</span><br><span class="line">      Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">          <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">          chars[i] = s.charAt(i);</span><br><span class="line">          <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">              <span class="keyword">if</span> (stack.peek() != chars[i]) &#123;</span><br><span class="line">                  stack.push(chars[i]);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> stack.pop();</span><br><span class="line">          &#125; <span class="keyword">else</span></span><br><span class="line">              stack.push(chars[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断</span></span><br><span class="line">      <span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line">          System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">          <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">              sb.append(stack.pop());</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(sb.reverse());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>方法二：与上面思路类似，改为使用list实现。最后一步无需逆序打印，直接遍历输出结果。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     String s = sc.next();</span><br><span class="line">     List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">         <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">         chars[i] = s.charAt(i);</span><br><span class="line">         <span class="keyword">if</span>(!list.isEmpty()) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!list.contains(chars[i])) &#123;</span><br><span class="line">                 list.add(chars[i]);</span><br><span class="line">             &#125; <span class="keyword">else</span> list.remove(list.get(list.size() - <span class="number">1</span>));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> list.add(chars[i]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (list.isEmpty()) System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">char</span> a : list) &#123;</span><br><span class="line">             System.out.print(a);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>competitions</tag>
      </tags>
  </entry>
  <entry>
    <title>typora使用攻略</title>
    <url>/2020/12/01/typora%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p>一、内部跳转</p>
<p>想在文章开头使用链接直接跳转到指定标题，可以使用快捷键 <code>Ctrl + K</code> 创建内部链接，并在<code>[]</code>中填写链接内容，<code>()</code>中的格式为 <code>#要跳转到的标题</code> 。</p>
<p>效果如图：</p>
<p><img src="https://img-blog.csdnimg.cn/20201201194926993.png" alt="img"></p>
<p>然后按住Ctrl，点击链接，即跳转到想看的标题了。</p>
]]></content>
      <tags>
        <tag>一</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题—链表</title>
    <url>/2020/12/08/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="LeetCode刷题"><a href="#LeetCode刷题" class="headerlink" title="LeetCode刷题"></a>LeetCode刷题</h1><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><h3 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h3><p><a href="#160%EF%BC%8C%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">160，相交链表，easy</a></p>
<p><a href="#206%EF%BC%8C%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">206，反转链表，easy</a></p>
<p><a href="#21%EF%BC%8C%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">21，合并两个有序链表，easy</a></p>
<p><a href="#83%EF%BC%8C%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Ceasy">83，删除排序链表中的重复元素，easy</a></p>
<p><a href="#83-%E2%85%A1.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Cmiddle">83-Ⅱ.删除排序链表中的重复元素，middle</a></p>
<a id="more"></a>

<p><a href="#19%EF%BC%8C%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8Cmiddle">19，删除链表的倒数第N个节点，middle</a></p>
<p><a href="#24%EF%BC%8C%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmiddle">24，两两交换链表中的节点，middle</a></p>
<p><a href="#445%EF%BC%8C%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%E2%85%A1%EF%BC%8Cmiddle">445，两数相加Ⅱ，middle</a></p>
<p><a href="#234%EF%BC%8C%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">234，回文链表，easy</a></p>
<p><a href="#725%EF%BC%8C%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8%EF%BC%8Cmiddle">725，分隔链表，middle</a></p>
<p><a href="#328%EF%BC%8C%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8%EF%BC%8Cmiddle">328，奇偶链表，middle</a></p>
<h4 id="160，相交链表，easy"><a href="#160，相交链表，easy" class="headerlink" title="160，相交链表，easy"></a>160，相交链表，easy</h4><p>输入两个链表，找出它们的第一个公共节点。</p>
<p>如下面的两个链表：</p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222545595.png" alt="image-20201116222545595" style="zoom:67%;" />

<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222612234.png" alt="image-20201116222612234" style="zoom:67%;" />

<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222642573.png" alt="image-20201116222642573" style="zoom:67%;" />

<ul>
<li>方法：双指针。<ul>
<li>思路：定义节点pA指向headA，节点pB指向headB。<ul>
<li>如果两链表长度相同<ul>
<li>有交点，返回此交点</li>
<li>没有交点，返回null</li>
</ul>
</li>
<li>如果两链表长度不同，先走完的指针指向另一个链表的头节点（如示例2的pB先走完，则指向headA），两指针再次出发，直到后走完的指针也走完了当前链表，使其指向另一链表（即pA走完，指向headB），两指针再次出发，直到找到交点或没有交点走完两链表。</li>
</ul>
</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双指针，pA与pB如果能相遇，说明两个链表长度相同且有交点；第一遍不能相遇，pA转移到pB,pB转移到pA</span></span><br><span class="line">        <span class="comment">//再次遍历，如果能相遇说明有交点</span></span><br><span class="line"></span><br><span class="line">        ListNode pA = headA;</span><br><span class="line">        ListNode pB = headB;</span><br><span class="line"><span class="comment">//判别两个链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (pA == <span class="keyword">null</span> || pB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//长度不同会有先走完链表的</span></span><br><span class="line">        <span class="keyword">while</span>(pA != <span class="keyword">null</span> &amp;&amp; pB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//A先走完,转向headB pB同理</span></span><br><span class="line">        <span class="keyword">if</span>(pA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pB = headA;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//再次同时走，A继续向前，B转为headA        </span></span><br><span class="line">        <span class="keyword">while</span>(pA != <span class="keyword">null</span> &amp;&amp; pB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pB = headA;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//pA在B链表，pB在A链表，同时向前找交点</span></span><br><span class="line">        <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode pA = headA;</span><br><span class="line">        ListNode pB = headB;</span><br><span class="line">        <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">            pA = pA == <span class="keyword">null</span> ? headB:pA.next;</span><br><span class="line">            pB = pB == <span class="keyword">null</span> ? headA:pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点：边界条件的判断：两链表可能为空。</li>
</ul>
<h4 id="206，反转链表，easy"><a href="#206，反转链表，easy" class="headerlink" title="206，反转链表，easy"></a>206，反转链表，easy</h4><p>反转一个单链表。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。 </p>
<ul>
<li>思路：先递归到底, 找到最后一个节点, 然后从最后一个节点开始, 把箭头方向掉转。</li>
</ul>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164846365.png" alt="image-20201203164846365" style="zoom: 67%;" />

<ul>
<li><p>递归出口：链表为空或递归到链表的尾节点</p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164821559.png" alt="image-20201203164821559" style="zoom: 67%;" />
</li>
<li><p>递归体：假如归到节点2，</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164342559.png" alt="image-20201203164342559"></p>
</li>
<li><p>代码：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//方法一：递归</span></span><br><span class="line">        <span class="comment">//终止条件：链表为空或递归到链表的尾节点时</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode cur = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法二：迭代。</p>
<ul>
<li>思路：构建新链表，将原链表加入新链表，并调转顺序。</li>
</ul>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203165433510.png" alt="image-20201203165433510" style="zoom:67%;" />

<p>直到head = null</p>
<ul>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    	ListNode newHead = <span class="keyword">null</span>; <span class="comment">//null</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode temp = head.next;<span class="comment">//保存后面用的新链表 2—&gt;3-&gt;4-&gt;null</span></span><br><span class="line">            head.next = newHead;      <span class="comment">//null&lt;-1</span></span><br><span class="line">            newHead = head;           <span class="comment">//更新结果链表 1为newHead</span></span><br><span class="line">            head = temp;              <span class="comment">//更新原链表 2—&gt;3-&gt;4-&gt;null中的2为head</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="21，合并两个有序链表，easy"><a href="#21，合并两个有序链表，easy" class="headerlink" title="21，合并两个有序链表，easy"></a>21，合并两个有序链表，easy</h4><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：迭代。<ul>
<li>思路：建立新节点（值为0），再定义一个临时节点temp存储链表。比较 l1.val 与 l2.val 。如果 l1.val &lt; l2.val，temp的下个节点设为l1，并将l1 向右移；如果 l1.val &gt;= l2.val，对 l2 进行上述操作。如果一个链表全部存完为空，将另一个链表剩余节点加入temp.next。最后返回newHead.next。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法一、迭代。新建链表</span></span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode temp = newHead;</span><br><span class="line">        <span class="comment">//l1与l2都不为空，较小的加入新链表</span></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">                temp.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1.val &gt;= l2.val)&#123;</span><br><span class="line">                temp.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.next = l2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.next = l1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：递归。思路和上面一致。</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">            newHead = l1;</span><br><span class="line">            newHead.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l1.val &gt;= l2.val)&#123;</span><br><span class="line">            newHead = l2;</span><br><span class="line">            newHead.next = mergeTwoLists(l1,l2.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="83，删除排序链表中的重复元素，easy"><a href="#83，删除排序链表中的重复元素，easy" class="headerlink" title="83，删除排序链表中的重复元素，easy"></a>83，删除排序链表中的重复元素，easy</h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：直接法。<ul>
<li>思路：定义辅助单指针temp = head，比较temp与temp.next的值，如果相同，<code>temp.next = temp.next.next</code>，即<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201205102048317.png" alt="image-20201205102048317" style="zoom:67%;" /></li>
</ul>
</li>
</ul>
<p>​               如果不同，<code>temp = temp.next</code>，指针右移。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     	ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.val == temp.next.val)&#123;</span><br><span class="line">                temp.next = temp.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：双指针。<ul>
<li>思路：快慢指针。快指针用于探路，慢指针为结果链表指针。快指针如果与慢指针的值相等，快指针右移；不相等，保存到慢指针快指针再右移。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode right = head.next;</span><br><span class="line">        ListNode left = head;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(right.val != left.val)&#123;</span><br><span class="line">                left.next = right;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断开与后面重复元素的连接</span></span><br><span class="line">        left.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法三：递归。<ul>
<li>思路：把链表看成 头节点-&gt;没有重复元素的排序链表，则比较头节点与子链表的头节点，如果相同，返回子链表的头节点；否则，返回head。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归出口 空链表和链表只有头节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = deleteDuplicates(head.next);</span><br><span class="line">        head.next = newHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.val == newHead.val ? newHead : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="83-Ⅱ-删除排序链表中的重复元素，middle"><a href="#83-Ⅱ-删除排序链表中的重复元素，middle" class="headerlink" title="83-Ⅱ.删除排序链表中的重复元素，middle"></a>83-Ⅱ.删除排序链表中的重复元素，middle</h4><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">输出: 2-&gt;3</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：递归。<ul>
<li>思路：和上面那道题思路类似，但要判断头节点与后面元素是否相同。如果相同，找到第一个不重复的元素开始递归；如果不同，与上面题类似。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//如果head与后面的节点重复，找到第一个不重复的节点，进行递归。</span></span><br><span class="line">        <span class="keyword">if</span>(head.val == head.next.val)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val)&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> deleteDuplicates(head.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode newHead = deleteDuplicates(head.next);</span><br><span class="line">            head.next = newHead;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：双指针-快慢指针。<ul>
<li>思路：建立虚拟头节点dummy，双指针left指向dummy，right指向head，判断left.next 与 right.val是否相等。如果不相等，两指针右移；如果相等，right需要跳过所有重复数字，再令left的下一位为 right.next（第一个不重复的数字）。最后返回dummy之后的节点。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//双指针，建立虚拟头节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode left = dummy;</span><br><span class="line">        ListNode right = head;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left.next.val != right.next.val)&#123;</span><br><span class="line">                left = left.next;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span> &amp;&amp; left.next.val == right.next.val)&#123;</span><br><span class="line">                    right = right.next;<span class="comment">//right右移直到right.next不是重复数字</span></span><br><span class="line">                &#125;</span><br><span class="line">                left.next = right.next;<span class="comment">//left下一位是去掉重复数字之后的数字</span></span><br><span class="line">                right = right.next;<span class="comment">//继续右移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="19，删除链表的倒数第N个节点，middle"><a href="#19，删除链表的倒数第N个节点，middle" class="headerlink" title="19，删除链表的倒数第N个节点，middle"></a>19，删除链表的倒数第N个节点，middle</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：先求出链表长度，就可以找到要删除节点的前一个节点，再使他指向后一个节点即可。<ul>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//先得到长度，再单指针跳过倒数第n个元素 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = getLength(head);</span><br><span class="line">        <span class="keyword">if</span>(length == n) <span class="keyword">return</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：双指针-快慢指针。<ul>
<li>思路：令快指针先走 n 步，慢指针再与快指针同时出发，直到快指针走到链表尾部，此时慢指针走到要删除节点的前一个节点，跳过即可。<em>有些类似第160题.相交链表</em></li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="comment">//快指针先走n步</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果此时fast为空，说明删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fast走到头，此时slow走到要删除节点的前一个</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="24，两两交换链表中的节点，middle"><a href="#24，两两交换链表中的节点，middle" class="headerlink" title="24，两两交换链表中的节点，middle"></a>24，两两交换链表中的节点，middle</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
 <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201206195646801.png" alt="image-20201206195646801" style="zoom:80%;" />

<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：递归。<ul>
<li>思路：两个相邻节点看为一组，组间节点交换（递归实现），再调整组间顺序。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//两个相邻节点为一组，使后一个节点的指针指向前一个，组间指向也需要调整</span></span><br><span class="line">        <span class="comment">//先保存节点2</span></span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        <span class="comment">//头节点下一个节点为递归的结果（1-&gt;4-&gt;3）</span></span><br><span class="line">        head.next = swapPairs(head.next.next);</span><br><span class="line">        <span class="comment">//2-&gt;1-&gt;4-&gt;3</span></span><br><span class="line">        temp.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：迭代。<ul>
<li>思路：定义一个虚拟头节点dummy，三个指针：left、right用于进行交换，temp用于连接两次迭代之间的节点。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode left = dummy;</span><br><span class="line">        ListNode right = dummy; </span><br><span class="line">        ListNode temp = dummy;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span> &amp;&amp; right.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分别向前走一步、两步</span></span><br><span class="line">            left = left.next; <span class="comment">// 1</span></span><br><span class="line">            right = right.next.next; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//使下次循环的1指向4</span></span><br><span class="line">            temp.next = right;</span><br><span class="line">            left.next = right.next;</span><br><span class="line">            right.next = left;</span><br><span class="line">            <span class="comment">//2-&gt;1-&gt;3-&gt;4</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">//再使temp、right都指向1.下次迭代时left为3，right为4</span></span><br><span class="line">            temp = left;</span><br><span class="line">            right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="445，两数相加Ⅱ，middle"><a href="#445，两数相加Ⅱ，middle" class="headerlink" title="445，两数相加Ⅱ，middle"></a>445，两数相加Ⅱ，middle</h4><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
<p>进阶：</p>
<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出： 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure>

<ul>
<li>题目说明：题目中说明<strong>最高位位于链表头部</strong>，即 7243 + 564 = 7807，最后输出的即7 -&gt; 8 -&gt; 0 -&gt; 7。</li>
<li>方法一：借助栈。<ul>
<li>思路：逆序先想到栈来存储链表节点的值，相加后再弹出，存储到一个新的链表。注意要记录进位，加到下一位。</li>
<li>图解：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201207160650072.png" alt="image-20201207160650072" style="zoom:80%;" /></li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//法一：栈+取和的个位</span></span><br><span class="line">        Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(l1.val);</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack2.push(l2.val);</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//相加的进位</span></span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//有非空栈或carry &gt; 0就进行相加操作</span></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty() || carry &gt; <span class="number">0</span>)&#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> sum = carry;<span class="comment">//两数的和</span></span><br><span class="line">            sum += stack1.isEmpty() ? <span class="number">0</span> : stack1.pop();</span><br><span class="line">            sum += stack2.isEmpty() ? <span class="number">0</span> : stack2.pop();</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：while条件里添加carry &gt; 0是为了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:(5) + (5)</span><br><span class="line">输出: 1-&gt;0</span><br></pre></td></tr></table></figure>

<p>也可以单独判断carry，如果stack1、stack2都为空了但还有进位，则创建新节点加入结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty() )&#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> sum = carry;<span class="comment">//两数的和</span></span><br><span class="line">            sum += stack1.isEmpty() ? <span class="number">0</span> : stack1.pop();</span><br><span class="line">            sum += stack2.isEmpty() ? <span class="number">0</span> : stack2.pop();</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ListNode node1 = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">            node1.next = head;</span><br><span class="line">            head = node1;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：反转链表。<ul>
<li>思路：因为要从链尾开始相加，所以先反转链表，两个链表从头开始相加节点的值，再将新的链表反转，得到结果。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//法二：反转链表 3-&gt;4-&gt;2-&gt;7 4-&gt;6-&gt;5  7 -&gt; 0 -&gt; 8 -&gt;7反转输出结果</span></span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        ListNode newl1 = reverse(l1);</span><br><span class="line">        ListNode newl2 = reverse(l2);</span><br><span class="line">       </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">        <span class="keyword">while</span>(newl1 != <span class="keyword">null</span> || newl2 != <span class="keyword">null</span> || carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            sum += newl1 == <span class="keyword">null</span> ? <span class="number">0</span> : newl1.val;</span><br><span class="line">            sum += newl2 == <span class="keyword">null</span> ? <span class="number">0</span> : newl2.val;</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(newl1 != <span class="keyword">null</span>) newl1 = newl1.next;</span><br><span class="line">            <span class="keyword">if</span>(newl2 != <span class="keyword">null</span>) newl2 = newl2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = reverse(dummy.next);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode node = reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扩展：另一道类似题</p>
<p><img src="https://pic.leetcode-cn.com/7208a246263722b9757ec7fd94a7c3bf7c17e6f55f2395eae8592f4f5e29323a-image-20200805204018584.png" alt="image-20200805204018584.png"></p>
<ul>
<li>题目说明：逆序存储，即<strong>链尾为高位</strong>，相加得到结果仍要逆序输出。</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            sum += l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            sum += l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="234，回文链表，easy"><a href="#234，回文链表，easy" class="headerlink" title="234，回文链表，easy"></a>234，回文链表，easy</h4><p>请判断一个链表是否为回文链表。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：借助栈。<ul>
<li>思路：将链表节点值放入栈并统计链表长度，循环 l/2 次（只需比较前一半节点值），如果链表的头部值与栈弹出的值不相等，返回false；否则节点右移，最终返回true。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="comment">//将节点值放入栈</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(temp.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        length /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(length-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.pop() != head.val)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：将链表节点值转为集合存储，再使用双指针-头尾指针。<ul>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!list.get(left).equals(list.get(right)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>错误点：<code>if(list.get(left) != list.get(right))</code> 错误</p>
<ul>
<li>Integer是对象，比较两个对象相等要用equals</li>
<li>使用 == 比较Integer类型时，默认缓存 -128 ~ 127，超过此范围会new新对象，两个对象地址不一样则返回false</li>
</ul>
</li>
<li><p>方法三：快慢指针。</p>
<ul>
<li>思路：找到中间节点，将后半段链表进行反转，再比较反转后的链表与原链表前半段的值。</li>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode middle = getMiddle(head);<span class="comment">//链表中点，如果长度是偶数，返回第 l/2 - 1 个节点</span></span><br><span class="line">        ListNode newHead = reverse(middle.next);<span class="comment">//反转后半部分链表</span></span><br><span class="line">        <span class="comment">//比较前半部分和后半部分链表的节点值</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val != newHead.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">                newHead = newHead.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getMiddle</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode left = head;</span><br><span class="line">        ListNode right = head;</span><br><span class="line">        <span class="keyword">while</span>(right.next != <span class="keyword">null</span> &amp;&amp; right.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            left = left.next;</span><br><span class="line">            right = right.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表的中间节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode temp = reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="725，分隔链表，middle"><a href="#725，分隔链表，middle" class="headerlink" title="725，分隔链表，middle"></a>725，分隔链表，middle</h4><p>给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。</p>
<p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p>
<p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p>
<p>返回一个符合上述规则的链表的列表。</p>
<p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3], k &#x3D; 5</span><br><span class="line">输出: [[1],[2],[3],[],[]]</span><br><span class="line">解释:</span><br><span class="line">输入输出各部分都应该是链表，而不是数组。</span><br><span class="line">例如, 输入的结点 root 的 val&#x3D; 1, root.next.val &#x3D; 2, \root.next.next.val &#x3D; 3, 且 root.next.next.next &#x3D; null。</span><br><span class="line">第一个输出 output[0] 是 output[0].val &#x3D; 1, output[0].next &#x3D; null。</span><br><span class="line">最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k &#x3D; 3</span><br><span class="line">输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br><span class="line">解释:</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：拆分链表。</p>
<ul>
<li><p>思路：分类讨论。</p>
<ul>
<li>如果链表为空，返回 k 个空节点组成的节点数组。</li>
<li>如果链表长度l &lt;= k，前 l 个元素是单个节点，后 l - k 个元素为空。</li>
<li>如果链表长度l &gt; k，每部分至少有 l / k 个节点，前 l % k 部分节点数 + 1。再将原链表分部分存储在结果数组中，每部分为一个链表，部分之间要断开连接。</li>
</ul>
</li>
<li><p>代码：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode[] splitListToParts(ListNode root, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ListNode[k];</span><br><span class="line">        ListNode[] res = <span class="keyword">new</span> ListNode[k];</span><br><span class="line">        <span class="keyword">int</span> length = getLength(root);</span><br><span class="line">        <span class="keyword">if</span>(length &lt;= k)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; )&#123;</span><br><span class="line">                ListNode temp = root.next;</span><br><span class="line">                root.next = <span class="keyword">null</span>;</span><br><span class="line">                res[i++] = root;</span><br><span class="line">                root = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &lt; k; i++)&#123;</span><br><span class="line">                res[i] = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(length &gt; k)&#123;</span><br><span class="line">        <span class="comment">//length 比 k 大时 每部分存放 l/k 个节点 , 前 l%k 部分存放 l/k+1 个节点</span></span><br><span class="line">        <span class="keyword">int</span> n = length / k;</span><br><span class="line">        <span class="keyword">int</span> m = length % k;</span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[k];<span class="comment">//记录每部分存储元素个数，[4][3][3]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            counts[i] = m-- &gt; <span class="number">0</span> ? n + <span class="number">1</span>: n;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = root;</span><br><span class="line">        <span class="comment">//将节点存储到数组中 counts[0]=4</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = cur;</span><br><span class="line">            <span class="comment">//跳到每部分最末节点 1-&gt;2-&gt;3-&gt;4</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; counts[i] - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//断开每部分之间的连接</span></span><br><span class="line">            ListNode temp = cur.next;</span><br><span class="line">            cur.next = <span class="keyword">null</span>;</span><br><span class="line">            cur = temp;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="328，奇偶链表，middle"><a href="#328，奇偶链表，middle" class="headerlink" title="328，奇偶链表，middle"></a>328，奇偶链表，middle</h4><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>
<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL </span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>


<p>说明:</p>
<p>应当保持奇数节点和偶数节点的相对顺序。<br>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p>
<ul>
<li>方法一：双指针，分离链表为奇链表、偶链表，再合并。<ul>
<li>代码：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode odd = head;</span><br><span class="line">        ListNode evenHead = head.next;</span><br><span class="line">        ListNode even = evenHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(even != <span class="keyword">null</span> &amp;&amp; even.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            odd.next = odd.next.next;</span><br><span class="line">            odd = odd.next;</span><br><span class="line">            even.next = even.next.next;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125;</span><br><span class="line">        odd.next = evenHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>BST树的基础操作及套路模板</title>
    <url>/2020/12/16/BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>本文针对BST 的基础操作：判断 BST 的合法性（98）、增（701）、删（450）、查（700）。以几道题来总结出套路模板，以一敌十！<br><a href="#98%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%8Cmedium">98，验证二叉搜索树，medium</a><br><a href="#700%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2%EF%BC%8Ceasy">700，二叉搜索树中的搜索，easy</a><br><a href="#701%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%EF%BC%8Cmedium">701，二叉搜索树中的插入操作，medium</a><br><a href="#450%EF%BC%8C%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmedium">450，删除二叉搜索树中的节点，medium</a></p>
<a id="more"></a>

<h5 id="98，验证二叉搜索树，medium"><a href="#98，验证二叉搜索树，medium" class="headerlink" title="98，验证二叉搜索树，medium"></a>98，验证二叉搜索树，medium</h5><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。</p>
<ul>
<li><p>思路：很容易想到对于节点root，采用递归判断左子节点的值比它小，右子节点的值比它大，但注意：对每个节点都满足也不一定是BST树，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  5</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   6</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   7</span><br></pre></td></tr></table></figure>

<p>没有满足右子树的节点都比root值大。</p>
<p>建立辅助函数，增加最小节点min和最大节点max 作为辅助函数的参量。对于root，比较<code>root.val</code>与当前的<code>min.val</code> 和 <code>max.val</code>，再对<code>root.left</code> 和<code>root.right</code> 进行递归操作。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> healper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是BST树必须满足 min.val &lt; root.val &lt; max.val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">healper</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min != <span class="keyword">null</span> &amp;&amp; min.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max != <span class="keyword">null</span> &amp;&amp; max.val &lt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//左子树范围的最小值是min.val，最大值是当前节点的值，也就是root的值，因为左子树的值要比当前节点小</span></span><br><span class="line">    <span class="comment">//右子数范围的最大值是max.val，最小值是当前节点的值，也就是root的值，因为右子树的值要比当前节点大</span></span><br><span class="line">        <span class="keyword">return</span> healper(root.left, min, root) &amp;&amp; healper(root.right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方法二：中序遍历。</p>
<ul>
<li><p>思路：中序遍历的结果是从小到大排序的，建立一个全局遍历<code>pre</code>代表前一个节点，当前节点与前一个节点进行比较。</p>
<ul>
<li><p>递归：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line"><span class="comment">//中序遍历，递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 访问左子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 访问当前节点，如果不是按照从小到大的顺序，则返回false；否则pre右移，继续比较</span></span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="comment">// 访问右子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>易错点：采用递归方法只与左右子节点比较，但没有保证整棵树是BST树。</p>
<h5 id="700，二叉搜索树中的搜索，easy"><a href="#700，二叉搜索树中的搜索，easy" class="headerlink" title="700，二叉搜索树中的搜索，easy"></a>700，二叉搜索树中的搜索，easy</h5></li>
</ul>
<p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p>
<p>例如，</p>
<p>给定二叉搜索树:</p>
<pre><code>    4
   / \
  2   7
 / \
1   3</code></pre>
<p>和值: 2<br>你应该返回如下子树:</p>
<pre><code>  2     
 / \   
1   3</code></pre>
<p>在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</p>
<ul>
<li><p>思路：对于普通二叉树，判断是否存在值为 <code>val</code> 的节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> search(root.left, val) || search(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于BST树，利用其左小右大的规律，不需要递归地搜索两边，类似二分查找思想，根据<code>val</code>和<code>root.val</code>的大小比较，就能排除一边。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    	<span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val) <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span> || root.val == val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">return</span> val &lt; root.val ? searchBST(root.left, val) : searchBST(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>总结</strong>：BST树遍历搜索的框架为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="701，二叉搜索树中的插入操作，medium"><a href="#701，二叉搜索树中的插入操作，medium" class="headerlink" title="701，二叉搜索树中的插入操作，medium"></a>701，二叉搜索树中的插入操作，medium</h5><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p>
<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p>
<p>示例 1：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/be940ab2e07119dcd45e5d58370fc5de.png" alt="img"></p>
<p>输入：root = [4,2,7,1,3], val = 5<br>输出：[4,2,7,1,3,5]<br>解释：另一个满足题目要求可以通过的树是：</p>
<img src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg" alt="img" style="zoom:80%;" />

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [40,20,60,10,30,50,70], val &#x3D; 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,null,null,null,null,null,null], val &#x3D; 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：</p>
<p>对于函数<code>TreeNode insertIntoBST(TreeNode root, int val)</code>，表示插入值为 <code>val</code> 的节点后的BST树。由上面总结的查找的模板，再加入修改的操作即可。<strong>一旦涉及「改」，函数就要返回<code>TreeNode</code>类型，并且对递归调用的返回值进行接收。</strong></p>
<ul>
<li>方法：递归</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找 + 修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        <span class="comment">//val值比当前节点值大，将找个值插入右子树，且赋给root.right</span></span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) root.right = insertIntoBST(root.right, val);</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt; val) root.left = insertIntoBST(root.left, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="450，删除二叉搜索树中的节点，medium"><a href="#450，删除二叉搜索树中的节点，medium" class="headerlink" title="450，删除二叉搜索树中的节点，medium"></a>450，删除二叉搜索树中的节点，medium</h5><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>
<p>一般来说，删除节点可分为两个步骤：</p>
<p>首先找到需要删除的节点；<br>如果找到了，删除它。<br>说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p>
<p>示例:</p>
<p>root = [5,3,6,2,4,null,7]<br>key = 3</p>
<pre><code>    5
   / \
  3   6
 / \   \
2   4   7</code></pre>
<p>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。</p>
<p>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。</p>
<pre><code>    5
   / \
  4   6
 /     \
2       7</code></pre>
<p>另一个正确答案是 [5,2,6,null,4,null,7]。</p>
<pre><code>    5
   / \
  2   6
   \   \
    4   7</code></pre>
<ul>
<li><p>思路：还是<strong>查找 + 修改</strong> 类型，按照上面的遍历框架，写出初步解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 找到啦，进行删除</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">       <span class="comment">//一些删除操作</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在左子树，对左子树进行删除操作并重新赋给root.left</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        root.left = deleteNode(root.left, key);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在右子树，对右子树进行删除操作并重新赋给root.right</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        root.right = deleteNode(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到要删除的节点后，删除操作有下面情况：</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201216192138470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li><p>左右子节点有为空的（如12），返回非空的子节点</p>
<p><em>（<code>deleteNode</code> 函数即返回删除值为key的节点后的树）</em></p>
<p>如果左右子节点都为空，则返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line"><span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左右子节点都不为空，就要找到<strong>左子树的最大值或者右子树的最小值</strong>替换此root，并在左子树（或右子树）删除此节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root.val = getMaxLeft(root.left).val;</span><br><span class="line">root.left = deleteNode(root.left, root.val);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<ul>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.val == key)&#123;</span><br><span class="line">            <span class="comment">//1.有子节点为空</span></span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="comment">//2.子节点非空，则由左子树的最大值或者右子树的最小值替换此root，并在左子树（或右子树）删除此节点</span></span><br><span class="line">            root.val = getMaxLeft(root.left).val;</span><br><span class="line">            root.left = deleteNode(root.left, root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//key在右子树，对右子树进行删除操作，并把新的子树重新赋给root.right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; key)&#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从root.left出发,找到root的左子树的最大值（向右找）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMaxLeft</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul>
<li><p>由BST树的搜索框架，可以实现增（插）删改查，这几项的操作都是<strong>搜+改</strong>，做题可以先把框架写出来，再分析每步干什么。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于BST树最大的特点就是左小右大，中序遍历的结果由小到大。</p>
</li>
<li><p>递归最重要的就是弄清函数的含义，如果有返回值代表什么。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题—递归解决树</title>
    <url>/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/</url>
    <content><![CDATA[<p>对于树，经常用的算法有递归，回溯，BFS，DFS等。下面是一些用递归算法来解的题：<br><a href="#104%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy">104，二叉树的最大深度，easy</a></p>
<p><a href="#110%EF%BC%8C%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">110，平衡二叉树，easy</a></p>
<p><a href="#543%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%EF%BC%8Ceasy">543，二叉树的直径，easy</a></p>
<p><a href="#226%EF%BC%8C%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">226，翻转二叉树，easy</a></p>
<p><a href="#617%EF%BC%8C%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">617，合并二叉树，easy</a></p>
<p><a href="#112%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%EF%BC%8Ceasy">112，路径总和，easy</a></p>
<p><a href="#113%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%E2%85%A1%EF%BC%8Cmidium">113，路径总和Ⅱ，midium</a></p>
<p><a href="#572%EF%BC%8C%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%EF%BC%8Ceasy">572，另一个树的子树，easy</a></p>
<p><a href="#101%EF%BC%8C%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">101，对称二叉树，easy</a></p>
<p><a href="#111%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy">111，二叉树的最小深度，easy</a></p>
<p><a href="#404%EF%BC%8C%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C%EF%BC%8Ceasy">404，左叶子之和，easy</a></p>
<p><a href="#687%EF%BC%8C%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84%EF%BC%8Cmedium">687，最长同值路径，medium</a></p>
<p><a href="#671%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Ceasy">671，二叉树中第二小的节点，easy</a></p>
<a id="more"></a>

<h5 id="104，二叉树的最大深度，easy"><a href="#104，二叉树的最大深度，easy" class="headerlink" title="104，二叉树的最大深度，easy"></a>104，二叉树的最大深度，easy</h5><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7</code></pre>
<p>返回它的最大深度 3 。</p>
<ul>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftDepth = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftDepth &gt;= rightDepth ? leftDepth + <span class="number">1</span> : rightDepth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="110，平衡二叉树，easy"><a href="#110，平衡二叉树，easy" class="headerlink" title="110，平衡二叉树，easy"></a>110，平衡二叉树，easy</h5><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p>
<p>示例 1：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/341009251c7788edc838975732064bf1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bce64ca4c0e80b345a5a286122112851.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; []</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思想：先判断root 为根节点的树是不是平衡二叉树，（即比较左右子树的高度差是否不超过1），再判断以root.left 和 root.right 为根节点的树是不是平衡二叉树。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">         <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">    	 <span class="comment">//判断当前根节点的树是否为平衡二叉树</span></span><br><span class="line"> 	    <span class="keyword">if</span>(Math.abs(l - r) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    	<span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> (isBalanced(root.left) &amp;&amp; isBalanced(root.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取整棵树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        <span class="keyword">return</span> Math.max(depth(root.left),depth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="543，二叉树的直径，easy"><a href="#543，二叉树的直径，easy" class="headerlink" title="543，二叉树的直径，easy"></a>543，二叉树的直径，easy</h5><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>
<p>示例 :<br>给定二叉树</p>
<pre><code>      1
     / \
    2   3
   / \     
  4   5    </code></pre>
<p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>
<p>注意：两结点之间的路径长度是以它们之间边的数目表示。</p>
<ul>
<li><p>方法：DFS递归。</p>
</li>
<li><p>思路：直径 = 任意两个结点路径长度中的最大值，可以看做树内的某一节点的左子树节点数l + 右子树节点数r - 1，所有节点的l + r - 1中的最大值即为直径。定义一个递归函数计算经过的左右子树的节点数l + r，函数返回给定节点为根的子树的深度。递归搜索每个节点并设一个全局变量 ans 记录 l + r 的最大值，最后返回 ans 即为树的直径。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        depth(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最大的 L+R</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">        <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">        ans = Math.max(ans, l + r);<span class="comment">//找到最大直径</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(l, r) + <span class="number">1</span>;<span class="comment">//树的深度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="226，翻转二叉树，easy"><a href="#226，翻转二叉树，easy" class="headerlink" title="226，翻转二叉树，easy"></a>226，翻转二叉树，easy</h5><p>翻转一棵二叉树。</p>
<p>示例：</p>
<p>输入：</p>
<pre><code>     4
   /   \
  2     7
 / \   / \
1   3 6   9</code></pre>
<p>输出：</p>
<pre><code>     4
   /   \
  7     2
 / \   / \
9   6 3   1</code></pre>
<ul>
<li><p>方法一：递归。</p>
</li>
<li><p>思路：分别对左右子树都进行翻转，再交换。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode leftTree = root.left;<span class="comment">//保存原来的左子树</span></span><br><span class="line">        root.left = invertTree(root.right);</span><br><span class="line">        root.right = invertTree(leftTree);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：借助栈（DFS）。</p>
</li>
<li><p>思路：先将根节点压入栈。栈非空时，弹出栈顶节点，如果弹出节点的左右子节点有非空，将其压入栈，并进行交换，重复此过程直到栈空。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode temp = node.right;</span><br><span class="line">            node.right = node.left;</span><br><span class="line">            node.left = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="617，合并二叉树，easy"><a href="#617，合并二叉树，easy" class="headerlink" title="617，合并二叉树，easy"></a>617，合并二叉树，easy</h5><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>
<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">	Tree 1                     Tree 2                  </span><br><span class="line">     1                           2 </span><br><span class="line">   &#x2F;   \                       &#x2F;   \</span><br><span class="line">  3     2                     1     3</span><br><span class="line"> &#x2F;                             \     \</span><br><span class="line">5                               4     7                               </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">	     3</span><br><span class="line">	    &#x2F; \</span><br><span class="line">	   4   5</span><br><span class="line">	  &#x2F; \   \ </span><br><span class="line">	 5   4   7</span><br></pre></td></tr></table></figure>


<p>注意: 合并必须从两个树的根节点开始。</p>
<ul>
<li><p>方法一：递归。(dfs)</p>
</li>
<li><p>思路：新建一棵树，如果原来两棵树的节点都存在，直接相加；如果有一个不存在，返回另一个节点。递归节点的左右子节点，作为新树的左右子树。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t1 == <span class="keyword">null</span> ? t2 : t1;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode newTree = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">        newTree.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">        newTree.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        <span class="keyword">return</span> newTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="112，路径总和，easy"><a href="#112，路径总和，easy" class="headerlink" title="112，路径总和，easy"></a>112，路径总和，easy</h5><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p>
<pre><code>          5
         / \
        4   8
       /   / \
      11  13  4
     /  \      \
    7    2      1</code></pre>
<p>返回 true, 因为存在目标和为 22 的根节点到叶子- 方法一：递归（dfs）</p>
<ul>
<li><p>思路：以当前根节点为例，如果为null，返回false；如果为叶子节点，判断当前节点值是否与sum相等并返回；如果不是叶子节点，递归搜索左右子节点。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.val == sum;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left,sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="113，路径总和Ⅱ，midium"><a href="#113，路径总和Ⅱ，midium" class="headerlink" title="113，路径总和Ⅱ，midium"></a>113，路径总和Ⅱ，midium</h5><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p>
<pre><code>          5
         / \
        4   8
       /   / \
      11  13  4
     /  \    / \
    7    2  5   1</code></pre>
<p>返回:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法：递归回溯（dfs）。</p>
</li>
<li><p>思路：</p>
<ul>
<li>回溯条件：<ol>
<li>节点为空— 如果当前节点为空，说明节点没有孩子，循着这条路径，已经找不到符合条件的路径。</li>
<li>节点为叶子节点— 如果当前节点是叶子节点并且它的值满足题目要求，则它所在的路径就是满足要求的。</li>
</ol>
</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        dfs(root, sum, res, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//把当前节点值加入到list中</span></span><br><span class="line">         list.add(root.val);</span><br><span class="line">        <span class="comment">//叶子节点且此节点值=sum</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; root.val == sum) res.add(<span class="keyword">new</span> ArrayList(list));</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//还没到叶子节点，继续从左右节点向下找</span></span><br><span class="line">        dfs(root.left, sum - root.val, res, list);</span><br><span class="line">        dfs(root.right, sum - root.val, res, list);</span><br><span class="line">        <span class="comment">//防止分支污染，遍历完当前节点的左子树、右子树，说明经过这个节点的路径已经被遍历完，因此要回溯到当前节点的父节点</span></span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&mid=2247487910&idx=1&sn=2670aec7139c6b98e83ff66114ac1cf7&chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&scene=21#wechat_redirect">关于递归与回溯的详解</a></p>
</li>
</ul>
<h5 id="572，另一个树的子树，easy"><a href="#572，另一个树的子树，easy" class="headerlink" title="572，另一个树的子树，easy"></a>572，另一个树的子树，easy</h5><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p>
<p>示例 1:<br>给定的树 s:</p>
<pre><code>         3
        / \
       4   5
      / \    
     1   2   </code></pre>
<p>给定的树 t：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4 </span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure>


<p>返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p>
<p>示例 2:<br>给定的树 s：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   5</span><br><span class="line"> &#x2F; \    </span><br><span class="line">1   2 </span><br></pre></td></tr></table></figure>

<p>给定的树 t：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure>


<p>返回 false。</p>
<ul>
<li><p>方法：建立一个递归函数，判断两棵树是否相等。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第二棵树为空，一定是子树</span></span><br><span class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//第一棵树为空，没有子树</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较t是否是s的左子树和右子树的一部分，或s与t是两棵相同的树</span></span><br><span class="line">        <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t) || isSameTree(s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断两棵树是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//如果其中有一个节点为空或两节点值不相等时，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较左子树和右子树是否相同</span></span><br><span class="line">        <span class="keyword">return</span> isSameTree(s.left, t.left) &amp;&amp; isSameTree(s.right, t.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="101，对称二叉树，easy"><a href="#101，对称二叉树，easy" class="headerlink" title="101，对称二叉树，easy"></a>101，对称二叉树，easy</h5><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<pre><code>    1
   / \
  2   2
 / \ / \
3  4 4  3</code></pre>
<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>
<pre><code>    1
   / \
  2   2
   \   \
   3    3</code></pre>
<ul>
<li><p>方法一：递归。</p>
</li>
<li><p>思路：建立一个递归函数，移动两个指针遍历这棵树，判断根节点的左右子树是否对称。在主函数调用此递归函数，参数为根的左子节点和右子节点。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用两个指针检查树是否对称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span> || p.val != q.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="111，二叉树的最小深度，easy"><a href="#111，二叉树的最小深度，easy" class="headerlink" title="111，二叉树的最小深度，easy"></a>111，二叉树的最小深度，easy</h5><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p>说明：叶子节点是指没有子节点的节点。</p>
<p> <img src="https://img-blog.csdnimg.cn/img_convert/6d8500c55fe3ebe98dc781d7b62a3bbf.png" alt="img"></p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,null,3,null,4,null,5,null,6]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。</p>
<ul>
<li>结束条件：当root为空，返回0</li>
<li>递归体：若左右子树皆空，返回1；若左子树和右子树有非空的，记录其最小路径，最后返回结果为最小路径 ➕ 1</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1.当root的左右子树都为空</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mindep = Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//2.root的左子树或右子树有不为空，计算其最小路径</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.left), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.right), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回最小路径+1</span></span><br><span class="line">        <span class="keyword">return</span> mindep + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误原因：想法是dfs 来递归左右子树找它们的最小路径，然后取最小。但这样可能在 [2,null,3,null,4,null,5,null,6] 结构中不成立，因为root的左子树为空，所以要加一个判断。</p>
</li>
</ul>
<h5 id="404，左叶子之和，easy"><a href="#404，左叶子之和，easy" class="headerlink" title="404，左叶子之和，easy"></a>404，左叶子之和，easy</h5><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p>
<p>示例：</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7</code></pre>
<p>在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</p>
<ul>
<li><p>方法一：递归dfs</p>
</li>
<li><p>思路：所有左叶子节点之和，需要遍历整棵树，采用dfs。</p>
<ul>
<li><p>递归出口：节点为空或为叶子节点</p>
</li>
<li><p>递归条件：</p>
<ul>
<li><p>如果左子树不为空，判断左子节点是否为叶子节点：若不是，递归调用左子节点</p>
<ul>
<li>如果右子树为空，结果不变；若不为空，上面的结果＋ 递归调用右子节点</li>
</ul>
</li>
<li><p>否则左子树为空，右子树一定不为空，只需判断右子节点是不是叶子节点，若不是，递归调用右子节点</p>
</li>
<li><p>最后返回结果</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = isLeaf(root.left) ? root.left.val : dfs(root.left);</span><br><span class="line">            <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">            res += isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res = isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更简洁的版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLeaf(root.left)) <span class="keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>另一题：一棵树所有左子节点的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">           res = sumOfLeftLeaves(root.left) + root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.left) + root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="687，最长同值路径，medium"><a href="#687，最长同值路径，medium" class="headerlink" title="687，最长同值路径，medium"></a>687，最长同值路径，medium</h5><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p>
<p>注意：两个节点之间的路径长度由它们之间的边数表示。</p>
<p>示例 1:</p>
<p>输入:</p>
<pre><code>          5
         / \
        4   5
       / \   \
      1   1   5</code></pre>
<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<p>输入:</p>
<pre><code>          1
         / \
        4   5
       / \   \
      4   4   5</code></pre>
<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。（dfs）</p>
</li>
<li><p>思路：</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201214162048997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p>最长路径分为2种情况：</p>
<ol>
<li>以root为起点，经过左子树或右子树，如(2)</li>
<li>不以root为起点，root为中间点，如(1)</li>
</ol>
</li>
<li><p>辅助函数helper，计算以每一个节点为起点的最长同值路径maxLength，在过程中可以得到以root为根节点的树的最长同值路径ans。</p>
</li>
</ul>
<ul>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="comment">//以root为根节点的树的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以root为起点的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以左、右子节点为起点的最长同值路径</span></span><br><span class="line">        <span class="keyword">int</span> leftLength = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightLength = helper(root.right);</span><br><span class="line">        <span class="comment">//如果左、右子树都非空 且 root.val == root.left.val == root.right.val，更新ans</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span> &amp;&amp; root.val == root.left.val  &amp;&amp; root.val == root.right.val)&#123;</span><br><span class="line">            ans = Math.max(ans, leftLength + rightLength + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftPath = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightPath = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果左右子树有非空且子节点的值与root的值相等，以根节点为起点的最长同值路径为leftPath,rightPath中的最大值</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val)&#123;</span><br><span class="line">            leftPath  = leftLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val)&#123;</span><br><span class="line">            rightPath = rightLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取左右子树的最长同值路径的最大值</span></span><br><span class="line">        maxLength = Math.max(leftPath,rightPath);</span><br><span class="line">        <span class="comment">//更新ans</span></span><br><span class="line">        ans = Math.max(ans, maxLength);</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简洁版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> path = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = dfs(root.left);</span><br><span class="line">    <span class="keyword">int</span> right = dfs(root.right);</span><br><span class="line">    <span class="keyword">int</span> leftPath = root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val ? left + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightPath = root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val ? right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    path = Math.max(path, leftPath + rightPath);</span><br><span class="line">    <span class="keyword">return</span> Math.max(leftPath, rightPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="671，二叉树中第二小的节点，easy"><a href="#671，二叉树中第二小的节点，easy" class="headerlink" title="671，二叉树中第二小的节点，easy"></a>671，二叉树中第二小的节点，easy</h5><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p>
<p>更正式地说，<code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p>
<p>给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p>
<p>示例 1：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0bcc8d1bfd49276663468ef8e4c20907.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,5,null,null,5,7]</span><br><span class="line">输出：5</span><br><span class="line">解释：最小的值是 2 ，第二小的值是 5 。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ac58c17f14a23e31dd1aa6a7c40abcc6.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,2]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最小的值是 2, 但是不存在第二小的值。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>题意解析：每个树的根节点的值都为这棵树所有节点最小的值，所有节点中第二小的值即只比根节点大的值。</p>
</li>
<li><p>方法一：递归。</p>
<ul>
<li>递归出口：节点为空，返回 -1。</li>
<li>递归体：<ul>
<li>左右子节点都为空，返回 -1。</li>
<li>根节点取的是左子节点的值，递归左子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li>
<li>根节点取的是右子节点的值，递归右子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li>
</ul>
</li>
<li>结果：<ul>
<li>left 、right 如果都不为 -1，取最小值并返回</li>
<li>left 不为 -1(right 为 -1)，返回left</li>
<li>否则（left为 -1），返回right(-1 或 root.right.val或递归结果)</li>
</ul>
</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = root.left.val;</span><br><span class="line">        <span class="comment">//如果左子节点是最小值，递归左子节点，得到以左子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(left == root.val)&#123;</span><br><span class="line">            left = findSecondMinimumValue(root.left);<span class="comment">//-1 或 以root.left为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right = root.right.val;</span><br><span class="line">        <span class="comment">//如果右子节点是最小值，递归右子节点，得到以右子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(right == root.val)&#123;</span><br><span class="line">            right = findSecondMinimumValue(root.right);<span class="comment">//-1 或 以root.right为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果两边的树递归结果都不为-1（都正常），返回它们的最小值，即在root为根的树中只比root.val大</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span> &amp;&amp; right != -<span class="number">1</span>) <span class="keyword">return</span> Math.min(left,right);</span><br><span class="line">        <span class="comment">//如果左子树正常，返回左子树</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span>) <span class="keyword">return</span> left; </span><br><span class="line">        <span class="comment">//否则返回右子树递归值（-1 或 以root.right为根的树的第二小的值）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> right;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题—BST树的基础操作及套路模板</title>
    <url>/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>本文针对BST 的基础操作：判断 BST 的合法性（<em>98</em>）、增（<em>701</em>）、删（<em>450</em>）、查（<em>700</em>）。以几道题来总结出套路模板，以一敌十！<br><a href="#98%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%8Cmedium">98，验证二叉搜索树，medium</a><br><a href="#700%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2%EF%BC%8Ceasy">700，二叉搜索树中的搜索，easy</a><br><a href="#701%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%EF%BC%8Cmedium">701，二叉搜索树中的插入操作，medium</a><br><a href="#450%EF%BC%8C%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmedium">450，删除二叉搜索树中的节点，medium</a></p>
<a id="more"></a>

<h5 id="98，验证二叉搜索树，medium"><a href="#98，验证二叉搜索树，medium" class="headerlink" title="98，验证二叉搜索树，medium"></a>98，验证二叉搜索树，medium</h5><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>


<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。</p>
<ul>
<li><p>思路：很容易想到对于节点root，采用递归判断左子节点的值比它小，右子节点的值比它大，但注意：对每个节点都满足也不一定是BST树，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  5</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   6</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   7</span><br></pre></td></tr></table></figure>

<p>没有满足右子树的节点都比root值大。</p>
<p>建立辅助函数，增加最小节点min和最大节点max 作为辅助函数的参量。对于root，比较<code>root.val</code>与当前的<code>min.val</code> 和 <code>max.val</code>，再对<code>root.left</code> 和<code>root.right</code> 进行递归操作。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> healper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是BST树必须满足 min.val &lt; root.val &lt; max.val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">healper</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min != <span class="keyword">null</span> &amp;&amp; min.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max != <span class="keyword">null</span> &amp;&amp; max.val &lt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//左子树范围的最小值是min.val，最大值是当前节点的值，也就是root的值，因为左子树的值要比当前节点小</span></span><br><span class="line">    <span class="comment">//右子数范围的最大值是max.val，最小值是当前节点的值，也就是root的值，因为右子树的值要比当前节点大</span></span><br><span class="line">        <span class="keyword">return</span> healper(root.left, min, root) &amp;&amp; healper(root.right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方法二：中序遍历。</p>
<ul>
<li><p>思路：中序遍历的结果是从小到大排序的，建立一个全局遍历<code>pre</code>代表前一个节点，当前节点与前一个节点进行比较。</p>
<ul>
<li><p>递归：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line"><span class="comment">//中序遍历，递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 访问左子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 访问当前节点，如果不是按照从小到大的顺序，则返回false；否则pre右移，继续比较</span></span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="comment">// 访问右子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>易错点：采用递归方法只与左右子节点比较，但没有保证整棵树是BST树。</p>
</li>
</ul>
<h5 id="700，二叉搜索树中的搜索，easy"><a href="#700，二叉搜索树中的搜索，easy" class="headerlink" title="700，二叉搜索树中的搜索，easy"></a>700，二叉搜索树中的搜索，easy</h5><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p>
<p>例如，</p>
<p>给定二叉搜索树:</p>
<pre><code>    4
   / \
  2   7
 / \
1   3</code></pre>
<p>和值: 2<br>你应该返回如下子树:</p>
<pre><code>  2     
 / \   
1   3</code></pre>
<p>在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</p>
<ul>
<li><p>思路：对于普通二叉树，判断是否存在值为 <code>val</code> 的节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> search(root.left, val) || search(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于BST树，利用其左小右大的规律，不需要递归地搜索两边，类似二分查找思想，根据<code>val</code>和<code>root.val</code>的大小比较，就能排除一边。</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    	<span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val) <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span> || root.val == val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">return</span> val &lt; root.val ? searchBST(root.left, val) : searchBST(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>总结</strong>：BST树遍历搜索的框架为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="701，二叉搜索树中的插入操作，medium"><a href="#701，二叉搜索树中的插入操作，medium" class="headerlink" title="701，二叉搜索树中的插入操作，medium"></a>701，二叉搜索树中的插入操作，medium</h5><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p>
<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p>
<p>示例 1：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/be940ab2e07119dcd45e5d58370fc5de.png" alt="img"></p>
<p>输入：root = [4,2,7,1,3], val = 5<br>输出：[4,2,7,1,3,5]<br>解释：另一个满足题目要求可以通过的树是：</p>
<img src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg" alt="img" style="zoom:80%;" />

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [40,20,60,10,30,50,70], val &#x3D; 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,null,null,null,null,null,null], val &#x3D; 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：</p>
<p>对于函数<code>TreeNode insertIntoBST(TreeNode root, int val)</code>，表示插入值为 <code>val</code> 的节点后的BST树。由上面总结的查找的模板，再加入修改的操作即可。<strong>一旦涉及「改」，函数就要返回<code>TreeNode</code>类型，并且对递归调用的返回值进行接收。</strong></p>
<ul>
<li>方法：递归</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找 + 修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        <span class="comment">//val值比当前节点值大，将找个值插入右子树，且赋给root.right</span></span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) root.right = insertIntoBST(root.right, val);</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt; val) root.left = insertIntoBST(root.left, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="450，删除二叉搜索树中的节点，medium"><a href="#450，删除二叉搜索树中的节点，medium" class="headerlink" title="450，删除二叉搜索树中的节点，medium"></a>450，删除二叉搜索树中的节点，medium</h5><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>
<p>一般来说，删除节点可分为两个步骤：</p>
<p>首先找到需要删除的节点；<br>如果找到了，删除它。<br>说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p>
<p>示例:</p>
<p>root = [5,3,6,2,4,null,7]<br>key = 3</p>
<pre><code>    5
   / \
  3   6
 / \   \
2   4   7</code></pre>
<p>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。</p>
<p>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。</p>
<pre><code>    5
   / \
  4   6
 /     \
2       7</code></pre>
<p>另一个正确答案是 [5,2,6,null,4,null,7]。</p>
<pre><code>    5
   / \
  2   6
   \   \
    4   7</code></pre>
<ul>
<li><p>思路：还是<strong>查找 + 修改</strong> 类型，按照上面的遍历框架，写出初步解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 找到啦，进行删除</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">       <span class="comment">//一些删除操作</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在左子树，对左子树进行删除操作并重新赋给root.left</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        root.left = deleteNode(root.left, key);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在右子树，对右子树进行删除操作并重新赋给root.right</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        root.right = deleteNode(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到要删除的节点后，删除操作有下面情况：</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201216192138470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li><p>左右子节点有为空的（如12），返回非空的子节点</p>
<p><em>（<code>deleteNode</code> 函数即返回删除值为key的节点后的树）</em></p>
<p>如果左右子节点都为空，则返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line"><span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左右子节点都不为空，就要找到<strong>左子树的最大值或者右子树的最小值</strong>替换此root，并在左子树（或右子树）删除此节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root.val = getMaxLeft(root.left).val;</span><br><span class="line">root.left = deleteNode(root.left, root.val);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<ul>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.val == key)&#123;</span><br><span class="line">            <span class="comment">//1.有子节点为空</span></span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="comment">//2.子节点非空，则由左子树的最大值或者右子树的最小值替换此root，并在左子树（或右子树）删除此节点</span></span><br><span class="line">            root.val = getMaxLeft(root.left).val;</span><br><span class="line">            root.left = deleteNode(root.left, root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//key在右子树，对右子树进行删除操作，并把新的子树重新赋给root.right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; key)&#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从root.left出发,找到root的左子树的最大值（向右找）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMaxLeft</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul>
<li><p>由BST树的搜索框架，可以实现增（插）删改查，这几项的操作都是<strong>搜+改</strong>，做题可以先把框架写出来，再分析每步干什么。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于BST树最大的特点就是左小右大，中序遍历的结果由小到大。</p>
</li>
<li><p>递归最重要的就是弄清函数的含义，如果有返回值代表什么。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
</search>
