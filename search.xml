<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo攻略-更换网页图标</title>
    <url>/2020/10/28/Hexo%E6%94%BB%E7%95%A5-%E6%9B%B4%E6%8D%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="Hexo攻略—更改网页图标"><a href="#Hexo攻略—更改网页图标" class="headerlink" title="Hexo攻略—更改网页图标"></a>Hexo攻略—更改网页图标</h2><p>Hexo next主题默认的网页图标长这个样子~</p>
<p><img src="/images/icon1.PNG"></p>
<p>当然要和别人不一样！</p>
<a id="more"></a>

<h4 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h4><p>自己也可以绘制，懒得话就去下载，到<a href="https://www.easyicon.net/">这里</a>进行下载，<code>ico</code>文件和<code>png</code>都可以，我下载的是<code>ico</code></p>
<h4 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h4><p>下载的图标重命名为<code>favicon.ico</code>，位置放在<code>/themes/next/source/images</code></p>
<h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>在<code>/themes/next/_config.yml</code>中修改成自己的图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  #medium: &#x2F;images&#x2F;favicon-32x32-next.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line">  #android_manifest: &#x2F;manifest.json</span><br></pre></td></tr></table></figure>

<p>进入测试上传就好啦~</p>
<p>效果图<img src="/images/icon2.PNG"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo攻略-去除代码块的行序列号</title>
    <url>/2020/11/16/Hexo%E6%94%BB%E7%95%A5-%E5%8E%BB%E9%99%A4%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="Hexo攻略—去除代码块的行序列号"><a href="#Hexo攻略—去除代码块的行序列号" class="headerlink" title="Hexo攻略—去除代码块的行序列号"></a>Hexo攻略—去除代码块的行序列号</h1><p>Hexo博客Next主题默认的代码块是标有行序列号的，看代码时会有些干扰，怎么将它去除呢？</p>
<a id="more"></a>

<p><img src="/images/hexo1.PNG" alt="在这里插入图片描述"><br>其实很简单，但我找了好久才找到，现在分享给大家！在<strong>配置文件</strong>-config.yml中，找到highlight，并将line_number：true改为false。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#39;&#39;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br></pre></td></tr></table></figure>
<p>最终效果：<br><img src="/images/hexo%E8%A1%8C.PNG"><br>这样代码看着就清爽许多了~</p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/2020/10/26/HashMap/</url>
    <content><![CDATA[<h4 id="Map实现类之一：HashMap"><a href="#Map实现类之一：HashMap" class="headerlink" title="Map实现类之一：HashMap"></a>Map实现类之一：HashMap</h4><ul>
<li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li>
<li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li>
</ul>
<a id="more"></a>

<ul>
<li>一个key-value构成一个entry</li>
<li>所有的entry构成的集合是Set:无序的、不可重复的</li>
<li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li>
<li>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</li>
</ul>
<h5 id="HashMap的存储结构"><a href="#HashMap的存储结构" class="headerlink" title="HashMap的存储结构"></a>HashMap的存储结构</h5><p><strong>数组+链表  （jdk7及之前）</strong></p>
<img src="https://img-blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img" style="zoom:67%;" />

<p><strong>数组+链表+红黑树 （jdk 8）</strong></p>
<img src="https://img-blog.csdn.net/20170803204952538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG9naW5fc29uYXRh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="存储结构" style="zoom:67%;" />

<h5 id="HashMap添加元素的过程"><a href="#HashMap添加元素的过程" class="headerlink" title="HashMap添加元素的过程"></a>HashMap添加元素的过程</h5><p>HashMap map=new HashMap();</p>
<p>实例化后底层创建了长度是<strong>16</strong>的一维数组Entry[] table。这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 </p>
<p> 每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</p>
<p>…可能已经多次put…</p>
<p>map.put(key1,value1):</p>
<ol>
<li><p>调用key1所在类的HashCode()方法计算key1的哈希值</p>
</li>
<li><p>此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置</p>
<p>1).如果此位置上的数据为空，此时的key1-value1（即entyr1）添加成功。 —-&gt;情况1</p>
<p>2).如果此位置已存在一个或多个数据（以链表形式存在），比较key1和已存在数据的哈希值</p>
<ul>
<li>key1的哈希值与已存在数据的哈希值都不相同，添加成功。 —-&gt;情况2</li>
<li>key1的哈希值与key2的哈希值相同，调用key1所在类的equals()方法<ul>
<li>equals()返回false：此时key1-value1添加成功。   —&gt;情况3</li>
<li>equals()返回true：value1替换value2</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>对于情况2、3添加成功的元素a与已存在的元素以链表形式存储—7上8下</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/21/167cf3bc3724604a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
</li>
</ul>
<h5 id="HashMap的扩容"><a href="#HashMap的扩容" class="headerlink" title="HashMap的扩容"></a>HashMap的扩容</h5><h6 id="jdk7及以前"><a href="#jdk7及以前" class="headerlink" title="jdk7及以前"></a>jdk7及以前</h6><ul>
<li><pre><code> DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</code></pre>
</li>
<li><pre><code> DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</code></pre>
</li>
<li><pre><code> threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</code></pre>
</li>
<li><pre><code> TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</code></pre>
</li>
<li><pre><code> MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</code></pre>
</li>
</ul>
<p>​       当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的默认值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么<strong>当HashMap中元素个数超过$16<em>0.75 = 12$（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 $2</em>16=32$，即扩大一倍</strong>，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>
<h6 id="jdk8"><a href="#jdk8" class="headerlink" title="jdk8"></a>jdk8</h6><p> 相较于jdk7在底层实现方面的不同：</p>
<ol>
<li><p>new HashMap():底层没有创建一个长度为16的数组</p>
</li>
<li><p>jdk 8底层的数组是：<strong>Node[]</strong>,而非Entry[]</p>
</li>
<li><p>首次调用put()方法时，底层创建长度为16的数组</p>
</li>
<li><p>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p>
<p>4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）<br>4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo攻略-添加分类</title>
    <url>/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="Hexo攻略-添加分类"><a href="#Hexo攻略-添加分类" class="headerlink" title="Hexo攻略-添加分类"></a>Hexo攻略-添加分类</h2><h3 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h3><p>在命令窗口输入下方命令</p>
<blockquote>
<p> hexo new page categories</p>
</blockquote>
<a id="more"></a>

<p>/source/categories文件夹下会有index.md文件，打开后内容默认为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-10-26 19:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加type: categories到内容中，添加后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
<h3 id="2-新建文章并添加“categories”属性"><a href="#2-新建文章并添加“categories”属性" class="headerlink" title="2.新建文章并添加“categories”属性"></a>2.新建文章并添加“categories”属性</h3><p>在命令行输入下方命令创建新文章</p>
<blockquote>
<p>hexo n “新文章名称”  </p>
</blockquote>
<p>在/source/_posts下自动生成.md文件，打开为其添加categories属性。下方的categories:Hexo攻略，表示这篇文章添加到到“Hexo攻略”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hexo攻略-添加分类及标签</span><br><span class="line">date: 2020-10-27 15:22:42</span><br><span class="line">categories: Hexo攻略</span><br></pre></td></tr></table></figure>

<p>至此，成功给文章添加分类，点击首页的“分类”即可看到该分类下的所有文章。效果如图。</p>
<p><img src="/images/cate.jpg"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo攻略-设置分页与显示文章数</title>
    <url>/2020/10/29/Hexo%E6%94%BB%E7%95%A5-%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E4%B8%8E%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Hexo攻略-设置分页与显示文章数"><a href="#Hexo攻略-设置分页与显示文章数" class="headerlink" title="Hexo攻略-设置分页与显示文章数"></a>Hexo攻略-设置分页与显示文章数</h2><p>使用next主题下，默认首页、分类、标签页都是显示10个文章，想进行分页和设置显示文章数。按照以下步骤操作~</p>
<a id="more"></a>

<ul>
<li><p>在Git Bash下安装插件</p>
<blockquote>
<p>$ npm  install hexo-generator-index –save</p>
</blockquote>
<blockquote>
<p>$ npm install hexo-generator-archive – save</p>
</blockquote>
<blockquote>
<p>$ npm install hexo-generator-tag –save</p>
</blockquote>
</li>
<li><p>在主题配置文件<code>_config.yml</code>中修改</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line"># For more information: https:&#x2F;&#x2F;www.algolia.com</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 5</span><br><span class="line"></span><br><span class="line">#主页每页显示文章数</span><br><span class="line">index_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#archive分页每页显示文章数</span><br><span class="line">archive_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#tag分页每页显示文章数</span><br><span class="line">tag_generator:</span><br><span class="line">    per_page: 10</span><br><span class="line">#category分页每页显示文章数</span><br><span class="line">category_generator: </span><br><span class="line">    per_page: 10</span><br></pre></td></tr></table></figure>

<p>按照以上步骤操作，保证一次就能修改好啦！</p>
<p>实现分页效果如图</p>
<p><img src="/images/%E5%88%86%E9%A1%B5.PNG"></p>
]]></content>
      <categories>
        <category>Hexo攻略</category>
      </categories>
  </entry>
  <entry>
    <title>Java实现单链表与循环链表</title>
    <url>/2020/10/29/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="链表的引入"><a href="#链表的引入" class="headerlink" title="链表的引入"></a>链表的引入</h2><h3 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h3><ul>
<li><p>数组：</p>
<p>访问数组时，其实是利用指针，即内存地址，直接访问对应内存地址中的数值，所以访问速度非常快。查找复杂度：<strong>O(1)</strong></p>
<a id="more"></a>

<p>添加元素时，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。删除一个元素，同样需要移动大量元素去填掉被移动的元素。添加/删除元素的时间复杂度： <strong>O(n)</strong></p>
</li>
<li><p>链表：</p>
<p>链表与数组相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。第一个元素指向第二个，以此类推直到最后一个元素。所以查找链表中某一个元素就要从第一个元素开始找，一直到找到需要的元素。 查找复杂度：<strong>O(n)</strong></p>
<p>但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改相应位置前后元素中的指针就可以了。复杂度：<strong>O(1)</strong></p>
<p>添加node：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">node.next = pre.next;</span><br><span class="line">pre.next = node;</span><br></pre></td></tr></table></figure>

<p>删除node：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pre.next = node.next;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>​        单向链表是一种线性表，实际上是由节点（Node）组成的，一个链表拥有不定数量的节点。head为头节点，他不存放任何的数据，只是充当一个指向链表中真正存放数据的第一个节点的作用，而每个节点中都有一个next引用，指向下一个节点，就这样一节一节往下面记录，直到最后一个节点，其中的next指向null。</p>
<p><img src="/images/%E9%93%BE%E8%A1%A81.png"></p>
<p>代码实现（已定义<code>Node head</code>）</p>
<ul>
<li><p>其他功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取链表长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;<span class="comment">//从头遍历找</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getLength(); i++, temp = temp.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == index)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *判断链表是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *打印链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(temp.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.next = node;</span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> l = getLength();</span><br><span class="line">    l++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *在指定位置插入节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        head = node;</span><br><span class="line">        node.next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1 2 3 4 ,length=4</span></span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="number">0</span> &amp;&amp; index &lt; length - <span class="number">1</span>)&#123;</span><br><span class="line">        Node pre = getNode(index - <span class="number">1</span>);</span><br><span class="line">        node.next = pre.next;</span><br><span class="line">        pre.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除指定位置的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除头节点</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(index == getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        Node newEndNode = getNode(getLength() - <span class="number">2</span>);</span><br><span class="line">        newEndNode.next = getNode(index).next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除指定位置</span></span><br><span class="line">    <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        getNode(index - <span class="number">1</span>).next = getNode(index + <span class="number">1</span>);</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>单链表的尾结点指向 NULL，而循环链表的尾结点指向头结点，构成环状。</p>
<p><img src="/images/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.PNG"></p>
<p>代码实现：</p>
<ul>
<li><p>其他功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNodeByIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从头节点开始遍历链表查找</span></span><br><span class="line">        Node curr = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;length; i++,curr = curr.next)</span><br><span class="line">            <span class="keyword">if</span> (i == index)</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置元素的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到此元素！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getNodeByIndex(index).val;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表全部节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             Node temp = head;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                 System.out.print(temp.val+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                 temp = temp.next;</span><br><span class="line">             &#125;</span><br><span class="line">             System.out.println(getVal(length - <span class="number">1</span>));</span><br><span class="line">             System.out.println(<span class="string">&quot;length = &quot;</span>+length);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">add</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node temp = head;</span><br><span class="line">            <span class="comment">//head后还有节点，继续向后</span></span><br><span class="line">            <span class="keyword">while</span>(temp.next != head)&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到目前最后一个元素，它指向head。在它后面插入node</span></span><br><span class="line">            temp.next = node;</span><br><span class="line">            node.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定位置添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node newNode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index = 0,将newNode设为头节点</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将newNode插入到链表中，先获取前一个和后一个节点</span></span><br><span class="line">            Node pre = getNodeByIndex(index - <span class="number">1</span>);</span><br><span class="line">            newNode.next = pre.next;</span><br><span class="line">            pre.next = newNode;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            getNodeByIndex(length - <span class="number">1</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除尾节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(length - <span class="number">2</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定位置节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到该删除元素！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != length -<span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(index - <span class="number">1</span>).next = getNodeByIndex(index + <span class="number">1</span>);</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>summary: 原理大概都懂，代码实现上有些细节要注意。讨论头节点是否为null；给定某个位置index，讨论index是否在合理范围内。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的值传递机制</title>
    <url>/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><strong>Java中方法的值传递方式只有一种：值传递。</strong></p>
<a id="more"></a>

<p>值传递机制：</p>
<ul>
<li>如果参数是基本数据类型，此时实参赋给形参的是<strong>实参真实存储的数据值</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;排序前：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);</span><br><span class="line">     valueTransferTest t=<span class="keyword">new</span> valueTransferTest();</span><br><span class="line">     t.swap(a,b);</span><br><span class="line">     System.out.println(<span class="string">&quot;排序后：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);<span class="comment">//a = 10,b = 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp=m;</span><br><span class="line">     m=n;</span><br><span class="line">     n=temp;</span><br><span class="line">     <span class="comment">// System.out.println(&quot;m=&quot;+m+&quot;,n=&quot;+n);//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实参a,b将值传给形参，排序后a,b的值未发生改变，对实参值没有影响。</p>
<p>内存中</p>
<p><img src="/images/image_1.jpg"></p>
<ul>
<li>如果参数是引用数据类型，此时实参赋给形参的是<strong>实参存储数据的地址值</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	 Data data = <span class="keyword">new</span> Data();</span><br><span class="line">		</span><br><span class="line">	 data.m = <span class="number">10</span>; data.n = <span class="number">20</span>;</span><br><span class="line">		</span><br><span class="line">	 System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 10, n = 20</span></span><br><span class="line">	 swap(data);</span><br><span class="line">     System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span></span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> temp = data.m;</span><br><span class="line">	 data.m = data.n;</span><br><span class="line">	 data.n = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内存中显示</p>
<p><img src="/images/image_2.jpg"></p>
<p>参数保存的是实际对象的地址值，改变的只是地址值指向的堆内存中的实际对象，<strong>并没有真正改变参数</strong>，<strong>参数的地址值没有变</strong>。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer刷题—数组类</title>
    <url>/2020/11/09/%E5%89%91%E6%8C%87Offer%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="剑指Offer刷题——数组类"><a href="#剑指Offer刷题——数组类" class="headerlink" title="剑指Offer刷题——数组类"></a>剑指Offer刷题——数组类</h1><p>持续更新…好好总结，早日刷完！</p>
<a id="more"></a>

<h2 id="03，easy"><a href="#03，easy" class="headerlink" title="03，easy"></a>03，easy</h2><h3 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a>找出数组中重复的数字</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br></pre></td></tr></table></figure>

<p>输出：2 或 3 </p>
<ul>
<li><p>方法一. 利用Arrays.Sort()方法排序，比较相邻两个数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">      Arrays.Sort(nums);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])</span><br><span class="line">              <span class="keyword">return</span> nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二. 把数组元素赋给新数组的索引，如果个数&gt;1,则返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] newNum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(++newNum[i] &gt; <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三. 新建Set集合，利用Set的无序不可重复性，如果不能添加此元素，说明重复，返回此元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!set.add(i))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="04，middle"><a href="#04，middle" class="headerlink" title="04，middle"></a>04，middle</h2><h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p>给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<ul>
<li><p>判空。matrix和其行列均不能为空</p>
</li>
<li><p>方法一：暴力查询。遍历二维数组，直到找到相同整数，返回true；或遍历完也没有找到，返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix)</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;<span class="comment">//列数</span></span><br><span class="line">        <span class="comment">//遍历此二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(target == matrix[i][j])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<ul>
<li>思路：由此数组从左向右递增，从上向下递增的规律，比较target与右上角的数字，如果比它小(大)，则在左(右)边找，再与下一数字比较…直到找到相同整数，返回true；或遍历完也没有找到，返回false。</li>
<li>边界条件：遍历的行列指针i，j不能超过数组的行数rows，列数columns</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(matrix == <span class="keyword">null</span>|| matrix.length == <span class="number">0</span>|| matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;<span class="comment">//列数</span></span><br><span class="line">        <span class="comment">//从右上角开始比较</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = columns - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; rows &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//target比此二维数组元素大,向下找，行指针++</span></span><br><span class="line">            <span class="keyword">if</span>(target &gt; matrix[i][j]) i++;</span><br><span class="line">            <span class="comment">//target比此二维数组元素小,向左找，列指针--</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; matrix[i][j]) j--;</span><br><span class="line">            <span class="comment">//相等</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="11，easy"><a href="#11，easy" class="headerlink" title="11，easy"></a>11，easy</h2><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。<br>示例 1：<br><code>输入：[3,4,5,1,2] 输出：1 </code><br>示例 2：<br><code>输入：[2,2,2,0,1] 输出：0 </code></p>
<ul>
<li><p>方法一：逐项查找，不考虑旋转。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numbers.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[index] &gt; numbers [i])&#123;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：二分查找（减治思想），考虑旋转，比较nums[mid]与nums[right]。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//中间值大于最右边的值，说明旋转之后最小数字在mid右面</span></span><br><span class="line">        <span class="keyword">if</span>(numbers[middle] &gt; numbers[right])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//中间值小于最右边的值，说明旋转之后最小的数字在mid或mid的左边</span></span><br><span class="line">        <span class="comment">//如[4,5,1⭐m,2,3] [5,1⭐,2m,3,4]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numbers[middle] &lt; numbers[right])&#123;</span><br><span class="line">            right = middle ;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//中间值与最右边的值相等，不能判断最小数字在哪一边，可以缩小范围，right--</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[right];<span class="comment">//此时left,right指向同一数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>思考：为什么不能用最左边的值和middle比较？</p>
<p>举例：[3, 4, 5, 1, 2] 与 [1, 2, 3, 4, 5] ，此时，中间位置的值都比左边大，但最小值一个在后面，一个在前面，因此这种做法不能有效地减治。</p>
<h2 id="12，middle"><a href="#12，middle" class="headerlink" title="12，middle"></a>12，middle</h2><h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p>
<p>路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p>
<p>[[“a”,”b”,”c”,”e”],</p>
<p>[“s”,”f”,”c”,”s”],</p>
<p>[“a”,”d”,”e”,”e”]]</p>
<p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>
<p>示例 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：board &#x3D; [</span><br><span class="line">			   [&quot;a&quot;,&quot;b&quot;],</span><br><span class="line">               [&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">              ],</span><br><span class="line"></span><br><span class="line">     word &#x3D; &quot;abcd&quot;</span><br><span class="line"></span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：回溯算法。（DFS+剪枝）</p>
<ul>
<li>深度优先遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。</li>
<li>剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="comment">//找回words的第0个元素</span></span><br><span class="line">                <span class="keyword">if</span>(dfs(board,words,i,j,<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//board[i][j]表示矩阵元素，k表示字符串words的第k个元素</span></span><br><span class="line">        <span class="comment">//① 行或列索引越界 或 ② 当前矩阵元素与目标字符不同 或 ③ 当前矩阵元素已访问过 （③ 可合并至 ② ） 。</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] != word[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//字符串 word 已全部匹配，即 k = len(word) - 1 。</span></span><br><span class="line">        <span class="keyword">if</span>(k  == word.length- <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//将 board[i][j] 值暂存于变量 tmp ，并修改为字符 &#x27;/&#x27; ，</span></span><br><span class="line">        <span class="comment">// 代表此元素已访问过，防止之后搜索时重复访问。</span></span><br><span class="line">        <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="comment">//从当前坐标的上下左右四个方向查找，只要有一个能查找到，就返回true</span></span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board, word,i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word,i - <span class="number">1</span>, j, k + <span class="number">1</span>)|| dfs(board, word ,i ,j - <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//恢复其本身值</span></span><br><span class="line">        board[i][j] = temp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>刷题数组类</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式不同实现（秀恩爱版）</title>
    <url>/2020/11/03/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%A7%80%E6%81%A9%E7%88%B1%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java设计模式—单例设计模式（秀恩爱版）"><a href="#Java设计模式—单例设计模式（秀恩爱版）" class="headerlink" title="Java设计模式—单例设计模式（秀恩爱版）"></a>Java设计模式—单例设计模式（秀恩爱版）</h2><p>对于系统中的某些类来说，只有一个实例很重要。<em>就像男朋友（类）只有一个ChaoWang(对象)。</em></p>
<p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p>
<a id="more"></a>

<h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>①. 私有化类的构造器</p>
<p>②. 提供一个自身的静态私有成员变量</p>
<p>③. 提供公共静态方法，返回当前类的对象。</p>
<p><strong>通常单例模式在Java语言中，有两种构建方式：</strong></p>
<ul>
<li>懒汉式。指全局的单例实例在<strong>第一次被使用时构建</strong>。</li>
<li>饿汉式。指全局的单例实例<strong>在类装载时构建</strong>，<strong>实例在整个程序周期都存在</strong>。</li>
</ul>
<p>单例模式有很多种写法，大部分写法都或多或少有一些不足。下面将分别对这几种写法进行介绍。</p>
<h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="comment">//①.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//②.提供静态私有成员变量（我的男朋友ChaoW）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    <span class="comment">//③. 提供公共静态方法，返回当前类的对象。   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式的<strong>好处</strong>是只<strong>在类加载的时候创建一次实例</strong>，不会存在多个线程创建多个实例的情况，<strong>避免了多线程同步的问题</strong>。但它的<strong>缺点</strong>也很明显，即使这个单例没有用到也会被创建，而且在类加载之后就被创建，<strong>内存就被浪费</strong>了。</p>
<h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//还未创建过对象</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式<strong>单例是在需要的时候才去创建的</strong>，如果单例已经创建，再次调用获取接口将不会重新创建新的对象，而是直接返回之前创建的对象。但<strong>缺点</strong>是此写法<strong>不安全</strong>，如果两个线程同时运行到判断ChaoW是否为null的if语句，并且ChaoW的确没有被创建时，那么两个线程都会创建一个实例，此时类型BoyFriend就不再满足单例模式的要求了。</p>
<h3 id="3-懒汉式改进-加锁"><a href="#3-懒汉式改进-加锁" class="headerlink" title="3.懒汉式改进(加锁)"></a>3.懒汉式改进(加锁)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;  <span class="comment">//Single Checked</span></span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样<strong>每次调用getName()方法时都被synchronized关键字锁住</strong>，可能会引起线程阻塞，影响程序的性能。</p>
<h3 id="4-懒汉式改进（双重检验锁）"><a href="#4-懒汉式改进（双重检验锁）" class="headerlink" title="4.懒汉式改进（双重检验锁）"></a>4.懒汉式改进（双重检验锁）</h3><blockquote>
<p>为了在多线程环境下，不影响程序的性能，不让线程每次调用getName()方法时都加锁，而只是在实例未被创建时再加锁，在<strong>加锁处理里面还需要判断一次实例是否已存在</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 先判断实例是否存在，若不存在再对类对象进行加锁处理</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">synchronized</span> (BoyFriend.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">                    ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到上面在同步代码块外多了一层ChaoW为空的判断。由于单例对象只需要创建一次，如果后面再次调用getName()只需要直接返回单例对象。因此，大部分情况下，调用getName()都不会执行到同步代码块，从而提高了程序性能。</p>
<h3 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5.静态内部类"></a>5.静态内部类</h3><blockquote>
<p>加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个私有的静态内部类，用于初始化一个静态final实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriendHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BoyFriendHolder.ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式同样利用了<strong>类加载机制</strong>来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。不一样的是，它是在内部类里面去创建对象实例。这样的话，只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式<strong>可以同时保证延迟加载和线程安全</strong>。</p>
<h3 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6.枚举"></a>6.枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyLove</span></span>&#123;</span><br><span class="line">    LOVE;</span><br><span class="line">    <span class="keyword">private</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取实例的方式很简单，<code>MyLove.LOVE.getName()</code></p>
<p>单例是如何被保证的： </p>
<ul>
<li>首先，在枚举中我们<strong>明确了构造方法限制为私有</strong>，在我们访问枚举实例时会执行构造方法。</li>
<li>同时每个<strong>枚举实例都是<code>static final</code>类型的</strong>，也就表明只能被实例化一次。在调用构造方法时，我们的单例被实例化。 </li>
<li>也就是说，因为enum中的实例被保证只会被实例化一次，所以我们的<code>LOVE</code>也被保证实例化一次。 </li>
</ul>
<h3 id="单例模式的线程安全性"><a href="#单例模式的线程安全性" class="headerlink" title="单例模式的线程安全性"></a>单例模式的线程安全性</h3><p>单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。总结一下：</p>
<p>（1）饿汉式：线程安全</p>
<p>（2）懒汉式：非线程安全</p>
<p>（3）双检锁：线程安全</p>
<p>（4）静态内部类：线程安全</p>
<p>（5）枚举：线程安全</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>从JDBCUtils看代码简洁之道</title>
    <url>/2020/11/16/%E4%BB%8EJDBCUtils%E7%9C%8B%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h1 id="从JDBCUtils看代码简介之道"><a href="#从JDBCUtils看代码简介之道" class="headerlink" title="从JDBCUtils看代码简介之道"></a>从JDBCUtils看代码简介之道</h1><h3 id="使用PreparedStatement实现增删改查"><a href="#使用PreparedStatement实现增删改查" class="headerlink" title="使用PreparedStatement实现增删改查"></a>使用PreparedStatement实现增删改查</h3><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPreparedStatement1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">             <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">             System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">             String name = input.next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------连接数据库的步骤------------------------</span></span><br><span class="line"></span><br><span class="line">             Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">             info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">             String user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">             String password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">             String url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">             String driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//1.注册驱动</span></span><br><span class="line">             Class.forName(driver);</span><br><span class="line">             <span class="comment">//2.获取连接</span></span><br><span class="line">             Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//3.执行修改</span></span><br><span class="line">             String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">             PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">             statement.setString(<span class="number">1</span>, name);</span><br><span class="line">             statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">             <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">             System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//4.关闭</span></span><br><span class="line">             statement.close();</span><br><span class="line">             connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工具类JDBCUtils"><a href="#工具类JDBCUtils" class="headerlink" title="工具类JDBCUtils"></a>工具类JDBCUtils</h3><p>由于每次都要加载配置文件，读取配置信息，注册驱动，获取连接，想到封装成工具类JDBCUtils。功能：</p>
<ul>
<li> 1、获取连接</li>
<li> 2、释放资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：获取可用的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：释放资源</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set != <span class="keyword">null</span>) set.close();</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在getConnection()方法中仍有可以提出的部分，使用静态代码块只执行一次加载配置文件，读取配置信息，注册驱动的步骤，使代码更加简洁，效率更高。注意：提出的步骤需要处理异常。将user\password\url\driver提出静态代码块可以在获取连接时调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">static</span> String url ;</span><br><span class="line">    <span class="keyword">static</span> String driver;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        user = info.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        password = info.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        url = info.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        driver = info.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);<span class="comment">//编译时异常转为运行时异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：获取可用的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 功能：释放资源</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set != <span class="keyword">null</span>) set.close();</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改进之后"><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3><p>有了JDBCUtils工具类，再看改进后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrepasredStatementByUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">        String name = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------连接数据库的步骤----------------</span></span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Connection connection = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//2.执行修改</span></span><br><span class="line">        String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">        PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>, name);</span><br><span class="line">        statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">        System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭</span></span><br><span class="line">        JDBCUtils.close(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用工具类中的方法就简洁多啦！</p>
<p>再体会一下编译时异常变为运行时异常：</p>
<p>如果不抛异常，会报错</p>
<p><img src="/images/2020.11.16/1.png"></p>
<p>对JDBCUtils工具类中的getConnection()方法进行try-catch处理，将编译时异常转为运行时异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此时将不会报编译时错误</p>
<p><img src="/images/2020.11.16/2.png"></p>
<p>对另一个close方法的处理也一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) set.close();</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) statement.close();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrepasredStatementByUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待修改的客户编号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入新的客户姓名：&quot;</span>);</span><br><span class="line">        String name = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------连接数据库的步骤----------------</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.执行修改</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE customers SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            statement.setString(<span class="number">1</span>, name);</span><br><span class="line">            statement.setInt(<span class="number">2</span>, id);</span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate();<span class="comment">//执行增删改，返回受影响的行数</span></span><br><span class="line">            System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.关闭</span></span><br><span class="line">            JDBCUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>二维数组</title>
    <url>/2020/10/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>最近做题总涉及到二维数组，觉得掌握还不熟悉，再复习一下。</p>
<h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p>在Java中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。声明二维数组的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type array[][];</span><br></pre></td></tr></table></figure>

<p>其中，type 表示二维数组的类型，array 表示数组名称，第一个中括号表示行，第二个中括号表示列。</p>
<a id="more"></a>

<h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><ul>
<li><p>第一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">ints[i][j] =__; <span class="comment">//分别赋值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> a[ ][ ] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][ ]；</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="获取单个元素"><a href="#获取单个元素" class="headerlink" title="获取单个元素"></a>获取单个元素</h3><p>当需要获取二维数组中元素的值时，也可以使用下标来表示。语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><ul>
<li><p>第一种：双重for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rows = matrix.length;</span><br><span class="line"><span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">       System.out.println(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种：增强for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] i : matrix)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j : i)&#123;</span><br><span class="line">       System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>二维数组</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序算法</title>
    <url>/2020/11/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>几种经典的排序算法会慢慢总结，今天先总结一下快速排序算法。</p>
<h2 id="【图文详解】快速排序算法及Java实现"><a href="#【图文详解】快速排序算法及Java实现" class="headerlink" title="【图文详解】快速排序算法及Java实现"></a>【图文详解】快速排序算法及Java实现</h2><h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>采用“分治”的思想，对于一组数据，选择一个基准元素（base），通常选择第一个或最后一个元素，通过第一轮扫描，比base小的元素都在base左边，比base大的元素都在base右边，再有同样的方法递归排序这两部分，直到序列中所有数据均有序为止。</p>
<h3 id="图文详解"><a href="#图文详解" class="headerlink" title="图文详解 :"></a>图文详解 :</h3><a id="more"></a>

<p>以 <strong>[3,4,6,1,2,4,7]</strong> 为例，以第一个元素<strong>3</strong>为base，定义左右两个指针（小熊<strong>l</strong>，小熊<strong>r</strong>），分别从两端开始扫描。从右向左找比<strong>3</strong>小的数，替换<strong>l</strong>所在位置的元素。再从左往右找比<strong>3</strong>大的数，然后替换r所在位置的元素。重复此过程直至两个小熊重合（两个指针指向同一元素），base替换此元素，此时第一轮结束。再递归排序base左右两部分的元素。</p>
<p>刚开始的时候让🐻<strong>l</strong> 指向序列的最左边，指向数字<strong>3</strong>。让🐻<strong>r</strong> 指向序列的最右边，指向数字 <strong>7</strong>。</p>
<p><img src="/images/qs1.jpg"></p>
<p>首先🐻<strong>r</strong>出动，一步步向左移，直到找到比base小的数停下来，替换此时🐻<strong>l</strong>所在位置的元素</p>
<p><img src="/images/qs2.jpg"></p>
<p>替换后的序列为 <strong>[2,4,6,1,2,4,7]</strong></p>
<p><img src="/images/qs3.jpg"></p>
<p>🐻<strong>l</strong>出动，向右移直到找到比base大的数停下来，替换此时🐻<strong>r</strong>所在位置的元素</p>
<p><img src="/images/qs4.jpg"></p>
<p>替换后的序列为 [2,4,6,1,4,4,7]，🐻r再次出动，重复上述步骤</p>
<p><img src="/images/qs5.jpg"></p>
<p>比base小，替换🐻<strong>l</strong>所在位置的元素</p>
<p><img src="/images/qs6.jpg"></p>
<p>替换后的序列为[2,1,6,1,4,4,7]，🐻l再次出动</p>
<p><img src="/images/qs7.jpg"></p>
<p>比base大，替换🐻<strong>r</strong>所在位置的元素</p>
<p><img src="/images/qs8.jpg"></p>
<p>替换后的序列为[2,1,6,6,4,4,7]，🐻r再次出动</p>
<p><img src="/images/qs9.jpg"></p>
<p>此时🐻<strong>l</strong>、🐻<strong>r</strong>指向同一元素</p>
<p><img src="/images/qs10.jpg"></p>
<p>base替换此元素</p>
<p><img src="/images/qs11.jpg"></p>
<p>第一轮扫描完成，序列为 [2,1,3,6,4,4,7]，此时base(3)左边的元素都比它小，右边的元素都比它大，再对这两部分进行上述操作。</p>
<p><img src="/images/qs12.jpg"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现 :"></a>代码实现 :</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组有多个元素进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> base = nums[start];<span class="comment">//以要进行排序数组第0个元素为base</span></span><br><span class="line">        <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">        <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//从右向左找，比base大，right--</span></span><br><span class="line">            <span class="keyword">while</span> (left&lt; right &amp;&amp; nums[right] &gt;= base) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base小，替换left所在位置的数字</span></span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            <span class="comment">//从左向右找，比base小，left++</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= base)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base大，替换right所在位置的数字</span></span><br><span class="line">            nums[right] = nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[left] = base;<span class="comment">//此时left=right，用base替换这个位置的数字</span></span><br><span class="line">        <span class="comment">//排列比base小的数字的数组</span></span><br><span class="line">        quickSort(nums, start, left - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//排列比base大的数字的数组</span></span><br><span class="line">        quickSort(nums, left + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先遍历</title>
    <url>/2020/10/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。</p>
<a id="more"></a>

<h3 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h3><p>二叉树的深度优先遍历分为前序遍历，中序遍历和后续遍历。</p>
<ul>
<li>前序遍历：先访问根，在访问左子树，最后访问右子树，总结就是“根左右”；</li>
<li>中序遍历：先访问左子树，再访问根，最后访问右子树，总结就是“左根右”；</li>
<li>后序遍历：先访问左子树，再访问右子树，最后访问根，总结就是“左右根”；</li>
</ul>
<p>通常采用<strong>递归</strong>的方式实现遍历，非递归方式需要结合<strong>栈</strong>（后进先出）的特点实现。</p>
<p>以前序遍历为例：</p>
<h4 id="1-非递归方式实现（栈）"><a href="#1-非递归方式实现（栈）" class="headerlink" title="1. 非递归方式实现（栈）"></a>1. 非递归方式实现（栈）</h4><p><img src="/images/dfs1.PNG"></p>
<p>1.1 二叉树结构定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>1.2 创建上图的树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">initTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode node1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">    TreeNode node2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">    TreeNode node3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">    TreeNode node4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">    TreeNode node5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">    TreeNode node6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">    TreeNode node7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">    TreeNode node8 = <span class="keyword">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line">    TreeNode node9 = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    node1.left = node2;</span><br><span class="line">    node1.right = node3;</span><br><span class="line">    node2.left = node4;</span><br><span class="line">    node2.right = node5;</span><br><span class="line">    node3.left = node6;</span><br><span class="line">    node3.right = node7;</span><br><span class="line">    node5.right = node8;</span><br><span class="line">    node7.left = node9;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.3 非递归方式实现dfs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//栈先进后出，先将右子节点压入栈</span></span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>1.4 测试及结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        dfs(initTree());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/dfs2.PNG"></p>
<h4 id="2-递归方式实现"><a href="#2-递归方式实现" class="headerlink" title="2.递归方式实现"></a>2.递归方式实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h3><p>同样有两种实现方式：递归和非递归。</p>
<p>递归好理解一点，非递归还没摸透，等弄懂了再来填坑~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从第i个节点开始深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 标记第i个节点已遍历</span></span><br><span class="line">    vertex[i].visited = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 打印当前遍历的节点</span></span><br><span class="line">    System.out.println(vertex[i].getValue());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历邻接矩阵中第i个节点的直接联通关系</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; vertex.length;j++)&#123;</span><br><span class="line">        <span class="comment">// 目标节点与当前节点直接联通，并且该节点还没有被访问，递归</span></span><br><span class="line">        <span class="keyword">if</span>(adjMat[i][j]==<span class="number">1</span> &amp;&amp; vertex[j].visited==<span class="keyword">false</span>)&#123;</span><br><span class="line">            traverse(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图的深度优先遍历（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点遍历标记</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex.length; i++) &#123;</span><br><span class="line">        vertex[i].visited = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从没有被遍历的节点开始深度遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; vertex.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vertex[i].visited == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">// 若是连通图，只会执行一次</span></span><br><span class="line">            traverse(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>递归与回溯</title>
    <url>/2020/11/15/%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="递归与回溯"><a href="#递归与回溯" class="headerlink" title="递归与回溯"></a>递归与回溯</h1><h4 id="一句话讲递归与回溯"><a href="#一句话讲递归与回溯" class="headerlink" title="一句话讲递归与回溯"></a>一句话讲递归与回溯</h4><p>递归：自己调用自己。本质就是找到前后的联系，找到递归的公式。</p>
<p>回溯：执行一次深度优先遍历（DFS），一条路走到底，走不通的时候，返回回来，继续执行，一直这样下去，直到回到起点。</p>
<a id="more"></a>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="一般情况为："><a href="#一般情况为：" class="headerlink" title="一般情况为："></a>一般情况为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;        </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">recursion(参数<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="例子：阶乘"><a href="#例子：阶乘" class="headerlink" title="例子：阶乘"></a>例子：阶乘</h4><ol>
<li><p>阶乘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//调用自己</span></span><br><span class="line">    <span class="keyword">return</span> n * recursion(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归过程：</p>
<p><img src="/images/%E9%80%92%E5%BD%92.PNG"></p>
</li>
</ol>
<p>求f(5)的时候，只需要求出f(4)即可，如果求f(4)我们要求出f(3)……，一层一层的调用，当n=1的时候，我们直接返回1，然后再一层一层的返回，直到返回f(5)为止。</p>
<h4 id="一些较实际的情况："><a href="#一些较实际的情况：" class="headerlink" title="一些较实际的情况："></a>一些较实际的情况：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;       </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">&#125;</span><br><span class="line">可能有一些逻辑运算   </span><br><span class="line">recursion(参数<span class="number">1</span>);    </span><br><span class="line">可能有一些逻辑运算    </span><br><span class="line">recursion(参数<span class="number">2</span>);            </span><br><span class="line">……    </span><br><span class="line">recursion(参数n);</span><br><span class="line">可能有一些逻辑运算</span><br></pre></td></tr></table></figure>

<h4 id="例子：反转链表"><a href="#例子：反转链表" class="headerlink" title="例子：反转链表"></a>例子：反转链表</h4><ol start="2">
<li><p>反转链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseList</span><span class="params">(ListNode root)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//（终止条件）</span></span><br><span class="line">     <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> ;</span><br><span class="line">       <span class="comment">//（递归调用）先打印下一个</span></span><br><span class="line">     reverseList(root.next);</span><br><span class="line">       <span class="comment">//（逻辑处理）把后面的都打印完了在打印当前节点</span></span><br><span class="line">     System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
</li>
</ol>
<p><img src="/images/reverse.PNG"></p>
<h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>回溯的本质，其实是在递归基础上进行了改进</p>
<h4 id="一般情况为：-1"><a href="#一般情况为：-1" class="headerlink" title="一般情况为："></a>一般情况为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(不满足继续递归查找的条件，通常为界限判断)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(满足查找条件)</span><br><span class="line">    <span class="keyword">return</span> 这个值/节点;</span><br><span class="line">递归左边</span><br><span class="line">递归右边</span><br><span class="line">递归结果判断-回溯</span><br></pre></td></tr></table></figure>

<h4 id="例子：矩阵中的路径（剑指Offer12）"><a href="#例子：矩阵中的路径（剑指Offer12）" class="headerlink" title="例子：矩阵中的路径（剑指Offer12）"></a>例子：矩阵中的路径（剑指Offer12）</h4><p>判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：board &#x3D; [</span><br><span class="line">			   [&quot;a&quot;,&quot;b&quot;],</span><br><span class="line">               [&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">              ],</span><br><span class="line">     word &#x3D; &quot;abcd&quot;</span><br><span class="line"></span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：回溯算法（DFS+剪枝）。遍历矩阵中所以字符，先朝一个方向搜索到底，再回溯至上个节点，再沿另一方向搜索，以此类推。在搜索中，遇到匹配不成功（如索引越界、此元素已访问、此矩阵元素和目标字符不同）的情况就立即返回。</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界条件（越界、与目标元素不同）</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//全部匹配完成</span></span><br><span class="line">        <span class="keyword">if</span>(k == word.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//将当前元素标记为&#x27;\0&#x27;,不可再被访问</span></span><br><span class="line">        <span class="comment">//递归上下左右</span></span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) ||dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        board[i][j] = temp;<span class="comment">//恢复其本身值</span></span><br><span class="line">        <span class="comment">//递归结果判断-回溯</span></span><br><span class="line">        <span class="keyword">return</span> res;<span class="comment">//上面4个方向，只要有一个能查找到，就返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="例子：二叉搜索树的最近公共祖先-剑指Offer68-Ⅱ"><a href="#例子：二叉搜索树的最近公共祖先-剑指Offer68-Ⅱ" class="headerlink" title="例子：二叉搜索树的最近公共祖先(剑指Offer68-Ⅱ)"></a>例子：二叉搜索树的最近公共祖先(剑指Offer68-Ⅱ)</h4><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="/images/OFfer68.PNG"></p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思想：通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。从底至顶回溯，当节点 p, q 在节点 root 的异侧时，节点root 即为最近公共祖先，则向上返回 root 。</p>
<p>p,q和root有三种情况：</p>
<pre><code>1). p,q在root左右，返回root
2). p,q都在root左，返回`lowestCommonAncestor( root.left, TreeNode p, TreeNode q)`
3). p,q都在root右，返回`lowestCommonAncestor( root.right, TreeNode p, TreeNode q)`</code></pre>
<ul>
<li><p>递归终止条件<br>if(root == null) return null;//越过叶子节点，返回null<br>if(root == p) return p;//找到p，返回p<br>if(root == q) return q;//找到q，返回q</p>
</li>
<li><p>递归体<br>递归左子节点，返回值为left<br><code>TreeNode left = lowestCommonAncestor( root.left, TreeNode p, TreeNode q);</code><br>递归右子节点，返回值为right<br><code>TreeNode right = lowestCommonAncestor( root.right, TreeNode p, TreeNode q);</code></p>
</li>
<li><p>递归结果<br>1).left == null &amp;&amp; right == null<br>两边都没找到，返回null<br>2).left == null<br>右边找到，返回right<br>3). right == null<br>右边找到，返回left<br>4).left != null &amp;&amp; right != null<br>说明p,q在root两侧，返回root</p>
</li>
</ul>
</li>
<li><p>图文过程详解</p>
<p><img src="/images/Offer68/1.PNG"></p>
<p><img src="/images/Offer68/2.PNG"></p>
<p><img src="/images/Offer68/3.PNG"></p>
<p><img src="/images/Offer68/4.PNG"></p>
<p><img src="/images/Offer68/5.PNG"></p>
<p><img src="/images/Offer68/6.PNG"></p>
<p><img src="/images/Offer68/7.PNG"></p>
<p><img src="/images/Offer68/8.PNG"></p>
<p><img src="/images/Offer68/9.PNG"></p>
<p><img src="/images/Offer68/10.PNG"></p>
<p><img src="/images/Offer68/11.PNG"></p>
<p><img src="/images/Offer68/12.PNG"></p>
<p><img src="/images/Offer68/13.PNG"></p>
<p><img src="/images/Offer68/14.PNG"></p>
<p><img src="/images/Offer68/15.PNG"></p>
<p><img src="/images/Offer68/16.PNG"></p>
<p><img src="/images/Offer68/17.PNG"></p>
<p><img src="/images/Offer68/18.PNG"></p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归体</span></span><br><span class="line">        TreeNode left = lowestCommonAncestor( root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor( root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归结果判断-回溯</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>算法小白对递归和回溯的理解只到这里，希望随着刷的题越来越多，理解也越来越清晰透彻，到时再来分享！</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>递归与回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-MySQL学生管理系统</title>
    <url>/2020/11/19/Java-MySQL%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="Java-MySQL学生管理系统"><a href="#Java-MySQL学生管理系统" class="headerlink" title="Java+MySQL学生管理系统"></a>Java+MySQL学生管理系统</h1><p>源码：<a href="https://github.com/ruiwang-97/StudentManagement.git">https://github.com/ruiwang-97/StudentManagement.git</a></p>
<p><a href="%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">需求分析</a></p>
<p><a href="%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF">设计思路</a></p>
<p><a href="%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></p>
<p><a href="%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C">测试效果</a></p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>这是一个学生管理系统，以管理员身份登录，实现对学员以及年级信息的增删改查操作。</p>
<p>具体需要实现的功能有：</p>
<a id="more"></a>

<p>1、统计学生人数。</p>
<p>2、查看学生名单。</p>
<p>3、按学号查询学生姓名。</p>
<p>4、按姓名查询学生信息。</p>
<p>5、删除学生记录。</p>
<p>6、修改学生年级。</p>
<p>7、添加学生。</p>
<p>8、退出。</p>
<p>分析：</p>
<p>其中1，2，3，4为查询操作，1、3返回单个值，调用dao包中BasicDao中的<code>scalar()</code>方法，2返回多个对象，调用BasicDao中的<code>queryMulti()</code>方法，3返回单个对象，调用BasicDao中的<code>querySingle()</code>方法。5，6，7为增删改，调用<code>update()</code>方法。</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>分为五个模块：dao、domain、service、view、utils。其中</p>
<ul>
<li><p>dao包访问数据类，包括BasicDao，StuDao，ManagerDao。提供对数据的增删改查的通用方法。</p>
</li>
<li><p>domain包实体类，包括Manager，Student。</p>
</li>
<li><p>service包业务类，包括managerService提供登录验证方法，stdentService提供增删改查方法。</p>
</li>
<li><p>view包界面类，stuView提供主界面，TSUtility封装控制台操作。</p>
</li>
<li><p>utils包数据库连接类，通过德鲁伊数据库连接池获取连接对象。</p>
</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="MySQL部分"><a href="#MySQL部分" class="headerlink" title="MySQL部分"></a>MySQL部分</h3><ol>
<li><p>建库<code>studentm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE studentm;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建表</p>
<ul>
<li><p>manager表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE manager(</span><br><span class="line">id INT(11)PRIMARY KEY ,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pword VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT(11)PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">stunumber VARCHAR(20) NOT NULL,</span><br><span class="line">stuname VARCHAR(20) NOT NULL,</span><br><span class="line">gender VARCHAR(20) NOT NULL,</span><br><span class="line">grade VARCHAR(20) NOT NULL,</span><br><span class="line">tel INT(20) NOT NULL,</span><br><span class="line">email VARCHAR(20) NOT NULL,</span><br><span class="line">birth VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置管理员用户名、密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &#96;manager&#96; VALUES(1,&#39;john&#39;,8888);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以先加入一些学生用于测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &#96;stu&#96; VALUES(1,&#39;S0018&#39;,&#39;梅小凤&#39;,&#39;女&#39;,&#39;B2&#39;,158111876544,&#39;xiaofeng@qq.com&#39;,&#39;1998-3-3&#39;),(2,&#39;S0035&#39;,&#39;晓梅&#39;,&#39;女&#39;,&#39;B3&#39;,156091875566,&#39;xiaomei@qq.com&#39;,&#39;1996-2-16&#39;),(</span><br><span class="line">3,&#39;S0025&#39;,&#39;王小锐&#39;,&#39;女&#39;,&#39;B5&#39;,18345278844,&#39;rui97@qq.com&#39;,&#39;1997-9-16&#39;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Java部分"><a href="#Java部分" class="headerlink" title="Java部分"></a>Java部分</h3><ol>
<li><p>导入jar包和druid.properties(注意修改库名)，utils包下的JDBCUtilsByDruid类与数据库建立连接和关闭连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.ECField;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 此类是通过德鲁伊数据库连接池获取连接对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/17$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsByDruid</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.创建一个指定参数的数据流连接池</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从数据库连接池中获取可用的连接对象</span></span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立dao包，定义一个用来被继承的对数据库进行基本操作的BasicDao，提供通用的增删改查方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"><span class="keyword">import</span> sm.utils.JDBCUtilsByDruid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供通用的增删改查方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：通用的增删改方法，针对于任何表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> update = qr.update(connection, sql, params);</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回单个对象，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">querySingle</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//        QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(clazz), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回多个对象，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryMulti</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//            QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(clazz), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：返回单个值，针对于任何表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">scalar</span><span class="params">(String sql, Object... params)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//            QueryRunner qr = new QueryRunner();</span></span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> ScalarHandler(), params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="keyword">null</span>, <span class="keyword">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StuDao和ManagerDao继承于BasicDao。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDao</span> <span class="keyword">extends</span> <span class="title">BasicDao</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerDao</span> <span class="keyword">extends</span> <span class="title">BasicDao</span>&lt;<span class="title">Manager</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立domain包，Manager类和Student对应MySQL中的表定义属性及其类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 管理员类 id,username,pword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pword;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(<span class="keyword">int</span> id, String username, String pword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.pword = pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPword</span><span class="params">(String pword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pword = pword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Manager&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pword=&#x27;&quot;</span> + pword + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 学生类  id,stunumber,stuname,gender,grade,tel,email,birth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String stunumber;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String stuname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String grade;<span class="comment">//年级</span></span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String stunumber, String stuname, String gender, String grade, String tel, String email, String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.stunumber = stunumber;</span><br><span class="line">        <span class="keyword">this</span>.stuname = stuname;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStunumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stunumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStunumber</span><span class="params">(String stunumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stunumber = stunumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuname</span><span class="params">(String stuname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuname = stuname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(String grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stunumber + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 stuname + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 gender + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 grade + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 tel + <span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                 email + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                 birth;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立service包，其中managerService类提供管理员登录验证的方法，studentService类用于提供学生增删改查的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.dao.ManagerDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 提供管理员登录验证的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">managerService</span> </span>&#123;</span><br><span class="line">    ManagerDao dao = <span class="keyword">new</span> ManagerDao();</span><br><span class="line"><span class="comment">//登录验证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line"><span class="comment">//此处易出现java.lang.ClassCastException异常，Long型不可强转为Boolean型</span></span><br><span class="line">        Long count =  (Long)dao.scalar(<span class="string">&quot;select count(*) from manager where username=? and pword=?&quot;</span>, username,password);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.dao.StuDao;</span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类用于提供学生增删改查的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentService</span> </span>&#123;</span><br><span class="line">    StuDao dao = <span class="keyword">new</span> StuDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、统计学生人数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nums</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long longnums = (Long) dao.scalar(<span class="string">&quot;select count(*) from stu&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = longnums.intValue();</span><br><span class="line">        <span class="keyword">return</span> nums ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、查看学生名单-返回学生列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; students = dao.queryMulti(<span class="string">&quot;select * from stu&quot;</span>,Student.class);</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、按学号查询学生姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByStuNumber</span><span class="params">(String stunumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) dao.scalar(<span class="string">&quot;select stuname from stu where stunumber = ?&quot;</span>, stunumber);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4、按姓名查询学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryByStuName</span><span class="params">(String stuName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.querySingle(<span class="string">&quot;select * from stu where stuname like ?&quot;</span>, Student.class, <span class="string">&quot;%&quot;</span>+stuName+<span class="string">&quot;%&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.删除学生记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteStu</span><span class="params">(String stunumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.update(<span class="string">&quot;delete from stu where stunumber = ?&quot;</span>, stunumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.修改学生年级</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">changeStu</span><span class="params">(String stunumber,String newGrade)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> dao.update(<span class="string">&quot;update stu set grade = ? where stunumber = ?&quot;</span>,newGrade,stunumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStu</span><span class="params">(<span class="keyword">int</span> id, String stunumber, String stuname, String gender, String grade, String tel, String email, String birth)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> dao.update(<span class="string">&quot;insert into stu values(?,?,?,?,?,?,?,?)&quot;</span>,id,stunumber,stuname,gender,grade,tel,email,birth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立view包，其中TSUtility工具类用于读取控制台操作，stuView用于主界面的显示。首先是登陆界面，输入正确的用户名和密码后进入主菜单，控制台输入相应功能序号调取相应方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sm.domain.Student;</span><br><span class="line"><span class="keyword">import</span> sm.service.managerService;</span><br><span class="line"><span class="keyword">import</span> sm.service.studentService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 主界面显示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/18$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stuView</span> </span>&#123;</span><br><span class="line">    managerService ms = <span class="keyword">new</span> managerService();</span><br><span class="line">    studentService ss = <span class="keyword">new</span> studentService();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> stuView().login();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录界面显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = input.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = input.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ms.login(username, password))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            showMainMenu();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：显示主菜单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> loopFlag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span> key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">            key = TSUtility.readMenuSelection();</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前学生人数为：&quot;</span> + ss.nums());</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    listStudents();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    queryByStuNumber();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    queryByStuName();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    deleteByStuName();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    changeGrade();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">                    addStudent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                    <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span> (yn == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">                        loopFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (loopFlag);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始显示主菜单</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================请选择操作键================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1、统计学生人数&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2、查看学生名单&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3、按学号查询学生姓名&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4、按姓名查询学生信息&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5、删除学生记录&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;6、修改学生年级&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;7、添加学生&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;8、退出&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示当前学生列表方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------学生列表-----------------------------&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; allStudents = ss.getAllStudents();</span><br><span class="line">        <span class="keyword">if</span> (allStudents.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有客户记录！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t性别\t年级\t电话\t邮箱\t出生日期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student e : allStudents) &#123;</span><br><span class="line">            System.out.println(e.getStunumber() + <span class="string">&quot;\t&quot;</span> + e.getStuname()  + <span class="string">&quot;\t&quot;</span> + e.getGender() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    + e.getGrade() + <span class="string">&quot;\t&quot;</span> + e.getTel() + <span class="string">&quot;\t&quot;</span> + e.getEmail() + <span class="string">&quot;\t&quot;</span> + e.getBirth());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按学号查询学生姓名方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryByStuNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================查询操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        String s1 = ss.queryByStuNumber(s);</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败,请重新操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按姓名查询学生信息方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryByStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================查询操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        Student s1 = ss.queryByStuName(s);</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t性别\t年级\t电话\t邮箱\t出生日期&quot;</span>);</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败，请重新操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生记录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteByStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================删除操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;确认是否删除(Y/N)：&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(yn == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ss.deleteStu(s) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">&quot;输入信息错误，请重新操作！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生年级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================修改操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String s = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入修改后的年级：&quot;</span>);</span><br><span class="line">        String newGrade = TSUtility.readString();</span><br><span class="line">        <span class="keyword">if</span> (ss.changeStu(s,newGrade) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;确认是否修改(Y/N)：&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">            <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================添加操作================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生序号：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = TSUtility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">        String stuNumber = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        String stuName = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生性别：&quot;</span>);</span><br><span class="line">        String gender = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生年级：&quot;</span>);</span><br><span class="line">        String grade = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生电话：&quot;</span>);</span><br><span class="line">        String tel = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生邮箱：&quot;</span>);</span><br><span class="line">        String email = TSUtility.readString();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生出生日期:&quot;</span>);</span><br><span class="line">        String birth = TSUtility.readString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ss.addStu(id,stuNumber, stuName, gender, grade, tel, email, birth) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;确认是否添加(Y/N)：&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">            <span class="keyword">if</span> (yn == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败，请重新操作！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><ol>
<li><p>登陆界面</p>
<ul>
<li><p>如果用户名密码输入正确，显示“登陆成功！”</p>
<p><img src="/images/SM/1.PNG"></p>
</li>
<li><p>如果用户名密码输入不正确，显示“登陆失败！”</p>
<p><img src="/images/SM/2.PNG"></p>
</li>
</ul>
</li>
<li><p>功能1、统计学生人数</p>
<p><img src="/images/SM/3.PNG"></p>
</li>
<li><p>功能2、查看学生名单</p>
<p><img src="/images/SM/4.PNG"></p>
</li>
<li><p>功能3、按学号查询学生姓名</p>
<ul>
<li><p>如果输入学号正确</p>
<p><img src="/images/SM/5.PNG"></p>
</li>
<li><p>如果输入学号不正确</p>
<p><img src="/images/SM/6.PNG"></p>
</li>
</ul>
</li>
<li><p>功能4、按姓名查询学生信息</p>
<ul>
<li><p>如果输入名字正确（可以模糊查询）</p>
<p><img src="/images/SM/7.PNG"></p>
</li>
<li><p>如果输入名字不正确</p>
<p><img src="/images/SM/8.PNG"></p>
</li>
</ul>
</li>
<li><p>功能5、删除学生记录</p>
<ul>
<li><p>如果输入学号正确</p>
<ul>
<li><p>确认删除(Y)</p>
<p><img src="/images/SM/9.PNG"></p>
<p>删除后查看学生列表，确定已删除</p>
<p><img src="/images/SM/10.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>如果输入学号不正确</p>
<p><img src="/images/SM/11.PNG"></p>
</li>
</ul>
</li>
<li><p>功能6、修改学生年级</p>
<p>例如将学号为S0018的学生年级改为B1</p>
<ul>
<li><p>确认修改(Y)</p>
<p><img src="/images/SM/12.PNG"></p>
<p>修改后查看学生列表，确定已修改</p>
<p><img src="/images/SM/15.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>功能7、添加学生</p>
<p>输入学生序号、学号、姓名、性别、年级、电话、邮箱、出生日期</p>
<ul>
<li><p>确认添加(Y)</p>
<p><img src="/images/SM/13.PNG"></p>
<p>添加后查看学生列表，确定已添加</p>
<p><img src="/images/SM/14.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
<li><p>功能8、退出</p>
<ul>
<li><p>确认退出(Y)</p>
<p><img src="/images/SM/16.PNG"></p>
</li>
<li><p>不确认(N)</p>
<p>自动退出，重新回到主菜单</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java Mysql</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
</search>
