<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Mon, 09 Nov 2020 14:43:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>剑指Offer刷题—数组类</title>
      <link>http://example.com/2020/11/09/%E5%89%91%E6%8C%87Offer%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%E7%B1%BB/</link>
      <guid>http://example.com/2020/11/09/%E5%89%91%E6%8C%87Offer%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%E7%B1%BB/</guid>
      <pubDate>Mon, 09 Nov 2020 14:40:40 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;剑指Offer刷题——数组类&quot;&gt;&lt;a href=&quot;#剑指Offer刷题——数组类&quot; class=&quot;headerlink&quot; title=&quot;剑指Offer刷题——数组类&quot;&gt;&lt;/a&gt;剑指Offer刷题——数组类&lt;/h1&gt;&lt;p&gt;持续更新…好好总结，早日刷完！&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="剑指Offer刷题——数组类"><a href="#剑指Offer刷题——数组类" class="headerlink" title="剑指Offer刷题——数组类"></a>剑指Offer刷题——数组类</h1><p>持续更新…好好总结，早日刷完！</p><a id="more"></a><h2 id="03，easy"><a href="#03，easy" class="headerlink" title="03，easy"></a>03，easy</h2><h3 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a>找出数组中重复的数字</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><ul><li>方法一. 利用Arrays.Sort()方法排序，比较相邻两个数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    Arrays.Sort(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法二. 把数组元素赋给新数组的索引，如果个数&gt;1,则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] newNum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(++newNum[i] &gt; <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三. 新建Set集合，利用Set的无序不可重复性，如果不能添加此元素，说明重复，返回此元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!set.add(i))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E5%88%B7%E9%A2%98%E6%95%B0%E7%BB%84%E7%B1%BB/">刷题数组类</category>
      
      
      <comments>http://example.com/2020/11/09/%E5%89%91%E6%8C%87Offer%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单例设计模式不同实现（秀恩爱版）</title>
      <link>http://example.com/2020/11/03/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%A7%80%E6%81%A9%E7%88%B1%E7%89%88%EF%BC%89/</link>
      <guid>http://example.com/2020/11/03/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%A7%80%E6%81%A9%E7%88%B1%E7%89%88%EF%BC%89/</guid>
      <pubDate>Tue, 03 Nov 2020 08:28:50 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Java设计模式—单例设计模式（秀恩爱版）&quot;&gt;&lt;a href=&quot;#Java设计模式—单例设计模式（秀恩爱版）&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—单例设计模式（秀恩爱版）&quot;&gt;&lt;/a&gt;Java设计模式—单例设计模式（秀恩爱版）&lt;/h2&gt;&lt;p&gt;对于系统中的某些类来说，只有一个实例很重要。&lt;em&gt;就像男朋友（类）只有一个ChaoWang(对象)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类&lt;strong&gt;只能存在一个对象实例&lt;/strong&gt;，并且该类只提供一个取得其对象实例的方法。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Java设计模式—单例设计模式（秀恩爱版）"><a href="#Java设计模式—单例设计模式（秀恩爱版）" class="headerlink" title="Java设计模式—单例设计模式（秀恩爱版）"></a>Java设计模式—单例设计模式（秀恩爱版）</h2><p>对于系统中的某些类来说，只有一个实例很重要。<em>就像男朋友（类）只有一个ChaoWang(对象)。</em></p><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p><a id="more"></a><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>①. 私有化类的构造器</p><p>②. 提供一个自身的静态私有成员变量</p><p>③. 提供公共静态方法，返回当前类的对象。</p><p><strong>通常单例模式在Java语言中，有两种构建方式：</strong></p><ul><li>懒汉式。指全局的单例实例在<strong>第一次被使用时构建</strong>。</li><li>饿汉式。指全局的单例实例<strong>在类装载时构建</strong>，<strong>实例在整个程序周期都存在</strong>。</li></ul><p>单例模式有很多种写法，大部分写法都或多或少有一些不足。下面将分别对这几种写法进行介绍。</p><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="comment">//①.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//②.提供静态私有成员变量（我的男朋友ChaoW）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    <span class="comment">//③. 提供公共静态方法，返回当前类的对象。   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式的<strong>好处</strong>是只<strong>在类加载的时候创建一次实例</strong>，不会存在多个线程创建多个实例的情况，<strong>避免了多线程同步的问题</strong>。但它的<strong>缺点</strong>也很明显，即使这个单例没有用到也会被创建，而且在类加载之后就被创建，<strong>内存就被浪费</strong>了。</p><h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//还未创建过对象</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式<strong>单例是在需要的时候才去创建的</strong>，如果单例已经创建，再次调用获取接口将不会重新创建新的对象，而是直接返回之前创建的对象。但<strong>缺点</strong>是此写法<strong>不安全</strong>，如果两个线程同时运行到判断ChaoW是否为null的if语句，并且ChaoW的确没有被创建时，那么两个线程都会创建一个实例，此时类型BoyFriend就不再满足单例模式的要求了。</p><h3 id="3-懒汉式改进-加锁"><a href="#3-懒汉式改进-加锁" class="headerlink" title="3.懒汉式改进(加锁)"></a>3.懒汉式改进(加锁)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123;  <span class="comment">//Single Checked</span></span><br><span class="line">            ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样<strong>每次调用getName()方法时都被synchronized关键字锁住</strong>，可能会引起线程阻塞，影响程序的性能。</p><h3 id="4-懒汉式改进（双重检验锁）"><a href="#4-懒汉式改进（双重检验锁）" class="headerlink" title="4.懒汉式改进（双重检验锁）"></a>4.懒汉式改进（双重检验锁）</h3><blockquote><p>为了在多线程环境下，不影响程序的性能，不让线程每次调用getName()方法时都加锁，而只是在实例未被创建时再加锁，在<strong>加锁处理里面还需要判断一次实例是否已存在</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 先判断实例是否存在，若不存在再对类对象进行加锁处理</span></span><br><span class="line">        <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">synchronized</span> (BoyFriend.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ChaoW == <span class="keyword">null</span>)&#123; </span><br><span class="line">                    ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面在同步代码块外多了一层ChaoW为空的判断。由于单例对象只需要创建一次，如果后面再次调用getName()只需要直接返回单例对象。因此，大部分情况下，调用getName()都不会执行到同步代码块，从而提高了程序性能。</p><h3 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5.静态内部类"></a>5.静态内部类</h3><blockquote><p>加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoyFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个私有的静态内部类，用于初始化一个静态final实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriendHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BoyFriend ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BoyFriendHolder.ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式同样利用了<strong>类加载机制</strong>来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。不一样的是，它是在内部类里面去创建对象实例。这样的话，只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式<strong>可以同时保证延迟加载和线程安全</strong>。</p><h3 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6.枚举"></a>6.枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyLove</span></span>&#123;</span><br><span class="line">    LOVE;</span><br><span class="line">    <span class="keyword">private</span> BoyFriend ChaoW;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ChaoW = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoyFriend <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChaoW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取实例的方式很简单，<code>MyLove.LOVE.getName()</code></p><p>单例是如何被保证的： </p><ul><li>首先，在枚举中我们<strong>明确了构造方法限制为私有</strong>，在我们访问枚举实例时会执行构造方法。</li><li>同时每个<strong>枚举实例都是<code>static final</code>类型的</strong>，也就表明只能被实例化一次。在调用构造方法时，我们的单例被实例化。 </li><li>也就是说，因为enum中的实例被保证只会被实例化一次，所以我们的<code>LOVE</code>也被保证实例化一次。 </li></ul><h3 id="单例模式的线程安全性"><a href="#单例模式的线程安全性" class="headerlink" title="单例模式的线程安全性"></a>单例模式的线程安全性</h3><p>单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。总结一下：</p><p>（1）饿汉式：线程安全</p><p>（2）懒汉式：非线程安全</p><p>（3）双检锁：线程安全</p><p>（4）静态内部类：线程安全</p><p>（5）枚举：线程安全</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaSE/">JavaSE</category>
      
      
      <category domain="http://example.com/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">Java设计模式</category>
      
      
      <comments>http://example.com/2020/11/03/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%A7%80%E6%81%A9%E7%88%B1%E7%89%88%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>快速排序算法</title>
      <link>http://example.com/2020/11/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <guid>http://example.com/2020/11/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Sun, 01 Nov 2020 14:54:51 GMT</pubDate>
      
      <description>&lt;p&gt;几种经典的排序算法会慢慢总结，今天先总结一下快速排序算法。&lt;/p&gt;
&lt;h2 id=&quot;【图文详解】快速排序算法及Java实现&quot;&gt;&lt;a href=&quot;#【图文详解】快速排序算法及Java实现&quot; class=&quot;headerlink&quot; title=&quot;【图文详解】快速排序算法及Java实现&quot;&gt;&lt;/a&gt;【图文详解】快速排序算法及Java实现&lt;/h2&gt;&lt;h3 id=&quot;基本思想：&quot;&gt;&lt;a href=&quot;#基本思想：&quot; class=&quot;headerlink&quot; title=&quot;基本思想：&quot;&gt;&lt;/a&gt;基本思想：&lt;/h3&gt;&lt;p&gt;采用“分治”的思想，对于一组数据，选择一个基准元素（base），通常选择第一个或最后一个元素，通过第一轮扫描，比base小的元素都在base左边，比base大的元素都在base右边，再有同样的方法递归排序这两部分，直到序列中所有数据均有序为止。&lt;/p&gt;
&lt;h3 id=&quot;图文详解&quot;&gt;&lt;a href=&quot;#图文详解&quot; class=&quot;headerlink&quot; title=&quot;图文详解 :&quot;&gt;&lt;/a&gt;图文详解 :&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>几种经典的排序算法会慢慢总结，今天先总结一下快速排序算法。</p><h2 id="【图文详解】快速排序算法及Java实现"><a href="#【图文详解】快速排序算法及Java实现" class="headerlink" title="【图文详解】快速排序算法及Java实现"></a>【图文详解】快速排序算法及Java实现</h2><h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>采用“分治”的思想，对于一组数据，选择一个基准元素（base），通常选择第一个或最后一个元素，通过第一轮扫描，比base小的元素都在base左边，比base大的元素都在base右边，再有同样的方法递归排序这两部分，直到序列中所有数据均有序为止。</p><h3 id="图文详解"><a href="#图文详解" class="headerlink" title="图文详解 :"></a>图文详解 :</h3><a id="more"></a><p>以 <strong>[3,4,6,1,2,4,7]</strong> 为例，以第一个元素<strong>3</strong>为base，定义左右两个指针（小熊<strong>l</strong>，小熊<strong>r</strong>），分别从两端开始扫描。从右向左找比<strong>3</strong>小的数，替换<strong>l</strong>所在位置的元素。再从左往右找比<strong>3</strong>大的数，然后替换r所在位置的元素。重复此过程直至两个小熊重合（两个指针指向同一元素），base替换此元素，此时第一轮结束。再递归排序base左右两部分的元素。</p><p>刚开始的时候让🐻<strong>l</strong> 指向序列的最左边，指向数字<strong>3</strong>。让🐻<strong>r</strong> 指向序列的最右边，指向数字 <strong>7</strong>。</p><p><img src="/images/qs1.jpg"></p><p>首先🐻<strong>r</strong>出动，一步步向左移，直到找到比base小的数停下来，替换此时🐻<strong>l</strong>所在位置的元素</p><p><img src="/images/qs2.jpg"></p><p>替换后的序列为 <strong>[2,4,6,1,2,4,7]</strong></p><p><img src="/images/qs3.jpg"></p><p>🐻<strong>l</strong>出动，向右移直到找到比base大的数停下来，替换此时🐻<strong>r</strong>所在位置的元素</p><p><img src="/images/qs4.jpg"></p><p>替换后的序列为 [2,4,6,1,4,4,7]，🐻r再次出动，重复上述步骤</p><p><img src="/images/qs5.jpg"></p><p>比base小，替换🐻<strong>l</strong>所在位置的元素</p><p><img src="/images/qs6.jpg"></p><p>替换后的序列为[2,1,6,1,4,4,7]，🐻l再次出动</p><p><img src="/images/qs7.jpg"></p><p>比base大，替换🐻<strong>r</strong>所在位置的元素</p><p><img src="/images/qs8.jpg"></p><p>替换后的序列为[2,1,6,6,4,4,7]，🐻r再次出动</p><p><img src="/images/qs9.jpg"></p><p>此时🐻<strong>l</strong>、🐻<strong>r</strong>指向同一元素</p><p><img src="/images/qs10.jpg"></p><p>base替换此元素</p><p><img src="/images/qs11.jpg"></p><p>第一轮扫描完成，序列为 [2,1,3,6,4,4,7]，此时base(3)左边的元素都比它小，右边的元素都比它大，再对这两部分进行上述操作。</p><p><img src="/images/qs12.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现 :"></a>代码实现 :</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组有多个元素进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> base = nums[start];<span class="comment">//以要进行排序数组第0个元素为base</span></span><br><span class="line">        <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">        <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//从右向左找，比base大，right--</span></span><br><span class="line">            <span class="keyword">while</span> (left&lt; right &amp;&amp; nums[right] &gt;= base) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base小，替换left所在位置的数字</span></span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            <span class="comment">//从左向右找，比base小，left++</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= base)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比base大，替换right所在位置的数字</span></span><br><span class="line">            nums[right] = nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[left] = base;<span class="comment">//此时left=right，用base替换这个位置的数字</span></span><br><span class="line">        <span class="comment">//排列比base小的数字的数组</span></span><br><span class="line">        quickSort(nums, start, left - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//排列比base大的数字的数组</span></span><br><span class="line">        quickSort(nums, left + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      
      <category domain="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">排序算法</category>
      
      
      <comments>http://example.com/2020/11/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二维数组</title>
      <link>http://example.com/2020/10/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <guid>http://example.com/2020/10/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Sat, 31 Oct 2020 14:23:37 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;二维数组&quot;&gt;&lt;a href=&quot;#二维数组&quot; class=&quot;headerlink&quot; title=&quot;二维数组&quot;&gt;&lt;/a&gt;二维数组&lt;/h2&gt;&lt;p&gt;最近做题总涉及到二维数组，觉得掌握还不熟悉，再复习一下。&lt;/p&gt;
&lt;h3 id=&quot;二维数组的创建&quot;&gt;&lt;a href=&quot;#二维数组的创建&quot; class=&quot;headerlink&quot; title=&quot;二维数组的创建&quot;&gt;&lt;/a&gt;二维数组的创建&lt;/h3&gt;&lt;p&gt;在Java中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。声明二维数组的语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type array[][];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，type 表示二维数组的类型，array 表示数组名称，第一个中括号表示行，第二个中括号表示列。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>最近做题总涉及到二维数组，觉得掌握还不熟悉，再复习一下。</p><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p>在Java中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。声明二维数组的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type array[][];</span><br></pre></td></tr></table></figure><p>其中，type 表示二维数组的类型，array 表示数组名称，第一个中括号表示行，第二个中括号表示列。</p><a id="more"></a><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><ul><li><p>第一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">ints[i][j] =__; <span class="comment">//分别赋值</span></span><br></pre></td></tr></table></figure></li><li><p>第三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> a[ ][ ] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][ ]；</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取单个元素"><a href="#获取单个元素" class="headerlink" title="获取单个元素"></a>获取单个元素</h3><p>当需要获取二维数组中元素的值时，也可以使用下标来表示。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><ul><li><p>第一种：双重for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rows = matrix.length;</span><br><span class="line"><span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">       System.out.println(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种：增强for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] i : matrix)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j : i)&#123;</span><br><span class="line">       System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaSE/">JavaSE</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/">二维数组</category>
      
      
      <comments>http://example.com/2020/10/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo攻略-设置分页与显示文章数</title>
      <link>http://example.com/2020/10/29/Hexo%E6%94%BB%E7%95%A5-%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E4%B8%8E%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0/</link>
      <guid>http://example.com/2020/10/29/Hexo%E6%94%BB%E7%95%A5-%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E4%B8%8E%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0/</guid>
      <pubDate>Thu, 29 Oct 2020 07:38:25 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Hexo攻略-设置分页与显示文章数&quot;&gt;&lt;a href=&quot;#Hexo攻略-设置分页与显示文章数&quot; class=&quot;headerlink&quot; title=&quot;Hexo攻略-设置分页与显示文章数&quot;&gt;&lt;/a&gt;Hexo攻略-设置分页与显示文章数&lt;/h2&gt;&lt;p&gt;使用next主题下，默认首页、分类、标签页都是显示10个文章，想进行分页和设置显示文章数。按照以下步骤操作~&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Hexo攻略-设置分页与显示文章数"><a href="#Hexo攻略-设置分页与显示文章数" class="headerlink" title="Hexo攻略-设置分页与显示文章数"></a>Hexo攻略-设置分页与显示文章数</h2><p>使用next主题下，默认首页、分类、标签页都是显示10个文章，想进行分页和设置显示文章数。按照以下步骤操作~</p><a id="more"></a><ul><li><p>在Git Bash下安装插件</p><blockquote><p>$ npm  install hexo-generator-index –save</p></blockquote><blockquote><p>$ npm install hexo-generator-archive – save</p></blockquote><blockquote><p>$ npm install hexo-generator-tag –save</p></blockquote></li><li><p>在主题配置文件<code>_config.yml</code>中修改</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line"># For more information: https:&#x2F;&#x2F;www.algolia.com</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 5</span><br><span class="line"></span><br><span class="line">#主页每页显示文章数</span><br><span class="line">index_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#archive分页每页显示文章数</span><br><span class="line">archive_generator:</span><br><span class="line">    per_page: 5</span><br><span class="line">#tag分页每页显示文章数</span><br><span class="line">tag_generator:</span><br><span class="line">    per_page: 10</span><br><span class="line">#category分页每页显示文章数</span><br><span class="line">category_generator: </span><br><span class="line">    per_page: 10</span><br></pre></td></tr></table></figure><p>按照以上步骤操作，保证一次就能修改好啦！</p><p>实现分页效果如图</p><p><img src="/images/%E5%88%86%E9%A1%B5.PNG"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Hexo%E6%94%BB%E7%95%A5/">Hexo攻略</category>
      
      
      
      <comments>http://example.com/2020/10/29/Hexo%E6%94%BB%E7%95%A5-%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E4%B8%8E%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java实现单链表与循环链表</title>
      <link>http://example.com/2020/10/29/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <guid>http://example.com/2020/10/29/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Thu, 29 Oct 2020 06:06:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;链表的引入&quot;&gt;&lt;a href=&quot;#链表的引入&quot; class=&quot;headerlink&quot; title=&quot;链表的引入&quot;&gt;&lt;/a&gt;链表的引入&lt;/h2&gt;&lt;h3 id=&quot;数组和链表的对比&quot;&gt;&lt;a href=&quot;#数组和链表的对比&quot; class=&quot;headerlink&quot; title=&quot;数组和链表的对比&quot;&gt;&lt;/a&gt;数组和链表的对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组：&lt;/p&gt;
&lt;p&gt;访问数组时，其实是利用指针，即内存地址，直接访问对应内存地址中的数值，所以访问速度非常快。查找复杂度：&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="链表的引入"><a href="#链表的引入" class="headerlink" title="链表的引入"></a>链表的引入</h2><h3 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h3><ul><li><p>数组：</p><p>访问数组时，其实是利用指针，即内存地址，直接访问对应内存地址中的数值，所以访问速度非常快。查找复杂度：<strong>O(1)</strong></p><a id="more"></a><p>添加元素时，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。删除一个元素，同样需要移动大量元素去填掉被移动的元素。添加/删除元素的时间复杂度： <strong>O(n)</strong></p></li><li><p>链表：</p><p>链表与数组相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。第一个元素指向第二个，以此类推直到最后一个元素。所以查找链表中某一个元素就要从第一个元素开始找，一直到找到需要的元素。 查找复杂度：<strong>O(n)</strong></p><p>但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改相应位置前后元素中的指针就可以了。复杂度：<strong>O(1)</strong></p><p>添加node：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.next = pre.next;</span><br><span class="line">pre.next = node;</span><br></pre></td></tr></table></figure><p>删除node：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre.next = node.next;</span><br></pre></td></tr></table></figure></li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>​        单向链表是一种线性表，实际上是由节点（Node）组成的，一个链表拥有不定数量的节点。head为头节点，他不存放任何的数据，只是充当一个指向链表中真正存放数据的第一个节点的作用，而每个节点中都有一个next引用，指向下一个节点，就这样一节一节往下面记录，直到最后一个节点，其中的next指向null。</p><p><img src="/images/%E9%93%BE%E8%A1%A81.png"></p><p>代码实现（已定义<code>Node head</code>）</p><ul><li><p>其他功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取链表长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;<span class="comment">//从头遍历找</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getLength(); i++, temp = temp.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == index)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *判断链表是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *打印链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(temp.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.next = node;</span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> l = getLength();</span><br><span class="line">    l++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *在指定位置插入节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        head = node;</span><br><span class="line">        node.next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1 2 3 4 ,length=4</span></span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="number">0</span> &amp;&amp; index &lt; length - <span class="number">1</span>)&#123;</span><br><span class="line">        Node pre = getNode(index - <span class="number">1</span>);</span><br><span class="line">        node.next = pre.next;</span><br><span class="line">        pre.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除指定位置的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt;= getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除头节点</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(index == getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        Node newEndNode = getNode(getLength() - <span class="number">2</span>);</span><br><span class="line">        newEndNode.next = getNode(index).next;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除指定位置</span></span><br><span class="line">    <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != getLength() - <span class="number">1</span>)&#123;</span><br><span class="line">        getNode(index - <span class="number">1</span>).next = getNode(index + <span class="number">1</span>);</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>单链表的尾结点指向 NULL，而循环链表的尾结点指向头结点，构成环状。</p><p><img src="/images/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.PNG"></p><p>代码实现：</p><ul><li><p>其他功能:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNodeByIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从头节点开始遍历链表查找</span></span><br><span class="line">        Node curr = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;length; i++,curr = curr.next)</span><br><span class="line">            <span class="keyword">if</span> (i == index)</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定位置元素的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到此元素！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getNodeByIndex(index).val;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表全部节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             Node temp = head;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                 System.out.print(temp.val+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                 temp = temp.next;</span><br><span class="line">             &#125;</span><br><span class="line">             System.out.println(getVal(length - <span class="number">1</span>));</span><br><span class="line">             System.out.println(<span class="string">&quot;length = &quot;</span>+length);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li><li><p>添加节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">add</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node temp = head;</span><br><span class="line">            <span class="comment">//head后还有节点，继续向后</span></span><br><span class="line">            <span class="keyword">while</span>(temp.next != head)&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到目前最后一个元素，它指向head。在它后面插入node</span></span><br><span class="line">            temp.next = node;</span><br><span class="line">            node.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定位置添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node newNode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index = 0,将newNode设为头节点</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将newNode插入到链表中，先获取前一个和后一个节点</span></span><br><span class="line">            Node pre = getNodeByIndex(index - <span class="number">1</span>);</span><br><span class="line">            newNode.next = pre.next;</span><br><span class="line">            pre.next = newNode;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            getNodeByIndex(length - <span class="number">1</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除尾节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表中只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(length - <span class="number">2</span>).next = head;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定位置节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Wang Rui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/10/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> &amp;&amp; index &gt;= length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到该删除元素！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != <span class="number">0</span> &amp;&amp; index != length -<span class="number">1</span>)&#123;</span><br><span class="line">            getNodeByIndex(index - <span class="number">1</span>).next = getNodeByIndex(index + <span class="number">1</span>);</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>summary: 原理大概都懂，代码实现上有些细节要注意。讨论头节点是否为null；给定某个位置index，讨论index是否在合理范围内。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      
      <category domain="http://example.com/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      
      <comments>http://example.com/2020/10/29/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo攻略-更换网页图标</title>
      <link>http://example.com/2020/10/28/Hexo%E6%94%BB%E7%95%A5-%E6%9B%B4%E6%8D%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E6%A0%87/</link>
      <guid>http://example.com/2020/10/28/Hexo%E6%94%BB%E7%95%A5-%E6%9B%B4%E6%8D%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E6%A0%87/</guid>
      <pubDate>Wed, 28 Oct 2020 12:23:22 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Hexo攻略—更改网页图标&quot;&gt;&lt;a href=&quot;#Hexo攻略—更改网页图标&quot; class=&quot;headerlink&quot; title=&quot;Hexo攻略—更改网页图标&quot;&gt;&lt;/a&gt;Hexo攻略—更改网页图标&lt;/h2&gt;&lt;p&gt;Hexo next主题默认的网页图标长这个样子~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/icon1.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然要和别人不一样！&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Hexo攻略—更改网页图标"><a href="#Hexo攻略—更改网页图标" class="headerlink" title="Hexo攻略—更改网页图标"></a>Hexo攻略—更改网页图标</h2><p>Hexo next主题默认的网页图标长这个样子~</p><p><img src="/images/icon1.PNG"></p><p>当然要和别人不一样！</p><a id="more"></a><h4 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h4><p>自己也可以绘制，懒得话就去下载，到<a href="https://www.easyicon.net/">这里</a>进行下载，<code>ico</code>文件和<code>png</code>都可以，我下载的是<code>ico</code></p><h4 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h4><p>下载的图标重命名为<code>favicon.ico</code>，位置放在<code>/themes/next/source/images</code></p><h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>在<code>/themes/next/_config.yml</code>中修改成自己的图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  #medium: &#x2F;images&#x2F;favicon-32x32-next.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon.ico</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line">  #android_manifest: &#x2F;manifest.json</span><br></pre></td></tr></table></figure><p>进入测试上传就好啦~</p><p>效果图<img src="/images/icon2.PNG"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Hexo%E6%94%BB%E7%95%A5/">Hexo攻略</category>
      
      
      
      <comments>http://example.com/2020/10/28/Hexo%E6%94%BB%E7%95%A5-%E6%9B%B4%E6%8D%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E6%A0%87/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>深度优先遍历</title>
      <link>http://example.com/2020/10/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</link>
      <guid>http://example.com/2020/10/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</guid>
      <pubDate>Wed, 28 Oct 2020 07:18:32 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;深度优先遍历&quot;&gt;&lt;a href=&quot;#深度优先遍历&quot; class=&quot;headerlink&quot; title=&quot;深度优先遍历&quot;&gt;&lt;/a&gt;深度优先遍历&lt;/h2&gt;&lt;h3 id=&quot;思想：&quot;&gt;&lt;a href=&quot;#思想：&quot; class=&quot;headerlink&quot; title=&quot;思想：&quot;&gt;&lt;/a&gt;思想：&lt;/h3&gt;&lt;p&gt;对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。</p><a id="more"></a><h3 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h3><p>二叉树的深度优先遍历分为前序遍历，中序遍历和后续遍历。</p><ul><li>前序遍历：先访问根，在访问左子树，最后访问右子树，总结就是“根左右”；</li><li>中序遍历：先访问左子树，再访问根，最后访问右子树，总结就是“左根右”；</li><li>后序遍历：先访问左子树，再访问右子树，最后访问根，总结就是“左右根”；</li></ul><p>通常采用<strong>递归</strong>的方式实现遍历，非递归方式需要结合<strong>栈</strong>（后进先出）的特点实现。</p><p>以前序遍历为例：</p><h4 id="1-非递归方式实现（栈）"><a href="#1-非递归方式实现（栈）" class="headerlink" title="1. 非递归方式实现（栈）"></a>1. 非递归方式实现（栈）</h4><p><img src="/images/dfs1.PNG"></p><p>1.1 二叉树结构定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.2 创建上图的树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">initTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode node1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">    TreeNode node2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">    TreeNode node3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">    TreeNode node4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">    TreeNode node5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">    TreeNode node6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">    TreeNode node7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">    TreeNode node8 = <span class="keyword">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line">    TreeNode node9 = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    node1.left = node2;</span><br><span class="line">    node1.right = node3;</span><br><span class="line">    node2.left = node4;</span><br><span class="line">    node2.right = node5;</span><br><span class="line">    node3.left = node6;</span><br><span class="line">    node3.right = node7;</span><br><span class="line">    node5.right = node8;</span><br><span class="line">    node7.left = node9;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3 非递归方式实现dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//栈先进后出，先将右子节点压入栈</span></span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.4 测试及结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        dfs(initTree());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/dfs2.PNG"></p><h4 id="2-递归方式实现"><a href="#2-递归方式实现" class="headerlink" title="2.递归方式实现"></a>2.递归方式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h3><p>同样有两种实现方式：递归和非递归。</p><p>递归好理解一点，非递归还没摸透，等弄懂了再来填坑~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从第i个节点开始深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 标记第i个节点已遍历</span></span><br><span class="line">    vertex[i].visited = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 打印当前遍历的节点</span></span><br><span class="line">    System.out.println(vertex[i].getValue());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历邻接矩阵中第i个节点的直接联通关系</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; vertex.length;j++)&#123;</span><br><span class="line">        <span class="comment">// 目标节点与当前节点直接联通，并且该节点还没有被访问，递归</span></span><br><span class="line">        <span class="keyword">if</span>(adjMat[i][j]==<span class="number">1</span> &amp;&amp; vertex[j].visited==<span class="keyword">false</span>)&#123;</span><br><span class="line">            traverse(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图的深度优先遍历（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点遍历标记</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex.length; i++) &#123;</span><br><span class="line">        vertex[i].visited = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从没有被遍历的节点开始深度遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; vertex.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vertex[i].visited == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">// 若是连通图，只会执行一次</span></span><br><span class="line">            traverse(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      
      
      <comments>http://example.com/2020/10/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo攻略-添加分类</title>
      <link>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</link>
      <guid>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</guid>
      <pubDate>Tue, 27 Oct 2020 07:22:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Hexo攻略-添加分类&quot;&gt;&lt;a href=&quot;#Hexo攻略-添加分类&quot; class=&quot;headerlink&quot; title=&quot;Hexo攻略-添加分类&quot;&gt;&lt;/a&gt;Hexo攻略-添加分类&lt;/h2&gt;&lt;h3 id=&quot;1-创建“分类”选项&quot;&gt;&lt;a href=&quot;#1-创建“分类”选项&quot; class=&quot;headerlink&quot; title=&quot;1.创建“分类”选项&quot;&gt;&lt;/a&gt;1.创建“分类”选项&lt;/h3&gt;&lt;p&gt;在命令窗口输入下方命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; hexo new page categories&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Hexo攻略-添加分类"><a href="#Hexo攻略-添加分类" class="headerlink" title="Hexo攻略-添加分类"></a>Hexo攻略-添加分类</h2><h3 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h3><p>在命令窗口输入下方命令</p><blockquote><p> hexo new page categories</p></blockquote><a id="more"></a><p>/source/categories文件夹下会有index.md文件，打开后内容默认为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-10-26 19:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: categories到内容中，添加后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="2-新建文章并添加“categories”属性"><a href="#2-新建文章并添加“categories”属性" class="headerlink" title="2.新建文章并添加“categories”属性"></a>2.新建文章并添加“categories”属性</h3><p>在命令行输入下方命令创建新文章</p><blockquote><p>hexo n “新文章名称”  </p></blockquote><p>在/source/_posts下自动生成.md文件，打开为其添加categories属性。下方的categories:Hexo攻略，表示这篇文章添加到到“Hexo攻略”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo攻略-添加分类及标签</span><br><span class="line">date: 2020-10-27 15:22:42</span><br><span class="line">categories: Hexo攻略</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”即可看到该分类下的所有文章。效果如图。</p><p><img src="/images/cate.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Hexo%E6%94%BB%E7%95%A5/">Hexo攻略</category>
      
      
      
      <comments>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java的值传递机制</title>
      <link>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</link>
      <guid>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Tue, 27 Oct 2020 05:56:47 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;Java中方法的值传递方式只有一种：值传递。&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>Java中方法的值传递方式只有一种：值传递。</strong></p><a id="more"></a><p>值传递机制：</p><ul><li>如果参数是基本数据类型，此时实参赋给形参的是<strong>实参真实存储的数据值</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;排序前：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);</span><br><span class="line">     valueTransferTest t=<span class="keyword">new</span> valueTransferTest();</span><br><span class="line">     t.swap(a,b);</span><br><span class="line">     System.out.println(<span class="string">&quot;排序后：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);<span class="comment">//a = 10,b = 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp=m;</span><br><span class="line">     m=n;</span><br><span class="line">     n=temp;</span><br><span class="line">     <span class="comment">// System.out.println(&quot;m=&quot;+m+&quot;,n=&quot;+n);//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实参a,b将值传给形参，排序后a,b的值未发生改变，对实参值没有影响。</p><p>内存中</p><p><img src="/images/image_1.jpg"></p><ul><li>如果参数是引用数据类型，此时实参赋给形参的是<strong>实参存储数据的地址值</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> Data data = <span class="keyword">new</span> Data();</span><br><span class="line"></span><br><span class="line"> data.m = <span class="number">10</span>; data.n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 10, n = 20</span></span><br><span class="line"> swap(data);</span><br><span class="line">     System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> temp = data.m;</span><br><span class="line"> data.m = data.n;</span><br><span class="line"> data.n = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存中显示</p><p><img src="/images/image_2.jpg"></p><p>参数保存的是实际对象的地址值，改变的只是地址值指向的堆内存中的实际对象，<strong>并没有真正改变参数</strong>，<strong>参数的地址值没有变</strong>。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java/">Java</category>
      
      
      <category domain="http://example.com/tags/JavaSE/">JavaSE</category>
      
      
      <comments>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
