<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Thu, 18 Feb 2021 14:17:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>易错！！String类与常量池</title>
      <link>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <guid>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <pubDate>Thu, 18 Feb 2021 14:16:02 GMT</pubDate>
      
      <description>&lt;p&gt;一、String对象有两种创建方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种方法是有差别的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一、String对象有两种创建方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>两种方法是有差别的。</p><a id="more"></a><ul><li>第一种方式是在<strong>常量池中取对象</strong>：先检查字符串常量池中有没有&quot;a&quot;，如果字符串常量池中没有，则创建一个，然后 str1 指向字符串常量池中的对象，如果有，则直接将 str1 指向&quot;a&quot;；</li><li>第二种方式是直接在<strong>堆内存空间创建</strong>一个新的对象。</li></ul><p>再如： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str3 = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure> str1 与 str3 都指向常量池中的 “a”，而 str2 指向堆中新创建的 “a”。 <img src="https://img-blog.csdnimg.cn/20210218215326378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 记住一点：只要<strong>使用 new 方法，便需要创建新的对象。</strong></p><p>二、String 类型的常量池的使用： - 直接使用双引号声明出来的 String 对象会直接存储在常量池中。 - 如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。 String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中<strong>已经包含一个等于此 String 对象内容的字符串</strong>，则返回常量池中该字符串的引用；如果没有，JDK1.7之前（不包含1.7）的处理方式是在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7以及之后的处理方式是<strong>在常量池中记录此字符串的引用</strong>，<strong>并返回</strong>该引用。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;计算机&quot;</span>);<span class="comment">//堆</span></span><br><span class="line">String s2 = s1.intern();<span class="comment">//常量池</span></span><br><span class="line">String s3 = <span class="string">&quot;计算机&quot;</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的 String 对象一个是常量池中的 String 对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的 String 对象</span></span><br></pre></td></tr></table></figure> 三、一个小问题</p><p><code>String str = new String(&quot;abc&quot;);</code> 这句话创建了几个字符串对象？ 答：1 或 2 个。如果常量池中已有 “abc”，只在堆空间创建一个 “abc”；如果常量池中没有 “abc”，将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 堆内存的地址值</span></span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">// 输出 true，内容相同</span></span><br></pre></td></tr></table></figure> 四、字符串拼接</p><p>常量池中的对象可以直接拼接成一个新的字符串。两个字符串拼接的结果在堆中。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">String str4 = str1 + str2; <span class="comment">//在堆上创建的新的对象      </span></span><br><span class="line">String str5 = <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure> <img src="https://img-blog.csdnimg.cn/20210218221413161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>五、扩展：Integer 类 与 常量池</p><p>Integer 类默认创建数值[-128，127] 的相应类型的缓存数据。 1. <code>Integer i1=40；</code> Java 在编译的时候会直接将代码封装成 <code>Integer i1=Integer.valueOf(40);</code>，从而使用常量池中的对象。 2. <code>Integer i1 = new Integer(40);</code> 这种情况下会创建新的对象。</p><p>一个例子: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2   &quot;</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2+i3   &quot;</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i4   &quot;</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5   &quot;</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5+i6   &quot;</span> + (i4 == i5 + i6));   </span><br><span class="line">System.out.println(<span class="string">&quot;40=i5+i6   &quot;</span> + (<span class="number">40</span> == i5 + i6));     </span><br></pre></td></tr></table></figure> 结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i1&#x3D;i2   true</span><br><span class="line">i1&#x3D;i2+i3   true</span><br><span class="line">i1&#x3D;i4   false</span><br><span class="line">i4&#x3D;i5   false</span><br><span class="line">i4&#x3D;i5+i6   true</span><br><span class="line">40&#x3D;i5+i6   true</span><br></pre></td></tr></table></figure> 解释：</p><p>语句 i4 == i5 + i6，因为 + 这个操作符不适用于 Integer 对象，首先 i5 和 i6 进行<strong>自动拆箱</strong>操作，进行数值相加，即 i4 == 40。然后 <strong>Integer 对象无法与数值进行直接比较</strong>，所以 i4 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/JVM/">JVM</category>
      
      
      <comments>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—双指针解数组排序</title>
      <link>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</link>
      <guid>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</guid>
      <pubDate>Wed, 17 Feb 2021 03:01:57 GMT</pubDate>
      
      <description>&lt;h5 id=&quot;前言&quot;&gt;前言&lt;/h5&gt;
&lt;p&gt;双指针分为快慢指针（向一个方向遍历）和左右指针（从两个方向相对遍历）， 在进行数组排序时常用到第一种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指针 j 用于探路，找到目标元素&lt;/strong&gt;与指针 i 所指元素交换，并将 i 向前一步，继续。&lt;/p&gt;
&lt;h5 id=&quot;模板&quot;&gt;模板&lt;/h5&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h5 id="前言">前言</h5><p>双指针分为快慢指针（向一个方向遍历）和左右指针（从两个方向相对遍历）， 在进行数组排序时常用到第一种。</p><p><strong>指针 j 用于探路，找到目标元素</strong>与指针 i 所指元素交换，并将 i 向前一步，继续。</p><h5 id="模板">模板</h5><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sortArrayByParity(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">    <span class="comment">//j 指针探路</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(找到目标元素)&#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                swap(A, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="按奇偶排序数组easy">905，按奇偶排序数组，easy</h5><p>给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。</p><p>你可以返回满足此条件的任何数组作为答案。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">（输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。）</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题目标是用 指针j 找到偶数元素，将偶数元素往前提。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArrayByParity(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="comment">//找到偶数元素</span></span><br><span class="line">            <span class="keyword">if</span>(A[j] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                swap(A, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="移动-0easy">283，移动 0，easy</h5><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题目标是用 指针j 找到非 0 元素，将非 0 元素往前提。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">            <span class="comment">//找到非 0 元素</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="颜色分类medium">75，颜色分类，medium</h5><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与前两题不同在 需要两次交换，先用 指针j 找到 0，将 0 往前提。</p><p>再将 j 定于此位置，继续找 1，将 1 往前提。</p><p>过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20210217113417103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" /></p><p><a href="https://pic.leetcode-cn.com/4ff01311844f58b83124a449e24857e9d02fd6c04067e9551fda6bccbe59b87e-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%94%B9%E5%8F%98.gif">动画演示</a></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="comment">//第一步：将 0 往前提</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二步：将 1 往前提</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] == <span class="number">1</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/">双指针</category>
      
      
      <comments>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—岛屿问题</title>
      <link>http://example.com/2021/02/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/02/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Tue, 16 Feb 2021 09:48:47 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个二维矩阵从某个点开始向四周扩展，直到无法再扩展为止。&lt;/p&gt;
&lt;p&gt;矩阵，可以抽象为一幅「图」，这就是⼀个图的遍历问题，也就类似⼀个 N 叉树遍历的问题。几行代码就能解决，直接上框架吧：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>思路</strong></p><p>一个二维矩阵从某个点开始向四周扩展，直到无法再扩展为止。</p><p>矩阵，可以抽象为一幅「图」，这就是⼀个图的遍历问题，也就类似⼀个 N 叉树遍历的问题。几行代码就能解决，直接上框架吧：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (x, y) 为坐标位置 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">fill(x - <span class="number">1</span>, y); <span class="comment">// 上 </span></span><br><span class="line"></span><br><span class="line">fill(x + <span class="number">1</span>, y); <span class="comment">// 下 </span></span><br><span class="line"></span><br><span class="line">fill(x, y - <span class="number">1</span>); <span class="comment">// 左 </span></span><br><span class="line"></span><br><span class="line">fill(x, y + <span class="number">1</span>); <span class="comment">// 右 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个框架可以解决所有在二维矩阵中遍历的问题，说得高端点，这就叫深度优先搜索（Depth First Search，简称 <strong>DFS</strong>），说得简单点，这就叫四叉树遍历框架。坐标 (x, y) 就是 root，四个方向就是 root 的四个子节点。</p><p><strong>DFS模板</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(参数)</span></span>&#123;</span><br><span class="line"><span class="comment">//dfs出口，不满足条件就退出</span></span><br><span class="line"><span class="keyword">if</span>(结束条件)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;    </span><br><span class="line">    操作</span><br><span class="line"><span class="comment">//递归，接着进一步DFS</span></span><br><span class="line">    dfs(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图像渲染easy">733，图像渲染，easy</h5><p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p><p>给你一个坐标 <code>(sr, sc)</code> 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 <code>newColor</code>，让你重新上色这幅图像。</p><p>从初始坐标开始，记录初始坐标的<u>上下左右</u>四个方向上像素值<u>与初始坐标相同</u>的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。<u>将所有有记录的像素点的颜色值改为新的颜色值</u>。</p><p>最后返回经过上色渲染后的图像。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">image &#x3D; [[1,1,1],[1,1,0],[1,0,1]]</span><br><span class="line">sr &#x3D; 1, sc &#x3D; 1, newColor &#x3D; 2</span><br><span class="line">输出: [[2,2,2],[2,2,0],[2,0,1]]</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20210216174746701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解析: </span><br><span class="line">在图像的正中间，(坐标(sr,sc)&#x3D;(1,1)),</span><br><span class="line">在路径上所有符合条件的像素点的颜色都被更改成2。</span><br><span class="line">注意，右下角的像素没有更改为2，</span><br><span class="line">因为它不是在上下左右四个方向上与初始点相连的像素点。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>从起始点开始，搜索四个方向</p><ul><li><p>如果这个方向越界且不需要渲染，结束搜索。</p></li><li><p>否则，继续从这个方向搜索它的上下左右。</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;      </span><br><span class="line">        <span class="comment">//如果新颜色与原来相同，不需更改</span></span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == newColor) <span class="keyword">return</span> image;</span><br><span class="line">        </span><br><span class="line">        dfs(image, sr, sc, newColor, image[sr][sc]);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor, <span class="keyword">int</span> oldColor)</span></span>&#123;</span><br><span class="line">        <span class="comment">//出口：不在合法范围内 或 此位置与初始颜色不同</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidArea(image, sr, sc) || image[sr][sc] != oldColor) </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line">        image[sr][sc] = newColor;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        dfs(image, sr - <span class="number">1</span>, sc, newColor, oldColor);</span><br><span class="line">        dfs(image, sr + <span class="number">1</span>, sc, newColor, oldColor);</span><br><span class="line">        dfs(image, sr, sc - <span class="number">1</span>, newColor, oldColor);</span><br><span class="line">        dfs(image, sr, sc + <span class="number">1</span>, newColor, oldColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合法：不处于边界之外</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidArea</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="岛屿数量medium">200，岛屿数量，medium</h5><p>给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>本题的目标是得到“岛屿数量”，上下左右相连的 <code>1</code> 都被认为是连续岛屿。</p><p>总体思路：遍历地图，找到一个陆地（' 1 '），采用 dfs 向 上下左右 四个方向搜索，同时“岛屿数量” + 1。</p><p>dfs 流程：</p><ul><li><p>结束条件：不在合法范围内 或 不是陆地</p></li><li><p>操作：避免重复遍历，网格的dfs 会重复向四个方向找，可能重复遍历节点。</p><pre><code>         将已遍历过的陆地标记为 &#39;2&#39;</code></pre></li><li><p>递归：搜索上下左右的节点</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    dfs(grid, i, j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从 一个陆地 ‘1’向四个方向遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isValidArea(grid, r, c) || grid[r][c] != <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//标记已遍历过的陆地</span></span><br><span class="line">        grid[r][c] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        dfs(grid, r - <span class="number">1</span>, c);</span><br><span class="line">        dfs(grid, r + <span class="number">1</span>, c);</span><br><span class="line">        dfs(grid, r, c - <span class="number">1</span>);</span><br><span class="line">        dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidArea</span><span class="params">(<span class="keyword">char</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="岛屿的最大面积medium">695，岛屿的最大面积，medium</h5><p>给定一个包含了一些 0 和 1 的非空二维数组 grid 。</p><p>一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p><p>找到给定的二维数组中<strong>最大的岛屿面积</strong>。(如果没有岛屿，则返回面积为 0 。)</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class="line">对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>和上面思路一致，根据题目对结果进行修改。</p><p>题目目标是得到最大岛屿面积，在 dfs 过程中求出每个岛屿的面积，在主函数中得到最大的一个。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> a = dfs(grid, i, j);</span><br><span class="line">                    res = Math.max(a, res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> r ,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isValidArea(grid, r, c) || grid[r][c] != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//标记已遍历过的陆地</span></span><br><span class="line">        grid[r][c] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(grid, r - <span class="number">1</span>, c) + dfs(grid, r + <span class="number">1</span>, c) + dfs(grid, r, c - <span class="number">1</span>) + dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidArea</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="岛屿的周长easy">463，岛屿的周长，easy</h5><p>给定一个 row x col 的二维网格地图 grid ，其中：grid[i][j] = 1 表示陆地， grid[i][j] = 0 表示水域。</p><p>网格中的格子 水平和垂直 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p><p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p><p>示例 1：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/6fd1a8c57dc7f3800628577ad6fc650f.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]</span><br><span class="line">输出：16</span><br><span class="line">解释：它的周长是上面图片中的 16 个黄色的边</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>岛屿的周长是计算岛屿全部的「边缘」，而这些边缘就是我们在 DFS 遍历中，dfs 函数返回的位置。</p><p>可以将岛屿的周长中的边分为两类，如下图所示。黄色的边是与网格边界相邻的周长，而蓝色的边是与海洋格子相邻的周长。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/e84efa198ef108951ef340cc712e5aa0.png" alt="将岛屿周长中的边分为两类" /><figcaption>将岛屿周长中的边分为两类</figcaption></figure><p>dfs 函数直接返回有这几种情况：</p><ul><li><code>!inArea(grid, r, c)</code>，即坐标 (r, c) 超出了网格的范围，也就是「先污染后治理」的情况</li><li><code>grid[r][c] != 1</code>，即当前格子不是岛屿格子，这又分为两种情况：<ul><li><code>grid[r][c] == 0</code>，当前格子是海洋格子</li><li><code>grid[r][c] == 2</code>，当前格子是已遍历的陆地格子</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                   <span class="keyword">return</span> dfs(grid, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从 一个陆地 ‘1’向四个方向遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="comment">//蓝色边界</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidArea(grid, r, c)) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//黄色边界</span></span><br><span class="line">        <span class="keyword">if</span>(grid[r][c] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前格子是已遍历的陆地格子,和周长没关系</span></span><br><span class="line">        <span class="keyword">if</span>(grid[r][c] != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//标记已遍历过的陆地</span></span><br><span class="line">        grid[r][c] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(grid, r - <span class="number">1</span>, c) + dfs(grid, r + <span class="number">1</span>, c) + dfs(grid, r, c - <span class="number">1</span>) + dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidArea</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更简单的写法：遍历每一个空格，遇到岛屿，计算其上下左右的情况，遇到水域或者出界的情况，就可以计算边了。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] directions = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//4个方向</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> r = i + directions[k][<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> c = j + directions[k][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= grid.length || c &lt; <span class="number">0</span> || c &gt;= grid[<span class="number">0</span>].length || grid[r][c] == <span class="number">0</span>) res++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/dfs/">dfs</category>
      
      
      <comments>http://example.com/2021/02/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—回溯算法</title>
      <link>http://example.com/2021/02/15/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <guid>http://example.com/2021/02/15/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Mon, 15 Feb 2021 08:10:05 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;回溯算法&quot;&gt;回溯算法&lt;/h2&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;「回溯是递归的副产品，只要有递归就会有回溯」&lt;/strong&gt;，所以回溯法也经常和二叉树遍历，深度优先遍历（&lt;span class=&quot;math inline&quot;&gt;\(dfs\)&lt;/span&gt;）混在一起，因为这两种方式都是用了递归。&lt;/p&gt;
&lt;p&gt;回溯法就是暴力搜索，优化回溯算法只有&lt;strong&gt;「剪枝」&lt;/strong&gt;一种方法。&lt;/p&gt;
&lt;p&gt;回溯算法能解决如下问题：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="回溯算法">回溯算法</h2><h3 id="前言">前言</h3><p><strong>「回溯是递归的副产品，只要有递归就会有回溯」</strong>，所以回溯法也经常和二叉树遍历，深度优先遍历（<span class="math inline">\(dfs\)</span>）混在一起，因为这两种方式都是用了递归。</p><p>回溯法就是暴力搜索，优化回溯算法只有<strong>「剪枝」</strong>一种方法。</p><p>回溯算法能解决如下问题：</p><a id="more"></a><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>棋盘问题：N皇后，解数独等等</li></ul><p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p><p><strong>1、路径</strong>：也就是已经做出的选择。</p><p><strong>2、选择列表</strong>：也就是你当前可以做的选择。</p><p><strong>3、结束条件</strong>：也就是到达决策树底层，无法再做选择的条件。</p><p>代码的框架：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = [];<span class="comment">//结果集</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(路径，选择列表)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (结束条件) &#123;</span><br><span class="line">        result.add(路径)；<span class="comment">//存放结果</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        做选择;</span><br><span class="line">        backtracking(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销选择</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。</strong></p><p>使用两个变量： res 和 path，res 表示<strong>最终的结果</strong>，path 保存<strong>已走过的路径</strong>。当满足结束条件，即<u>到达了决策树的底层</u>，就把 path 放到 res 中。</p><p>此总结参考于 labuladong的算法小抄 和 代码随想录。</p><h3 id="组合问题">组合问题</h3><h5 id="组合medium">77，组合，medium</h5><p>给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n &#x3D; 4, k &#x3D; 2</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>n 相当于 树的宽度， k 相当于 树的高度。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b15fff1a94206fa74dfd68dba60da8b9.png" alt="Image" /><figcaption>Image</figcaption></figure><p>由上面框架，选择一个数就填入路径集<code>path</code>，结束条件：路径集<code>path</code>大小 = k。</p><p>在每层递归如何选择数呢？需要变量 <code>index</code> 记录下一层递归的起始位置，<code>index + 1 ~ n</code>即为下层递归的选择列表。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        backtrack(n, k, <span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> index, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//横向遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt;= n ; i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtrack(n, k, i + <span class="number">1</span>, path);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还可以进行优化，会将效率提高不少。若 <code>n = 5, k = 4</code>，现在 <code>path.size() = 1</code>，那还需 <code>k - path.size() = 3</code> 个数。若 <code>index = 4</code>，则只能选取 5，不满足，故 i 有限制条件。<code>i &lt;= n - (k - path.size()) + 1</code>，即在集合n中至多要从该起始位置 : <code>n - (k - path.size()) + 1</code>开始遍历。</p><h4 id="组合总和"><strong>组合总和</strong></h4><h5 id="组合总和medium">216，组合总和Ⅲ，medium</h5><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p>说明：</p><p>所有数字都是正整数。 解集不能包含重复的组合。 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: k &#x3D; 3, n &#x3D; 7</span><br><span class="line">输出: [[1,2,4]]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: k &#x3D; 3, n &#x3D; 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>借鉴上一题的思路，组合中的数字为 1~9，则从1 开始分层遍历，结束条件即为 和为 n 且 <code>path.size() = k</code>。选择操作：将 i 添入路径，并加入和sum 中，撤销操作反之。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum3(<span class="keyword">int</span> k, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        backtracking(n, k, <span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, List&lt;Integer&gt; path, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == n &amp;&amp; path.size() == k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt;= <span class="number">9</span> ; i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            sum += i;</span><br><span class="line">            backtracking(n, k, path, i + <span class="number">1</span>);</span><br><span class="line">            sum -= i;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组合总和medium-1">39，组合总和，medium</h5><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。 解集不能包含重复的组合。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：candidates &#x3D; [2,3,5], target &#x3D; 8,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>candidates.length</code> &lt;= 30 1 &lt;= candidates[i] &lt;= 200 candidate 中的每个元素都是独一无二的。 1 &lt;= target &lt;= 500</p><p><strong>题解</strong></p><p>题意：在无重复元素的数组中可重复选取元素使其和为target，结果集中的数组不重复。</p><p>此题的难点在于不产生重复组合。</p><p>错误：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; candidates.length; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">    backtracking(i,...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用 <code>index</code>，最后结果会有重复数组，如 [[2,2,3],[2,3,2],[3,2,2],[7]] 。</p><p>解决：仍需要 index，以使下一次选择的起点在当前选择的基础上，这样就不会选到本次选择同层左边的数。</p><figure><img src="https://img-blog.csdnimg.cn/20210215160501659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>正确：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; candidates.length; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">    backtracking(index,...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>规律</strong>：若只在一个集合中选取组合，需要开始索引 <code>index</code>，如此题和上面两题。</p><p>如果是多个集合取组合，各个集合之间相互不影响，那么就不用 <code>index</code>，如 17。</p><p>结束条件： <code>sum == target</code> 时填入路径，<code>sum &gt; target</code> 时舍弃。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/3fb042b5dcc8a9f74b94662b441a4914.png" alt="Image" /><figcaption>Image</figcaption></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> index, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; candidates.length; i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            backtracking(candidates, target, i, path);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组合总和medium-2">40，组合总和Ⅱ，medium</h5><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><p>所有数字（包括目标数）都是正整数。 解集不能包含重复的组合。 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与39题比较：</p><p>39题 数组元素无重复，可重复选取，解集无重复</p><p>40题 数组元素有重复，不可重复选取，解集无重复</p><p>关键在于<strong>「去重」</strong>，对此题构成的树，从上而下的同一树枝可以有重复元素，同一树层之间不可以有重复元素。如数组[1,1,2]（为方便理解已排序），target = 3 时构成的树如图</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/fe56789ddce344a4a4c330191f845290.png" alt="Image" /><figcaption>Image</figcaption></figure><p>那么怎么区分树层的重复元素和树枝的重复元素呢？</p><p>使用boolean 数组 <code>used</code>，初始化为false，当选取元素改为true。</p><p>首先对数组进行排序，若相邻元素相等且前一元素已被<strong>同一树层</strong>使用过，跳过。代码表示为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">continue</span>;  </span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/7bed7dc8842cad57af368e34732c0b05.png" alt="Image" /><figcaption>Image</figcaption></figure><p>在图中将used的变化用橘黄色标注上，可以看出在candidates[i] == candidates[i - 1]相同的情况下：</p><ul><li>used[i - 1] == true，说明同一<strong>树支</strong>candidates[i - 1]使用过</li><li>used[i - 1] == false，说明同一<strong>树层</strong>candidates[i - 1]使用过</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;             <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[candidates.length];</span><br><span class="line">        Arrays.fill(used, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//先排序使相同元素处于相邻位置</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;(), used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> index, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; candidates.length ; i++)&#123;</span><br><span class="line">            <span class="comment">//同一树层不可以重复</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="keyword">false</span>)</span><br><span class="line">                <span class="keyword">continue</span>;   </span><br><span class="line">            </span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            sum += candidates[i]; </span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            backtracking(candidates, target, i + <span class="number">1</span>, path, used);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多个集合求组合">多个集合求组合</h4><h5 id="电话号码的字母组合medium">17，电话号码的字母组合，medium</h5><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt="img" style="zoom:80%;" /></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与上面题目不同，本题是在多个集合中找组合，不需要开始索引 index。</p><p>此题需要注意的地方有很多：</p><ul><li><p>数字与字母的映射——可以用数组或Map</p></li><li><p>结束条件怎么表示？用 <code>idx</code> 表示遍历到digits 的数字索引（即树的深度），当 <code>idx == digits.length()</code> 时，结束。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b1b653f788c9024244727b6d2f8f6988.png" alt="Image" /><figcaption>Image</figcaption></figure></li><li><p>怎么选择？对 每个数字<code>digit</code> 对应的字母集<code>letter</code> 进行遍历，选择 <code>letter</code> 中的字母。</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    String[] str = &#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;;<span class="comment">//0-9对应字母集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        backtracking(digits, <span class="keyword">new</span> StringBuffer(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(String digits, StringBuffer path, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == digits.length())&#123;</span><br><span class="line">            res.add(path.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> digit = digits.charAt(index) - <span class="string">&#x27;0&#x27;</span>;     <span class="comment">// 将index指向的&#x27;数字&#x27;转为int</span></span><br><span class="line">        String letter = str[digit]; <span class="comment">// 第 index 个数字对应的字母集</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letter.length(); i++)&#123;</span><br><span class="line">            path.append(letter.charAt(i));<span class="comment">//选择</span></span><br><span class="line">            backtracking(digits, path, idx + <span class="number">1</span>);  <span class="comment">//对下一层处理</span></span><br><span class="line">            path.deleteCharAt(path.length() - <span class="number">1</span>);   <span class="comment">//撤销选择</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><ul><li><code>StringBuffer</code> 与 String 加入字母的区别：</li></ul><p>因为<code>StringBuffer</code>传入的都是同一个对象，所以在递归完成之后必须撤回上一次的操作，需要删除上一次添加的字符。而String每次改变之后传入的都是不同的对象。故无需撤销操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; letters.length() ; i ++)&#123;</span><br><span class="line">backtracking(digits, index + <span class="number">1</span>, s + letters.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>int 与 char 类型的转换</p><p>char 不能直接转为int，得到是‘3’的<code>Ascii</code>，如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> numChar = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> intNum = (<span class="keyword">int</span>)numChar;</span><br><span class="line">    System.out.println(numChar + <span class="string">&quot;: &quot;</span> + intNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3：51</span><br></pre></td></tr></table></figure><p>char 转为 int 的正确方法是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> numChar = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> intNum = numChar - ‘<span class="number">0</span>’;</span><br><span class="line">    System.out.println(numChar + <span class="string">&quot;: &quot;</span> + intNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3：3</span><br></pre></td></tr></table></figure><p>而 int 可以强转为 char</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">char</span> b = (<span class="keyword">char</span>)a; <span class="comment">//b = &#x27;9&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="子集问题">子集问题</h3><h5 id="子集medium">78，子集，medium</h5><p>给你一个整数数组 <code>nums</code> ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>nums.length</code> &lt;= 10 -10 &lt;= <code>nums[i]</code> &lt;= 10 <code>nums</code> 中的所有元素 互不相同</p><p><strong>题解</strong></p><p>与上面组合问题不同在于<strong>「子集」</strong>是这棵树的所有节点，而不是只有叶子节点。</p><p>解中不含重复子集，则<strong>取过的元素不会重复取</strong>，for 循环的开始索引 <code>index</code>，而不是 0。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/c6a0773ead22e31d8482e76a08275fa9.png" alt="Image" /><figcaption>Image</figcaption></figure><p>那结束条件是什么呢？可以不需要加终止条件，因为<code>index &gt;= nums.size()</code>，本层for循环本来也结束了。</p><p><strong>「求取子集问题，不需要任何剪枝！因为子集就是要遍历整棵树」</strong>。</p><p>根据上面的模板有</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        backtracking(nums, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        <span class="comment">//不需结束条件</span></span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; nums.length; i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>, path);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子集medium-1">90，子集Ⅱ，medium</h5><p>给定一个可能包含重复元素的整数数组 <code>nums</code>，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,2]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与 78 题的区别：</p><ul><li>78题 —— 数组不含重复元素，解不含重复子集。</li><li>90题 —— 数组含重复元素，解不含重复子集。</li></ul><p>此题与 40题 类似，解题思路也一致。</p><p>同一树层不能取相同元素（否则解中的子集会重复），而同一树枝可以有相同元素。</p><p>使用boolean数组 <code>used</code> ，初始化为false，当选取元素改为true。</p><p>首先对数组进行<strong>排序</strong>，若相邻元素相等且前一元素已被同一树层使用过，跳过。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/a388616952b76a18a2463b2dc667537a.png" alt="Image" /><figcaption>Image</figcaption></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums, <span class="number">0</span>, used, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, <span class="keyword">boolean</span>[] used, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="keyword">false</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>, used, path);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递增子序列medium">491，递增子序列，medium</h5><p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4, 6, 7, 7]</span><br><span class="line">输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>首先判断 此题的<strong>「去重」</strong>与 40、90题不同，上面的做法是将数组先排序再去重，防止同一层的相同元素重复使用，使解中出现重复子集。但此题要求递增子序列，不可打乱顺序。</p><p>采用 <strong><code>HashSet</code></strong> 去重，记录同层使用过的元素。</p><p>如果当前元素在 set 中有重复元素，则跳过。</p><p>那怎么保证递增呢？</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/da35e130f6e7e7fc10ccbb196613288d.png" alt="Image" /><figcaption>Image</figcaption></figure><p>如果当前元素 小于 上一个选取的元素，则跳过。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findSubsequences(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        backtracking(nums, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> idx, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="comment">//注意此处没有return</span></span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = idx; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//当同层有相同元素已经在set中，或要加入的nums[i] &lt; 上一个加入的元素时</span></span><br><span class="line">            <span class="keyword">if</span>(!path.isEmpty() &amp;&amp; nums[i] &lt; path.get(path.size() - <span class="number">1</span>) || set.contains(nums[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>, path);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>set 定义在递归函数上面，为了确保本层不选取重复元素。新的一层 set 都会重新定义（清空），所以要知道 set 只负责本层！</p><p>因为递增序列中至少两个元素，所以 <code>path.size() &gt; 1</code> 才添加到 res 中，注意<strong>不能写 return</strong>，因为要记录树的所有节点。</p><p>添加 return 返回的结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[4,7],[4,6],[7,7],[6,7]]</span><br></pre></td></tr></table></figure><h4 id="小总结">小总结</h4><p>如果给定数组中包含重复元素 / 组合和子集问题中要求<strong>解中不含重复结果</strong> / 在一个集合中找组合，就需要开始索引 <code>idx</code> 对同层元素去重。（77，39，216，40）</p><p>子集问题不需要剪枝，因为要返回所有可能集合。不需要return。</p><h3 id="切割问题">切割问题</h3><h5 id="分割回文串medium">131，分割回文串，medium</h5><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p><p>返回 s 所有可能的分割方案。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;aab&quot;</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;aa&quot;,&quot;b&quot;],</span><br><span class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>不能重复截取，所以仍需要 <code>idx</code>。</p><ul><li>结束条件：分割线到字符串末尾，将path填入 res 中。</li><li>选择：如果当前形成的字符串<code>[idx,i]</code> 不是回文串，跳过。是则进行递归。 <img src="https://img-blog.csdnimg.cn/20210214165327228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        backtracking(<span class="keyword">new</span> ArrayList&lt;String&gt;(), s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;String&gt; path, String s, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历完成</span></span><br><span class="line">        <span class="keyword">if</span>(idx == s.length())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = idx; i &lt; s.length(); i++)&#123;</span><br><span class="line">             <span class="comment">//子串 [idx,i]</span></span><br><span class="line">            String str = s.substring(idx, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果不是回文，跳过</span></span><br><span class="line">            <span class="keyword">if</span>(!isPalindrome(str))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;         </span><br><span class="line">            path.add(str);</span><br><span class="line">            backtracking(path, s, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是不是回文字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(left) != str.charAt(right))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列问题">排列问题</h3><h5 id="全排列medium">46，全排列，medium</h5><p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><ul><li><p>不需要idx：解中的组合是有序的，例如：在同一树层已经选择了 1，下一次选择还可以选 1，即 [2,1] ≠[1,2]。所以不需要 <code>idx</code>。</p></li><li><p>使用boolean 数组 used：全排列，组合中没有重复数字，同一树枝上不能重复选择。用used 数组记录当前元素是否已被选择。</p></li></ul><figure><img src="https://img-blog.csdnimg.cn/20210215160540814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="" /><figcaption><img src="https://mmbiz.qpic.cn/mmbiz_png/ciaqDnJprwv51h5BKbTHZUOibWKplkvJfSAfBfMiaRlo2Dpob0U8tABjUsSaMm20Z1NgdOpcb8D5ZuQjHHItRRewQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image" style="zoom:80%;" /></figcaption></figure><ul><li>结束条件：当递归到树的叶子节点结束，path 添加到res 中。</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        backtracking(nums, used, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">boolean</span>[] used, List&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.size() == n)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">//如果一个树枝上的元素已被选择（path已有nums[i]），跳过</span></span><br><span class="line">            <span class="keyword">if</span>(used[i] == <span class="keyword">true</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            backtracking(nums, used, path);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>排列问题的不同：</strong></p><ul><li>因为解中的数组是有序的，每层都是从0开始搜索而不是startIndex</li><li>需要used数组记录path里都放了哪些元素了</li></ul><h5 id="全排列medium-1">47，全排列Ⅱ，medium</h5><p>给定一个<strong>可包含重复数字</strong>的序列 nums ，按任意顺序 返回所有<strong>不重复</strong>的全排列。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,1,2]</span><br><span class="line">输出：</span><br><span class="line">[[1,1,2],</span><br><span class="line"> [1,2,1],</span><br><span class="line"> [2,1,1]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与46题的区别</p><p>此题有 重复数字，则在同一层不能选取相同数字，否则会出现重复排列。类似 40题的思路来去重。</p><p>在同一树枝中，同一个数字不能被重复选，需要通过 <code>used[i]</code> 判断是否已被选取过。</p><figure><img src="https://img-blog.csdnimg.cn/2021021516071763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        <span class="comment">//先排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums, <span class="keyword">new</span> ArrayList&lt;&gt;(), used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == nums.length)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//同一层相同元素已被选取，跳过</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; used[i - <span class="number">1</span>] == <span class="keyword">false</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//同一枝同一元素已被选取，跳过</span></span><br><span class="line">            <span class="keyword">if</span>(used[i] == <span class="keyword">true</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            backtracking(nums, path, used);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>注意解中<u>有序和无序</u>的区别：在 组合、子集、切割问题 中，<u>一个集合</u>的问题，需要开始索引 idx。排列问题从 0 开始遍历。</p><p>注意<u>同一层</u>的重复元素和<u>同一树枝</u>的重复元素的区别：常借用 boolean数组 记录被选择的元素，进行 <strong>去重</strong>。</p><p>注意结束条件：树的节点，所有节点 或 叶子节点 或满足题意的节点。</p><h3 id="其他">其他</h3><h5 id="括号生成medium">22，括号生成，medium</h5><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 3</span><br><span class="line">输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 1</span><br><span class="line">输出：[&quot;()&quot;]</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= n &lt;= 8</p><p><strong>题解</strong></p><p>选择：将左括号 或 右括号 填入path。</p><p>结束条件：当左括号 和 右括号都用完了，或 <code>path.length() == 2 * n</code> 就结束。</p><p>遍历过程：</p><ul><li>剪枝：当选择的右括号数量 &gt; 左括号。</li><li>选择：当选择的左括号数量 &lt; n，填入左括号；右括号同。 <img src="https://img-blog.csdnimg.cn/20210215160739252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        backtracking(n, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> StringBuilder());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//l 表示已填入path 的左括号数量，r 表示已填入path 的右括号数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> l, <span class="keyword">int</span> r, StringBuilder path)</span></span>&#123;</span><br><span class="line">        <span class="comment">//结束条件</span></span><br><span class="line">        <span class="comment">// if(path.length() == 2 * n)&#123;</span></span><br><span class="line">        <span class="keyword">if</span>(l == n &amp;&amp; r == n)&#123;</span><br><span class="line">            res.add(path.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已选择的左括号数量 &lt; 右括号，剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; n)&#123;</span><br><span class="line">            path.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            backtracking(n, l + <span class="number">1</span>, r, path);<span class="comment">//向下递归</span></span><br><span class="line">            path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt; n)&#123;</span><br><span class="line">            path.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            backtracking(n, l, r + <span class="number">1</span>, path);</span><br><span class="line">            path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的回溯">图的回溯</h2><p>二维图可看作多个子节点多个分支，进行深度遍历搜索得到结果。</p><p>容易与【岛屿问题】混淆，岛屿问题用 DFS 来解，图的问题与岛屿问题有什么区别呢？下面由具体题目来体会。</p><h5 id="单词搜索medium">79，单词搜索，medium</h5><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">board &#x3D;</span><br><span class="line">[</span><br><span class="line">  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],</span><br><span class="line">  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],</span><br><span class="line">  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]</span><br><span class="line">]</span><br><span class="line">给定 word &#x3D; &quot;ABCCED&quot;, 返回 true</span><br><span class="line">给定 word &#x3D; &quot;SEE&quot;, 返回 true</span><br><span class="line">给定 word &#x3D; &quot;ABCB&quot;, 返回 false</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>一开始当做岛屿问题来做，为了避免每次DFS的时候被搜过的地方再重复搜索，修改已经搜索过的网格为 '.'。</p><p>给定 word = &quot;ABCB&quot;时就会发现，第一次dfs后的结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [&#39;.&#39;,&#39;.&#39;,&#39;.&#39;,&#39;E&#39;],</span><br><span class="line"></span><br><span class="line">  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],</span><br><span class="line"></span><br><span class="line">  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>矩阵发生了变化，不能再继续搜索到 ABC 了。这时候就想到用回溯，修改了状态再改回来就好了嘛。</p><p>一段官方点的说法：DFS前后必须要保证执行前后程序面对问题的状态是相同的，因此当前问题缩小为子问题时所做的对当前问题状态产生影响的事情应该全部失效，这就是所谓的回溯时还原现场。</p><p>直接写回溯可能会超时，还可以进行优化，也就是【剪枝】。</p><p>当已经找到路径时，不需再回溯。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = board.length;</span><br><span class="line">        <span class="keyword">int</span> columns = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(backtracking(board, word, i, j, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//结束条件：不在合法区域 或  当前字符与目标不一致</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidArea(board, i, j) || board[i][j] != word.charAt(idx))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搜索完单词</span></span><br><span class="line">        <span class="keyword">if</span>(idx == word.length() - <span class="number">1</span>)&#123;</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还没找到全部路径</span></span><br><span class="line">        <span class="keyword">if</span>(!res)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="comment">//向四个方向搜索</span></span><br><span class="line">            <span class="keyword">boolean</span> r1 = backtracking(board, word, i + <span class="number">1</span>, j, idx + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">boolean</span> r2 = backtracking(board, word, i , j + <span class="number">1</span>, idx + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">boolean</span> r3 = backtracking(board, word, i - <span class="number">1</span>, j, idx + <span class="number">1</span>); </span><br><span class="line">            <span class="keyword">boolean</span> r4 = backtracking(board, word, i, j - <span class="number">1</span>, idx + <span class="number">1</span>); </span><br><span class="line">            board[i][j] = temp;</span><br><span class="line">            <span class="keyword">return</span> r1 || r2 || r3 || r4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidArea</span><span class="params">(<span class="keyword">char</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%9B%9E%E6%BA%AF/">回溯</category>
      
      
      <comments>http://example.com/2021/02/15/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—贪心算法</title>
      <link>http://example.com/2021/01/31/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <guid>http://example.com/2021/01/31/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Sun, 31 Jan 2021 13:11:28 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。&lt;/p&gt;
&lt;p&gt;什么是贪心选择性质呢，简单说就是：&lt;strong&gt;每一步都做出一个局部最优的选择，最终的结果就是全局最优&lt;/strong&gt;。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。&lt;/p&gt;
&lt;p&gt;比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。&lt;/p&gt;
&lt;h1 id=&quot;区间调度问题&quot;&gt;区间调度问题&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="概述">概述</h1><p>贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。</p><p>什么是贪心选择性质呢，简单说就是：<strong>每一步都做出一个局部最优的选择，最终的结果就是全局最优</strong>。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。</p><p>比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。</p><h1 id="区间调度问题">区间调度问题</h1><a id="more"></a><p>先解决一个基础问题：给你很多形如 <code>[start, end]</code> 的闭区间，请你设计一个算法，<strong>算出这些区间中最多有几个互不相交的区间</strong>。</p><p>举个例子，<code>intvs = [[1,3], [2,4], [3,6]]</code>，这些区间最多有 2 个区间互不相交，即 <code>[[1,3], [3,6]]</code>，你的算法应该返回 2。注意边界相同并不算相交。</p><p><strong>思路</strong></p><p>从区间集合 <code>intvs</code> 中选择一个区间 x，这个 x 是在当前所有区间中<strong>结束最早的</strong>（end 最小）。</p><p>把所有与 x 区间相交的区间从区间集合 <code>intvs</code> 中删除。</p><p>重复步骤 1 和 2，直到 <code>intvs</code> 为空为止。之前选出的那些 x 就是最大不相交子集。</p><p><strong>步骤</strong></p><p>先把每个区间按最后一个元素进行<strong>升序排序</strong>，其中最小的元素值为<code>x_end</code>，如果后面区间的开始元素比<code>x_end</code>小（即相交），则删除，并更新 <code>x_end</code>。 <img src="https://img-blog.csdnimg.cn/20210131210840745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intervalSchedule</span><span class="params">(<span class="keyword">int</span>[][] intvs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intvs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 按 end 升序排序</span></span><br><span class="line">    Arrays.sort(intvs, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 至少有一个区间不相交</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 排序后，第一个区间就是 x，其第二个元素值是 x_end</span></span><br><span class="line">    <span class="keyword">int</span> x_end = intvs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] interval : intvs) &#123;</span><br><span class="line">        <span class="keyword">int</span> start = interval[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= x_end) &#123;</span><br><span class="line">            <span class="comment">// 找到下一个选择的区间了</span></span><br><span class="line">            count++;</span><br><span class="line">            x_end = interval[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="无重叠区间">435，无重叠区间</h5><p>移除的最小数量，则在上面模板中进行修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = intervals.length;</span><br><span class="line">    <span class="keyword">return</span> n - intervalSchedule(intervals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用最少数量的箭引爆气球">452，用最少数量的箭引爆气球</h5><p>区间抽象成气球范围，弓箭最小数量即无重叠区间的最大个数（最多有 <code>n</code> 个不重叠的区间，那么就至少需要 <code>n</code> 个箭头穿透所有区间）。与上面模板不同的是，边界相同也算相交。 <img src="https://img-blog.csdnimg.cn/20210131211004955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 按 end 升序排序</span></span><br><span class="line">        Arrays.sort(points, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(a[<span class="number">1</span>], b[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 至少有一个区间不相交</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 排序后，第一个区间就是 x，其第二个元素值是 x_end</span></span><br><span class="line">        <span class="keyword">int</span> x_end = points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] point : points) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = point[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (start &gt; x_end) &#123;</span><br><span class="line">                <span class="comment">// 找到下一个选择的区间了</span></span><br><span class="line">                count++;</span><br><span class="line">                x_end = point[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它">其它</h2><h5 id="分发饼干easy">455，分发饼干，easy</h5><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: g &#x3D; [1,2,3], s &#x3D; [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span><br><span class="line">所以你应该输出1。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: g &#x3D; [1,2], s &#x3D; [1,2,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出2.</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= g.length &lt;= 3 * 104 0 &lt;= s.length &lt;= 3 * 104 1 &lt;= g[i], s[j] &lt;= 231 - 1</p><p><strong>题解</strong></p><p>尽可能满足更多的孩子，就不要造成饼干尺寸的浪费。</p><p>大尺寸的饼干既可以满足胃口大的孩子也可以满足胃口小的孩子，那么就应该<strong>优先满足胃口大</strong>的。</p><p>这里的局部最优就是大饼干喂给胃口大的，充分利用饼干尺寸喂饱一个，全局最优就是喂饱尽可能多的小孩。</p><p>先将饼干和胃口都进行排序，从后向前遍历胃口，用大饼干优先满足胃口大的，并统计满足小孩数量。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="comment">//最大的饼干</span></span><br><span class="line">        <span class="keyword">int</span> i = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//倒序遍历g，找到能满足胃口的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = g.length - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; i &gt;= <span class="number">0</span>; j--)&#123; </span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;= g[j])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以从前往后遍历g和s，最小的饼干如果不能满足胃口的话，继续找下一块饼干，如果可以满足，继续比较下一个g 和 s 的元素</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s.length &amp;&amp; j &lt; g.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;= g[j])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//继续找下一个饼干</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="买卖股票的最佳时机">121，买卖股票的最佳时机</h5><p>只允许完成一笔交易（即买入和卖出一支股票一次），计算你所能获取的最大利润。</p><p><strong>题解</strong></p><p>从左向右遍历时，维护一个最小价格 <code>low</code>，和一个最大利润 <code>maxP</code>，每次比较以当前价格售出时是否为最大利润。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxP = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="comment">//如果当前价格比low小，更新low</span></span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; low) low = prices[i];</span><br><span class="line">            <span class="comment">//得到每次以当前价格卖出得到的最大利润值</span></span><br><span class="line">            maxP = Math.max(maxP, prices[i] - low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="买卖股票的最佳时机-1">122，买卖股票的最佳时机Ⅱ</h5><p>允许多次交易，进行买入卖出操作。</p><p><strong>题解</strong></p><p>多次买卖，只要今天的价格比昨天高，就可以在昨天买入今天卖出，保证今天的利润是正的，这样得到的利润值最大。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;        </span><br><span class="line"><span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxP = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; prices[i - <span class="number">1</span>])</span><br><span class="line">                maxP += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="种花问题easy">605，种花问题，easy</h5><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 1</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= flowerbed.length &lt;= 2 * 104 flowerbed[i] 为 0 或 1 flowerbed 中不存在相邻的两朵花 0 &lt;= n &lt;= flowerbed.length</p><p><strong>题解</strong></p><p>能种花的条件有三个：①. 此位置没有种花 ②. 左边没有种花或者当前为最左 ③. 右边没有种花或者当前为最右.</p><p>找到这样的位置就种花，计数器count++，最后返回与 n 的比较值。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flowerbed.length; i++)&#123;</span><br><span class="line">            <span class="comment">//可以种花的条件：当前位置为空、左边为空或为最左、右边为空或为最右</span></span><br><span class="line">            <span class="keyword">if</span>(flowerbed[i] == <span class="number">0</span> &amp;&amp; (i == <span class="number">0</span> || flowerbed[i - <span class="number">1</span>] == <span class="number">0</span>) &amp;&amp; (i == flowerbed.length - <span class="number">1</span> ||  flowerbed[i + <span class="number">1</span>] == <span class="number">0</span>))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>在 if 条件句中，要先写 <code>i == 0</code> 和 <code>i ==  n - 1</code>，防止角标越界。</p><h5 id="非递减数列easy">665，非递减数列，easy</h5><p>给你一个长度为 n 的整数数组，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p><p>我们是这样定义一个非递减数列的： 对于数组中所有的 i (0 &lt;= i &lt;= n-2)，总满足 <code>nums[i] &lt;= nums[i + 1]</code>。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [4,2,3]</span><br><span class="line">输出: true</span><br><span class="line">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [4,2,1]</span><br><span class="line">输出: false</span><br><span class="line">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>当 <code>nums</code> 两个相邻元素不满足非递减时，造成了“下降”情况，可以修改为</p><ul><li><code>nums[i] = nums[i + 1]</code></li><li><code>nums[i + 1] = nums[i]</code></li></ul><p>贪心的思路，让 <code>nums[i + 1]</code> 尽可能的小，使后面更容易非递减。</p><p>但是采用上面哪一种需要小心，对不同的数组采取不同的处理方法。</p><p>如：</p><ul><li><p>[1,2,3,1] 当 i 遍历到 3 时，发现比后面元素大，但如果采用第一种，将不满足非递减的条件，需要采用第二种。得到普遍规律为：<code>nums[i + 1] &lt; nums[i - 1]</code> 时，使 <code>nums[i + 1] = nums[i]</code>。</p></li><li><p>[1,2,3,2] 当 i 遍历到 3 时，发现比后面元素大，贪心原则将当前元素改为左边元素值。得到普遍规律为：<code>nums[i + 1] ≥ nums[i - 1]</code> 时，使 <code>nums[i] = nums[i + 1]</code>。</p></li><li><p>特殊情况为：<code>i == 0</code> 且 <code>nums[i] &gt; nums[i + 1]</code>，只能修改为右边元素值 <code>nums[i] = nums[i + 1]</code>。</p></li></ul><p>在遍历过程中如果下降次数超过 1 次，则返回true，不用继续判断了。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPossibility</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> down = <span class="number">0</span>;<span class="comment">//下降次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i + <span class="number">1</span>])&#123;</span><br><span class="line">                down++;</span><br><span class="line">                <span class="keyword">if</span>(down &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//[4,2,3]</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">                <span class="comment">//[1,3,2,4]</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">1</span> &amp;&amp; nums[i + <span class="number">1</span>] &gt;= nums[i - <span class="number">1</span>])</span><br><span class="line">                    nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">                <span class="comment">//[1,3,2,2]</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">1</span> &amp;&amp; nums[i + <span class="number">1</span>] &lt; nums[i - <span class="number">1</span>])</span><br><span class="line">                    nums[i + <span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最大子序和easy">53，最大子序和，easy</h5><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>贪心思想主要体现在 当前元素加入前的 <code>curSum</code> 为负时，应将 <code>curSum</code> 舍弃，重新计算。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> curSum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            curSum += nums[i];</span><br><span class="line">            <span class="comment">//同时获取当前最大和</span></span><br><span class="line">            maxSum = Math.max(maxSum, curSum);</span><br><span class="line">            <span class="comment">//只要正Sum不要负的，如果为负则重新计数</span></span><br><span class="line">            <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>)</span><br><span class="line">                curSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      <category domain="http://example.com/tags/%E8%B4%AA%E5%BF%83/">贪心</category>
      
      
      <comments>http://example.com/2021/01/31/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—数组（双指针）</title>
      <link>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/</link>
      <guid>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/</guid>
      <pubDate>Tue, 19 Jan 2021 11:33:18 GMT</pubDate>
      
      <description>&lt;p&gt;数组题目中有两种双指针的应用：和&lt;strong&gt;快慢指针&lt;/strong&gt;。 目录如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#双指针（左右）&quot;&gt;双指针（左右）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#双指针（快慢）&quot;&gt;双指针（快慢）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关题目有：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>数组题目中有两种双指针的应用：和<strong>快慢指针</strong>。 目录如下：</p><p><a href="#双指针（左右）">双指针（左右）</a></p><p><a href="#双指针（快慢）">双指针（快慢）</a></p><p>相关题目有：</p><a id="more"></a><p><a href="#344，反转字符串，easy">344，反转字符串</a></p><p><a href="#26，删除排序数组中的重复项，easy">26，删除排序数组中的重复项</a></p><p><a href="#27，移除元素，easy">27，移除元素</a></p><p><a href="#283，移动零，easy">283，移动零</a></p><p><a href="#485，最大连续1的个数，easy">485，最大连续1的个数</a></p><p><a href="#540，有序数组中的单一元素，medium">540，有序数组中的单一元素</a></p><p><a href="#209，长度最小的子数组，medium">209，长度最小的子数组</a></p><h3 id="双指针左右">双指针（左右）</h3><p>左右指针在数组中实际是指两个索引值，一般初始化为<code>left = 0, right = nums.length - 1</code>。循环条件为 <code>while(left &lt; right)</code> 。</p><p>在上篇文章<a href="#https://blog.csdn.net/qq_39181839/article/details/112847321">二分查找</a>中，凸出了双指针特性。在下面题目中体会。</p><p>看到题目要求有【原地修改】的要求，一般都采用双指针。</p><h5 id="两数之和easy">167，两数之和Ⅱ，easy</h5><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明:</p><p>返回的下标值（<code>index1</code> 和 <code>index2</code>）不是从零开始的。 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: numbers &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line">输出: [1,2]</span><br><span class="line">解释: 2 与 7 之和等于目标数 9 。因此 index1 &#x3D; 1, index2 &#x3D; 2 。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>只要数组有序，就应该想到双指针技巧。这道题的解法有点类似二分查找，通过调节<code>left</code>和<code>right</code>可以调整<code>sum</code>的大小</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = numbers.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;        </span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[left] + numbers[right] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left + <span class="number">1</span>, right + <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反转字符串easy">344，反转字符串，easy</h5><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">          <span class="keyword">char</span> temp = s[left];  </span><br><span class="line">          s[left] = s[right];</span><br><span class="line">          s[right] = temp;</span><br><span class="line">          left++;</span><br><span class="line">          right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针快慢">双指针（快慢）</h3><p>快慢指针在数组中实际是指两个索引值，快指针始终在慢指针的前面，一般初始化为 <code>slow = 0, fast = 0 或 1</code>。循环条件为 <code>while(fast &lt; nums.length)</code> 。</p><h4 id="框架">框架</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> f&amp;s(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">0</span> 或 <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="comment">//当前元素值不是所找的</span></span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != ...)&#123;</span><br><span class="line">                <span class="comment">//看slow、fast具体含义</span></span><br><span class="line">                ...</span><br><span class="line">slow = ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则，fast继续向前找</span></span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="删除排序数组中的重复项easy">26，删除排序数组中的重复项，easy</h5><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回<strong>移除后数组的新长度</strong>。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>快慢指针初始指向索引0和1，用快指针探路，慢指针保存没有重复元素的数组。</p><p>快指针向前，直到不和 当前慢指针指向元素 重复，慢指针索引+1，指向元素为新的数字。</p><p><a href="https://mmbiz.qpic.cn/sz_mmbiz_gif/gibkIz0MVqdFXdiaWmw4sp8GT0YI41Rk5muqNGreX2FbysTeUnlAWECO1eYWc5ZZDPMYCs7ViaHkEaOfK4lI9HD7A/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1">动画演示</a></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow] != nums[fast])&#123;</span><br><span class="line">                slow++;</span><br><span class="line">                <span class="comment">// 维护 nums[0..slow] 无重复</span></span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数组长度为索引 + 1</span></span><br><span class="line">        <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>类似题目：83.删除排序链表中的重复元素</p><h5 id="移除元素easy">27，移除元素，easy</h5><p>你一个数组 <code>nums</code> 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回<strong>移除后数组的新长度</strong>。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>快慢指针初始都指向首个元素，快指针用于探路，如果不等于 val，则可以进行覆盖；如果等于 val，继续向前。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="comment">//当前元素值不等于val</span></span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val)&#123;</span><br><span class="line">                <span class="comment">//建立新数组（覆盖在原数组上）</span></span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则，fast继续向前找等于val的元素</span></span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>上一题要求是删除重复元素，fast 移到下一个不重复元素时，索引<code>slow++</code>，并将fast 指向的值赋给 <code>nums[slow]</code>，最后得到数组长度为 索引数<code>slow</code> + 1。</p><p>这里是先给<code>nums[slow]</code>赋值然后再给<code>slow++</code>，这样可以保证<code>nums[0..slow-1]</code>是不包含值为<code>val</code>的元素的，最后的结果数组长度就是<code>slow</code>。</p><h5 id="移动零easy">283，移动零，easy</h5><p>给定一个数组 <code>nums</code>，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p>说明:</p><p>必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。</p><p><strong>题解</strong></p><p>与上一题类似，只是删除操作改成了移动操作。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != <span class="number">0</span>)&#123;    </span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                <span class="keyword">int</span> temp = nums[fast];</span><br><span class="line">                nums[fast] = nums[slow];</span><br><span class="line">                nums[slow] = temp;</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另一种解法</strong></p><p>遍历此数组，如果当前元素不为0，就赋给慢指针所在位置的元素，遍历结束再将慢指针之后的元素赋为 0。可以看成建立了新的数组，但是是在原数组上改变的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)</span><br><span class="line">                nums[index++] = nums[i];           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; nums.length; i++)&#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最大连续1的个数easy">485，最大连续1的个数，easy</h5><p>给定一个二进制数组， 计算其中最大连续1的个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,0,1,1,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.</span><br></pre></td></tr></table></figure><p>注意：</p><p>输入的数组只包含 0 和1。</p><p>输入数组的长度是正整数，且不超过 10,000。</p><p><strong>题解</strong></p><p>快慢指针初始都指向首个元素，快指针移至最后一个非 0 元素，<code>fast - slow</code> 即为当前连续1 的个数。当 <code>nums[fast] = 0</code> 时，<code>slow</code> 移至 <code>fast</code> 之后再开始统计。重复上述步骤直至 <code>fast</code> 遍历到最后一个元素。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != <span class="number">1</span>)&#123;</span><br><span class="line">                res = Math.max(res, fast - slow);</span><br><span class="line">                slow = fast + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组全1的情况</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(res, fast - slow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>注意考虑数组全为 1 的情况，返回值为 <code>fast - slow</code> 。</p><p><strong>另一种解法</strong></p><p>一次遍历。两个计数器 <code>count</code>、<code>maxCount</code>作为计数指针 和 当前连续1 的最大个数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                maxCount = Math.max(count, maxCount);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面两题稍有不同，但总体思想大致一致。</p><h5 id="有序数组中的单一元素medium">540，有序数组中的单一元素，medium</h5><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,3,7,7,10,11,11]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNonDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;           </span><br><span class="line">            <span class="comment">//检查这一对数，如果不同返回第一个数</span></span><br><span class="line">            <span class="keyword">if</span>(nums[slow] &lt; nums[fast])</span><br><span class="line">                <span class="keyword">return</span> nums[slow];</span><br><span class="line">            <span class="comment">//否则，检查下一对数</span></span><br><span class="line">            <span class="keyword">if</span>(nums[slow] == nums[fast])&#123;</span><br><span class="line">                slow = slow + <span class="number">2</span>;</span><br><span class="line">                fast = fast + <span class="number">2</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//nums仅有一个元素的特殊情况</span></span><br><span class="line">        <span class="keyword">return</span> nums[slow];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="长度最小的子数组medium">209，长度最小的子数组，medium</h5><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>快慢指针来维护一个滑动窗口，相当于数组元素入队出队。具体过程可以用队列来理解，但代码实现用快慢指针。</p><p><img src="https://pic.leetcode-cn.com/10ca012c2f0170afcac5e5996add20c32c36a82f4bb4a6187897bb948ace5fe2-image.png" alt="image.png" style="zoom:80%;" /></p><p><img src="https://pic.leetcode-cn.com/2da8cf86a2a3df3c95ed7d95add574dca2d8bae8420addd0fa6b8c55fa3db081-image.png" alt="image.png" style="zoom:80%;" /></p><p><img src="https://pic.leetcode-cn.com/ca74b1a2ad0eb5a4ebf8647a332161b140c8ebdd71cd5d19bef16e9bf0a43c95-image.png" alt="image.png" style="zoom:80%;" /><img src="https://pic.leetcode-cn.com/72f39b5cd7eb5f866e24d0a31eb3eac7d57cf3ad202ad40d30f103833c1f5a69-image.png" alt="image.png" style="zoom:80%;" /></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="comment">//当前窗口中元素和 小于 s，加入元素</span></span><br><span class="line">            sum += nums[fast]; </span><br><span class="line">            fast++;      </span><br><span class="line">            <span class="comment">//窗口内的元素和 大于等于 s 时，更新最小长度，并缩短窗口</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= s)&#123;                </span><br><span class="line">                min = Math.min(min, fast - slow);</span><br><span class="line">                sum -= nums[slow];</span><br><span class="line">                slow++;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min == Integer.MAX_VALUE ? <span class="number">0</span> : min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/">双指针</category>
      
      
      <comments>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—数组（二分法）</title>
      <link>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/</link>
      <guid>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/</guid>
      <pubDate>Tue, 19 Jan 2021 09:26:25 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;二分查找&quot;&gt;二分查找&lt;/h3&gt;
&lt;p&gt;目录如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#引入&quot;&gt;1. 二分查找基本框架&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#一、寻找左侧边界的二分搜索&quot;&gt;2. 二分查找左边界&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#二、寻找右侧边界的二分查找&quot;&gt;3. 二分查找右边界&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="二分查找">二分查找</h3><p>目录如下：</p><p><a href="#引入">1. 二分查找基本框架</a></p><p><a href="#一、寻找左侧边界的二分搜索">2. 二分查找左边界</a></p><p><a href="#二、寻找右侧边界的二分查找">3. 二分查找右边界</a></p><a id="more"></a><p>相关题目：</p><p>704，二分查找</p><p>34，在排序数组中查找元素的第一个和最后一个位置</p><p>278，第一个错误的版本</p><p>875，爱吃香蕉的可可</p><p>1011，在D天内送达包裹的能力</p><p>69，x的平方根</p><p>744，寻找比目标字母大的最小字母</p><p>153，寻找旋转排序数组中的最小值</p><h4 id="引入">引入</h4><p>常用的二分查找场景：寻找一个数、寻找重复数的左侧边界、寻找重复数的右侧边界。</p><h6 id="二分查找框架">二分查找框架</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line">    <span class="keyword">while</span>(...) &#123;        </span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;        <span class="keyword">if</span> (nums[mid] == target) &#123;            </span><br><span class="line">            ...        </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;            left = ...                           </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;              right = ...        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析二分查找的一个技巧是：不要出现 else，而是把<strong>所有情况用</strong> <strong>else if</strong> 写清楚，这样可以清楚地展现所有细节。</p><h5 id="二分查找easy">704，二分查找，easy</h5><p>给定一个升序数组<code>nums</code>和一个目标值<code>target</code>，搜索 <code>nums</code>中的<code>target</code>，如果存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p>提示：</p><p>你可以假设 <code>nums</code> 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 <code>nums</code> 的每个元素都将在 [-9999, 9999]之间。</p><p><strong>题解：</strong></p><p>此题是二分查找最简单的场景。通过代码理解上面框架的细节。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] ==  target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong>：</p><ol type="1"><li><p>while 内的循环条件为什么是 <code>&lt;=</code> 而不是<code>&lt;</code> ?</p><p>答：初始化 <code>right</code> 的索引为 <code>nums.length - 1</code>，相当于两端都闭区间 <code>[left, right]</code>，<strong>这个区间其实就是每次进行搜索的区间</strong>。</p><p>当找到目标值（<code>nums[mid] ==  target</code>）停止搜索，如果没找到，就需要while循环终止，然后返回 -1 。</p><p>那 while 循环什么时候应该终止？<strong>搜索区间为空的时候应该终止</strong>，意味着没得找了，就等于没找到。</p><p><code>while(left &lt;= right)</code> 的终止条件是 <code>left == right + 1</code>，写成区间的形式就是 <code>[right + 1, right]</code>，或者带个具体的数字进去 <code>[3, 2]</code>，可见<strong>这时候区间为空</strong>，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p><p><code>while(left &lt; right)</code> 的终止条件是 <code>left == right</code>，写成区间的形式就是 <code>[right, right]</code>，或者带个具体的数字进去 <code>[2, 2]</code>，<strong>这时候区间非空</strong>，还有一个数 2，但此时 while 循环终止了。也就是说这区间 <code>[2, 2]</code> 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p><p>如果非要用 <code>while(left &lt; right)</code> 也可以，我们已经知道了出错的原因，就打个补丁好了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>为什么 <code>left = mid + 1</code>，<code>right = mid - 1</code>？我看有的代码是 <strong><code>right = mid</code></strong> 或者 <code>left = mid</code>，没有这些加加减减，到底怎么回事，怎么判断？</p><p>答：本题中搜索区间的<strong>两端都是闭</strong>的，<code>[left, right]</code>。当索引 <code>mid</code> 对应元素不是<code>target</code>，需要改变<code>left</code> 和 <code>right</code>重新搜索，搜索区间变为 <code>[left, mid - 1]</code> 或者 <code>[mid + 1, right]</code> 。</p></li><li><p>此算法的缺陷？</p><p>答：当一个有序数组中含有多个目标值时，无法处理。例如：有序数组 <code>nums = [1,2,2,2,3]</code>，<code>target</code> 为 2，此算法返回的索引是 2。</p></li></ol><h4 id="引入-1">引入</h4><p>上面题目说明了在有序数组中找到元素 <code>target</code> 的方法，下面介绍 搜索左右边界 的方法。</p><h6 id="一寻找左侧边界的二分搜索">一、寻找左侧边界的二分搜索</h6><ul><li>下面是最常见的代码形式：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>细节：</p><ol type="1"><li><p><strong>while 内的循环条件为什么是 <code>&lt;</code> 而不是<code>&lt;=</code> ?</strong></p><p>答：因为 <code>right = nums.length</code>，搜索区间是 <code>[left,right)</code>左闭右开。</p><p>while终止的条件是 <code>left == right</code>，此时搜索区间是 <code>[left,left)</code>为空，可以正确终止。</p></li><li><p><strong>为什么</strong> <code>left = mid + 1</code>，<code>right = mid</code><strong>？</strong></p><p>答：由于搜索区间左闭右开，遍历到<code>nums[mid]</code>之后，重新分成的两个区间应该为 <code>[mid + 1, right)</code> 和 <code>[left, mid)</code>。</p></li><li><p><strong>为什么返回的是 left 而不是 -1 ?</strong></p><p>答：因为要一步一步来，先理解一下这个「左侧边界」有什么特殊含义：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Qt9xu791-1611046986289)(https://gblobscdn.gitbook.com/assets%2F-MQPy5wekRlwH59Y-EnB%2Fsync%2Fda0a55ba889b5c1682dee99f8180d2bfcea66610.jpg?alt=media)]</p><p>对于这个数组，算法会返回 1。这个 1 的含义可以这样解读：<code>nums</code> 中小于 2 的元素有 1 个。</p><p>比如对于有序数组 <code>nums = [2,3,5,7]</code>, <code>target = 1</code>，算法会返回 0，含义是：<code>nums</code> 中小于 1 的元素有 0 个。</p><p>再比如说 <code>nums = [2,3,5,7], target = 8</code>，算法会返回 4，含义是：<code>nums</code> 中小于 8 的元素有 4 个。</p><p>综上可以看出，函数的返回值（即 <code>left</code> 变量的值）取值区间是闭区间 <code>[0, nums.length]</code>，所以我们简单添加两行代码就能在正确的时候 return -1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// target 比所有数都大</span></span><br><span class="line"><span class="keyword">if</span> (left == nums.length) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 类似之前算法的处理方式</span></span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>另外，返回left 或 right 都可以，因为while终止的条件是 <code>left == right</code>。</p></li></ol></li><li><p><strong>最终代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// target 比所有数都大</span></span><br><span class="line"><span class="keyword">if</span> (left == nums.length) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 类似之前算法的处理方式</span></span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="二寻找右侧边界的二分查找">二、寻找右侧边界的二分查找</h6><p>与上面思想类似。</p><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">//向右收缩</span></span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span>;<span class="comment">// 注意</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>细节：</p><ol type="1"><li><p><strong>为什么找右边界</strong> <code>left = mid + 1</code> ？</p><p>答：当 <code>nums[mid] == target</code> 时，增大搜索区间 的下界 left，使区间向右收缩。由于搜索区间为<code>[left,right)</code>，则向右收缩时，新的下界为 <code>left = mid + 1</code>。寻找左边界向左收缩时，新的上界 <code>right = mid</code>。</p></li><li><p><strong>为什么最后返回 <code>left - 1</code> 而不像左边界 返回</strong> <code>left</code> ？</p><p>答：while终止条件 <code>left == right</code>，也就是返回 <code>right - 1</code>。</p><p><img src="https://gblobscdn.gitbook.com/assets%2F-MQPy5wekRlwH59Y-EnB%2Fsync%2Fa360ba87672e68434224884dfc1393a6039f8130.jpg?alt=media" alt="img" style="zoom:80%;" /></p><p>因为对 <code>left</code> 的更新必须是 <code>left = mid + 1</code>，（也就是 <code>mid = left - 1</code>），while 循环结束时，<code>nums[left]</code> 一定不等于 <code>target</code> 了，而 <code>nums[left-1]</code> 可能是 <code>target</code>。</p></li><li><p><strong>为什么没有返回 -1 的操作？如果</strong> <strong><code>nums</code></strong> <strong>中不存在</strong> <strong><code>target</code></strong> <strong>这个值，怎么办</strong>？</p><p>答：类似之前的左侧边界搜索，因为 while 的终止条件是 <code>left == right</code>，就是说 <code>left</code> 的取值范围是 <code>[0, nums.length]</code>，所以可以添加两行代码，正确地返回 -1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//注意</span></span><br><span class="line"><span class="keyword">return</span> nums[left-<span class="number">1</span>] == target ? (left-<span class="number">1</span>) : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>最终代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">//向右收缩</span></span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// target 比所有数都小</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> nums[left-<span class="number">1</span>] == target ? (left-<span class="number">1</span>) : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="在排序数组中查找元素的第一个和最后一个位置medium">34，在排序数组中查找元素的第一个和最后一个位置，medium</h5><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 [-1, -1]。</p><p>进阶：</p><p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [], target &#x3D; 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p>提示：</p><p>0 &lt;= <code>nums.length</code> &lt;= 10<sup>5</sup> -10<sup>9</sup> &lt;= <code>nums[i]</code> &lt;= 10<sup>9</sup> <code>nums</code> 是一个非递减数组 -10<sup>9</sup> &lt;= <code>target</code> &lt;= 10<sup>9</sup></p><p><strong>题解：</strong></p><p>思路就是找 target 的左右边界，如果找不到就返回 [-1, -1]。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> leftBound = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightBound = -<span class="number">1</span>;</span><br><span class="line">        leftBound = getLeftBound(nums, target);</span><br><span class="line">        rightBound = getRightBound(nums, target);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;leftBound, rightBound&#125;;</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="comment">//左边界</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftBound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n;</span><br><span class="line">        <span class="comment">//左闭右开 [left,right)</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                <span class="comment">//向左收缩</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == n) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[left] == target? left : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//右边界</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightBound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n;</span><br><span class="line">        <span class="comment">//左闭右开 [left,right)</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + ( right - left)/ <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                <span class="comment">//向右收缩</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[left - <span class="number">1</span>] == target? (left - <span class="number">1</span>): -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="第一个错误的版本easy">278，第一个错误的版本，easy</h5><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 <code>bool isBadVersion(version)</code> 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 n &#x3D; 5，并且 version &#x3D; 4 是第一个错误的版本。</span><br><span class="line"></span><br><span class="line">调用 isBadVersion(3) -&gt; false</span><br><span class="line">调用 isBadVersion(5) -&gt; true</span><br><span class="line">调用 isBadVersion(4) -&gt; true</span><br><span class="line"></span><br><span class="line">所以，4 是第一个错误的版本。 </span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>利用二分法找第一个错误的版本，搜索范围为 <span class="math inline">\([1,n)\)</span>，左边界。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The isBadVersion API is defined in the parent class VersionControl.</span></span><br><span class="line"><span class="comment">      boolean isBadVersion(int version); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(mid))&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="爱吃香蕉的可可medium">875，爱吃香蕉的可可，medium</h5><p>珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。</p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: piles &#x3D; [3,6,7,11], H &#x3D; 8</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: piles &#x3D; [30,11,23,4,20], H &#x3D; 5</span><br><span class="line">输出: 30</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: piles &#x3D; [30,11,23,4,20], H &#x3D; 6</span><br><span class="line">输出: 23</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= piles.length &lt;= 10^4 piles.length &lt;= H &lt;= 10^9 1 &lt;= piles[i] &lt;= 10^9</p><p><strong>题解：</strong></p><p>题中求在 H 小时吃掉全部香蕉的最小速度 K，即在所有可能吃完的速度中找到左边界 K，就转换为 二分法寻找左边界的问题。</p><p>对于吃的速度来说，最小为 1，最大为 max(piles)，因为每小时只能选一堆香蕉吃。</p><p>应用上面寻找左边界的框架，并根据实际场景修改。</p><ul><li>先找到数组的最大元素 <code>maxPile</code></li><li>在 <code>[1, maxPile]</code> 范围内使用二分法找 K，<code>target</code> 为是否能吃完香蕉。<ul><li>如果当前速度能吃完，向左收缩继续找。</li><li>如果当前速度不能吃完，向右找。 <strong>代码</strong>：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minEatingSpeed</span><span class="params">(<span class="keyword">int</span>[] piles, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxPile = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : piles)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxPile) maxPile = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = maxPile + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(canEat(piles, mid, H))&#123;</span><br><span class="line">                <span class="comment">//能吃完就向左收缩</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//target：当前速度是否能吃完</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canEat</span><span class="params">(<span class="keyword">int</span>[] piles, <span class="keyword">int</span> speed, <span class="keyword">int</span> H)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pile : piles)&#123;</span><br><span class="line">            time += timeOf(pile, speed);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time &lt;= H;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">timeOf</span><span class="params">(<span class="keyword">int</span> pile, <span class="keyword">int</span> speed)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向上取整</span></span><br><span class="line">        <span class="keyword">return</span> pile / speed + (pile % speed &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在d天内送达包裹的能力medium">1011，在D天内送达包裹的能力，medium</h5><p>传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。</p><p>传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p><p>返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：weights &#x3D; [1,2,3,4,5,6,7,8,9,10], D &#x3D; 5</span><br><span class="line">输出：15</span><br><span class="line">解释：</span><br><span class="line">船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：</span><br><span class="line">第 1 天：1, 2, 3, 4, 5</span><br><span class="line">第 2 天：6, 7</span><br><span class="line">第 3 天：8</span><br><span class="line">第 4 天：9</span><br><span class="line">第 5 天：10</span><br><span class="line"></span><br><span class="line">请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：weights &#x3D; [3,2,2,4,1,4], D &#x3D; 3</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：</span><br><span class="line">第 1 天：3, 2</span><br><span class="line">第 2 天：2, 4</span><br><span class="line">第 3 天：1, 4</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：weights &#x3D; [1,2,3,1,1], D &#x3D; 4</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">第 1 天：1</span><br><span class="line">第 2 天：2</span><br><span class="line">第 3 天：3</span><br><span class="line">第 4 天：1, 1</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= D &lt;= weights.length &lt;= 50000 1 &lt;= weights[i] &lt;= 500</p><p><strong>题解：</strong></p><p>与上一题相同，是二分法在实际问题的应用。</p><p>搜索范围是 能在D天内将所有包裹送达的运载能力 <code>[max(weights)，sum(weights)]</code>。</p><p>寻找左边界。</p><p>target：以此运载能力 <code>cap</code>可以在D天全部送达</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxWeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : weights)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : weights)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxWeight) i = maxWeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = maxWeight;</span><br><span class="line">        <span class="keyword">int</span> right = sum + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(canTrans(weights, D, mid))&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当前运输能力为K，能否在D天运完</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canTrans</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span> D, <span class="keyword">int</span> cap)</span></span>&#123;</span><br><span class="line">        <span class="comment">//运送物品个数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历D天，如果运送物品个数 = w数组元素个数，表示可以运完</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> day = <span class="number">0</span>; day &lt; D; day++) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxCap = cap;</span><br><span class="line">            <span class="keyword">while</span> ((maxCap -= w[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (i == w.length)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="x的平方根easy">69，x的平方根，easy</h5><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><p>很容易想到 x 的平方根比 <code>x / 2</code> 小，但事实如此吗？</p><p>解方程 <span class="math inline">\(√x &lt; x / 2\)</span> ，得 $x &gt; 4 $，即 <span class="math inline">\(x = 1,2,3\)</span> 时，平方根为 1。在写代码时就要考虑这一特殊情况。</p><p>还要注意此题向下取整，具体怎么做在代码中体现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = x / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//有测试用例是 2147395599，求得 mid 平方会超过 int 范围，因此需要将平方结果转为 long </span></span><br><span class="line">            <span class="keyword">long</span> sqr = (<span class="keyword">long</span>)mid * mid;</span><br><span class="line">            <span class="keyword">long</span> sqr_next = (<span class="keyword">long</span>)(mid + <span class="number">1</span>) * (mid + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//比如 x=8，mid=2,sqr=4,sqr_next=9。向下取整即取当前的mid。</span></span><br><span class="line">            <span class="keyword">if</span>(sqr == x || (sqr &lt; x &amp;&amp; sqr_next &gt; x))&#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sqr &gt; x)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 x 是考虑 x = 1时</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>做题时对向下取整和边界问题困扰很久，这种方法比较好理解，也不用考虑那么多。</p><h5 id="寻找比目标字母大的最小字母easy">744，寻找比目标字母大的最小字母，easy</h5><p>给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。</p><p>在比较时，字母是依序循环出现的。举个例子：</p><p>如果目标字母 target = 'z' 并且字符列表为 letters = ['a', 'b']，则答案返回 'a'</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;a&quot;</span><br><span class="line">输出: &quot;c&quot;</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;c&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;d&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;k&quot;</span><br><span class="line">输出: &quot;c&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><p>letters长度范围在[2, 10000]区间内。 letters 仅由小写字母组成，最少包含两个不同的字母。 目标字母target 是一个小写字母。</p><p><strong>题解</strong></p><ul><li>方法一：线性搜索。因为数组已排序，遍历 letters 数组，找到第一个比目标字母大的字母就返回。若都比目标字母小，则返回第一个。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="keyword">char</span>[] letters, <span class="keyword">char</span> target)</span> </span>&#123;</span><br><span class="line"><span class="comment">//线性搜索</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(letters[i] - target &gt; <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">return</span> letters[i];        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：二分搜索。在 letters 数组中找到比 目标字母大的字母 中的左边界。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="keyword">char</span>[] letters, <span class="keyword">char</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = letters.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(letters[mid] - target &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组中的字符都比 target 小</span></span><br><span class="line">        <span class="keyword">if</span>(left == letters.length) <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> letters[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>因为可能全部字母都比目标字母大，有可能找不到左边界，还要单独判断一下 <code>left == letters.length</code>，如果是，返回第一个字母。</p><h5 id="寻找旋转排序数组中的最小值medium">153，寻找旋转排序数组中的最小值，medium</h5><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] 。</p><p>请找出其中最小的元素。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [3,4,5,1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [4,5,6,7,0,1,2]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>nums.length</code> &lt;= 5000 -5000 &lt;= nums[i] &lt;= 5000 nums 中的所有整数都是 唯一 的 nums 原来是一个升序排序的数组，但在预先未知的某个点上进行了旋转</p><ul><li>方法一：线性搜索。如果升序数组发生了旋转，比较相邻两元素，如果前一个元素比后一个元素大，返回后者。如果没旋转，返回首个元素即最小值。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="comment">//线性搜索</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i + <span class="number">1</span>]) <span class="keyword">return</span> nums[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不旋转，返回首个元素</span></span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法二：二分法。此题的目的是找到数组的最小值。</p><p>注意此时不一定是有序数组，可能发生了旋转。在找到 mid 时，要确定最小值在 mid 的左侧还是右侧。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;  </span><br><span class="line">            <span class="comment">//min在mid右边</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[right])&#123;</span><br><span class="line">                min = Math.min(min, nums[mid]);</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                min = Math.min(min, nums[mid]);</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/">二分法</category>
      
      
      <comments>http://example.com/2021/01/19/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%95%B0%E7%BB%84%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一文解决股票交易问题</title>
      <link>http://example.com/2021/01/12/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/01/12/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Tue, 12 Jan 2021 14:22:37 GMT</pubDate>
      
      <description>&lt;p&gt;终于到动态规划的最后一部分啦，完结撒花~&lt;/p&gt;
&lt;p&gt;这一篇总结【股票交易问题】，参考的是&lt;a href=&quot;#https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/qi-ta-jing-dian-wen-ti/tuan-mie-gu-piao-wen-ti&quot;&gt;labuladong的文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关问题有：&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>终于到动态规划的最后一部分啦，完结撒花~</p><p>这一篇总结【股票交易问题】，参考的是<a href="#https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/qi-ta-jing-dian-wen-ti/tuan-mie-gu-piao-wen-ti">labuladong的文章</a></p><p><strong>相关问题有：</strong></p><a id="more"></a><ul><li><p>121，买卖股票的最佳时机</p></li><li><p>122，买卖股票的最佳时机Ⅱ</p></li><li><p>309，最佳买卖股票时机含冷冻期</p></li><li><p>714，最佳买卖股票时机含手续费</p></li><li><p>123，买卖股票的最佳时机Ⅲ</p></li><li><p>188，买卖股票的最佳时机Ⅲ</p></li></ul><h5 id="做题思路">做题思路</h5><p>对股票，每天有三种选择：<strong>买入、卖出、保持不变</strong>。注意卖出必须在买入之后，买入必须在卖出之后，保持不变分为两种状态：一种是买入之后的持有股票，一种是卖出之后的不持有股票。</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][k][s]\)</span> — 在第 i 天，交易次数最多为 k，持有状态为 s 的最大利润。其中，0 =&lt; i &lt;= n - 1 , k &gt;= 1，s = 0 或 1。</p></li><li><p>base case</p><p><span class="math inline">\(dp[-1][k][0] = 0\)</span></p><p>解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。</p><p><span class="math inline">\(dp[-1][k][1] = -infinity\)</span></p><p>解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。</p><p><span class="math inline">\(dp[i][0][0] = 0\)</span></p><p>解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。</p><p><span class="math inline">\(dp[i][0][1] = -infinity\)</span></p><p>解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。</p></li><li><p>状态转移方程</p><p><span class="math inline">\(dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\)</span></p><p>解释：今天没有持有股票，有两种可能：</p><p>要么是昨天就没有持有，然后今天保持不变；要么是昨天持有股票，但是今天卖出了，所以今天没有持有股票。</p><p><span class="math inline">\(dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\)</span></p><p>解释：今天持有着股票，有两种可能：</p><p>要么昨天就持有着股票，然后今天保持不变；要么昨天本没有持有，但今天买入，所以今天就持有股票了。</p></li><li><p>返回值</p><p><span class="math inline">\(dp[n - 1][k][0]\)</span> — 最后一天，最多允许 K 次交易，最多获得多少利润。[0] 表示手上的股票已经卖出去了，很显然最后一天不持有股票得到的利润一定更大。</p></li></ol><p>再将此思路运用到下面题目：</p><h5 id="买卖股票的最佳时机easy">121，买卖股票的最佳时机，easy</h5><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。</span><br><span class="line">     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>按照套路模板， k = 1时状态转移方程为：</p><p><span class="math inline">\(dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\)</span></p><p><span class="math inline">\(dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) =max(dp[i-1][1][1], -prices[i])\)</span></p><p>k 对状态转移没有影响，可简化为两个状态。</p><ol type="1"><li><p>子问题</p><p>$ dp[i][s]$ — 第 i 天 持有状态为 s = 0 或 1 的 最大利润。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0][0] = 0\)</span> 最开始一天，没有持有股票，利润为0。</p><p><span class="math inline">\(dp[0][1] = - prices[0]\)</span> 最开始一天，持有股票，利润为 - 买入价钱。</p></li><li><p>状态转移方程</p><p>从第二天开始遍历</p><p><span class="math inline">\(dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])\)</span></p><p><span class="math inline">\(dp[i][1] = max(dp[i-1][1], -prices[i])\)</span></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">// int price = prices[i];</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>关于base case 的解释：</p><p>i ∈[0, n - 1]，在循环中可能会出现 i 为 -1 的情况</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要对 <code>i - 1 == -1</code> 进行处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][0] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][0], dp[-1][1] + prices[i])</span></span><br><span class="line">        <span class="comment">// = max(0, -infinity + prices[i]) = 0</span></span><br><span class="line">        dp[i][<span class="number">1</span>] = -prices[i];</span><br><span class="line">        <span class="comment">//解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][1] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][1], dp[-1][0] - prices[i])</span></span><br><span class="line">        <span class="comment">// = max(-infinity, 0 - prices[i]) </span></span><br><span class="line">        <span class="comment">// = -prices[i]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>放在 i = 0开始的循环中判断。为了简化将 i = 0提出，再从 i = 1 第二天开始循环，即上面所示代码。</p></li></ul></li><li><p>状态压缩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">// int price = prices[i];</span></span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他方法：一次遍历，<em>找到最低点买入，卖出一定在买入之后，即找到最大差值时卖出。</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span> || prices == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = prices[<span class="number">0</span>];<span class="comment">//最低点</span></span><br><span class="line">        <span class="keyword">int</span> maxPro = <span class="number">0</span>;<span class="comment">//最大利润</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; prices[i]) </span><br><span class="line">                min = prices[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(maxPro &lt; prices[i] - min) </span><br><span class="line">                maxPro = prices[i] - min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="买卖股票的最佳时机easy-1">122，买卖股票的最佳时机Ⅱ，easy</h5><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>与上面的区别仅在于 k = + 无穷，就可以认为 <code>k = k - 1</code>。模板的状态转移方程为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">            = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p>可以压缩为两个状态。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], dp[<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="最佳买卖股票时机含冷冻期medium">309，最佳买卖股票时机含冷冻期，medium</h5><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><p>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。 示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,0,2]</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>与上一题相同在 k = + 无穷，不同在 卖出股票的第二天不能进行交易。</p><ul><li><p>状态转移方程</p><p>在上一题的状态转移方程上 <span class="math inline">\(dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\)</span>、<span class="math inline">\(dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\)</span> 修改。如果今天持有股票，可能前一天持有保持不变，也可能之前没有股票，今天买入。但题中一天的冷静期说明今天持有的状态要在冷静期之前的状态上改变，则 <span class="math inline">\(dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\)</span></p></li><li><p>base case</p><p>如果按照上面从第二天开始循环，会出现 <span class="math inline">\(dp[-1]\)</span> 的情况，所以要多处理个 $dp[1] $</p></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = - prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = Math.max(<span class="number">0</span>, prices[<span class="number">1</span>] - prices[<span class="number">0</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = Math.max(-prices[<span class="number">0</span>], -prices[<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="最佳买卖股票时机含手续费medium">714，最佳买卖股票时机含手续费，medium</h5><p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: prices &#x3D; [1, 3, 2, 8, 4, 9], fee &#x3D; 2</span><br><span class="line">输出: 8</span><br><span class="line">解释: 能够达到的最大利润:  </span><br><span class="line">在此处买入 prices[0] &#x3D; 1</span><br><span class="line">在此处卖出 prices[3] &#x3D; 8</span><br><span class="line">在此处买入 prices[4] &#x3D; 4</span><br><span class="line">在此处卖出 prices[5] &#x3D; 9</span><br><span class="line">总利润: ((8 - 1) - 2) + ((9 - 4) - 2) &#x3D; 8.</span><br></pre></td></tr></table></figure><p>思路：</p><p>与122题相同在 k = +无穷，不同在 卖出股票需要支付手续费。</p><ul><li><p>状态转移方程</p><p>在上一题的状态转移方程上 <span class="math inline">\(dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\)</span>、<span class="math inline">\(dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\)</span> 修改。一次交易需要支付一次手续费，则只在卖出时考虑交费，则 <span class="math inline">\(dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)\)</span></p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i] - fee);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>] + prices[i] - fee);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], dp[<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="买卖股票的最佳时机hard">123，买卖股票的最佳时机Ⅲ，hard</h5><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：prices &#x3D; [3,3,5,0,0,3,1,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：在第 4 天（股票价格 &#x3D; 0）的时候买入，在第 6 天（股票价格 &#x3D; 3）的时候卖出，这笔交易所能获得利润 &#x3D; 3-0 &#x3D; 3 。</span><br><span class="line">     随后，在第 7 天（股票价格 &#x3D; 1）的时候买入，在第 8 天 （股票价格 &#x3D; 4）的时候卖出，这笔交易所能获得利润 &#x3D; 4-1 &#x3D; 3 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：prices &#x3D; [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。   </span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   </span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：prices &#x3D; [7,6,4,3,1] </span><br><span class="line">输出：0 </span><br><span class="line">解释：在这个情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：prices &#x3D; [1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>此题与上面的题不同在于：上面的题目中 k 都被化简掉了。但此题 k 由于没有消掉 k 的影响，所以必须要对 k 进行穷举，除了遍历 i，还要遍历 k。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> max_k = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[0][1][0] = 0;</span></span><br><span class="line">        <span class="comment">// dp[0][2][0] = 0;</span></span><br><span class="line">        <span class="comment">// dp[0][1][1] = -prices[0];</span></span><br><span class="line">        <span class="comment">// dp[0][2][1] = -prices[0];</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--)&#123;</span><br><span class="line">                处理base <span class="keyword">case</span></span><br><span class="line">                <span class="keyword">if</span>(i - <span class="number">1</span> == -<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][<span class="number">1</span>][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    dp[i][<span class="number">2</span>][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i]) = max(0,-无穷) = 0</span></span><br><span class="line">                    <span class="comment">//dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i]) = max(0,-无穷) = 0</span></span><br><span class="line">                    <span class="comment">//dp[i][1][1] = max(dp[i-1][1][1],dp[i-1][0][0] - prices[i]) = max(-无穷, -prices[i]) = -prices[i]</span></span><br><span class="line">                    <span class="comment">//dp[i][2][1] = max(dp[i-1][2][1],dp[i-1][0][0] - prices[i]) = max(-无穷, -prices[i]) = -prices[i]</span></span><br><span class="line">                &#125;</span><br><span class="line">               dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">               dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="买卖股票的最佳时机hard-1">188，买卖股票的最佳时机Ⅲ，hard</h5><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔 交易。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：k &#x3D; 2, prices &#x3D; [2,4,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：在第 1 天 (股票价格 &#x3D; 2) 的时候买入，在第 2 天 (股票价格 &#x3D; 4) 的时候卖出，这笔交易所能获得利润 &#x3D; 4-2 &#x3D; 2 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：k &#x3D; 2, prices &#x3D; [3,2,6,5,0,3]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第 2 天 (股票价格 &#x3D; 2) 的时候买入，在第 3 天 (股票价格 &#x3D; 6) 的时候卖出, 这笔交易所能获得利润 &#x3D; 6-2 &#x3D; 4 。</span><br><span class="line">     随后，在第 5 天 (股票价格 &#x3D; 0) 的时候买入，在第 6 天 (股票价格 &#x3D; 3) 的时候卖出, 这笔交易所能获得利润 &#x3D; 3-0 &#x3D; 3 。</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>与上一题区别在于完成 k 笔交易，有了上一题的铺垫，此题的代码很好解决。但按照上面的思路，k 太大会出现超出内存限制。思考：交易数k 最大有多大呢？</p><p>一次交易分为买入和卖出，至少需要两天。所以有效的限制 <code>k  &lt;= n / 2</code>，如果超过，就没有约束作用了，相当于 k = +无穷（即第122题）。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &gt; n / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                <span class="comment">//处理base case</span></span><br><span class="line">                <span class="keyword">if</span>(i - <span class="number">1</span> == -<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][j][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">               dp[i][j][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">0</span>], dp[i-<span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">               dp[i][j][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">1</span>], dp[i-<span class="number">1</span>][j-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      <category domain="http://example.com/tags/%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93/">股票交易</category>
      
      
      <comments>http://example.com/2021/01/12/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一文看清背包套路</title>
      <link>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/</link>
      <guid>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/</guid>
      <pubDate>Fri, 08 Jan 2021 12:44:55 GMT</pubDate>
      
      <description>&lt;p&gt;刷了几道背包问题，用了一周时间，动态规划的难真的领会到了。但再难总有规律可循，总结中刷题，刷题中总结。&lt;/p&gt;
&lt;p&gt;关于0-1背包的问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;416，分割等和子集&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;494，目标和&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;474，一和零&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于完全背包的问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;322，零钱兑换&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>刷了几道背包问题，用了一周时间，动态规划的难真的领会到了。但再难总有规律可循，总结中刷题，刷题中总结。</p><p>关于0-1背包的问题有：</p><ul><li><p>416，分割等和子集</p></li><li><p>494，目标和</p></li><li><p>474，一和零</p></li></ul><p>关于完全背包的问题有：</p><ul><li>322，零钱兑换</li></ul><a id="more"></a><ul><li><p>518，零钱兑换Ⅱ</p></li><li><p>377，组合总和Ⅳ</p></li><li><p>139，单词拆分</p></li></ul><h2 id="一0-1背包问题">一、0-1背包问题</h2><h5 id="引入">引入</h5><p>一个可装载重量为<code>W</code>的背包和<code>N</code>个物品，每个物品有重量和价值两个属性。怎么装使这个背包装下物品的价值最大？</p><p><strong>套路</strong>：</p><ol type="1"><li><p><strong>子问题</strong>：<strong>二维 <code>dp</code> 数组</strong> <span class="math inline">\(dp[i][j]\)</span>—对于前 <code>i</code> 个物品，当前背包容量为 <code>j</code>，这种情况下可以装的最大价值是 <span class="math inline">\(dp[i][j]\)</span>。</p><p>比如说，如果 <span class="math inline">\(dp[3][5] = 6\)</span>，其含义为：对于给定的一系列物品中，若只对前 3 个物品进行选择，当背包容量为 5 时，最多可以装下的价值为 6。 根据这个定义，我们想求的<strong>最终答案就是 <code>dp[N][W]</code></strong>。</p></li><li><p><strong>base case</strong>： 当没有物品 或 背包没有容量时，<span class="math inline">\(dp[0][...] = dp[...][0] = 0\)</span></p></li><li><p><strong>状态转移</strong>：</p><p>物品 i 有两种选择—装进背包和不装，设第 i 件物品体积为 w，价值为 v。</p><ul><li>物品 i 不装进背包，最大价值 <span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></li><li>物品 i 装进背包，最大价值 <span class="math inline">\(dp[i][j] = dp[i - 1][j - w] + v\)</span></li></ul><p>因此，0-1 背包的状态转移方程为：</p><p><span class="math inline">\(dp[i][j] = Math.max(dp[i - 1][j],dp[i - 1][j - w] + v)\)</span></p></li></ol><p><strong>代码：</strong></p><p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// W 为背包总体积</span></span><br><span class="line"><span class="comment">// N 为物品数量</span></span><br><span class="line"><span class="comment">// weights 数组存储 N 个物品的重量</span></span><br><span class="line"><span class="comment">// values 数组存储 N 个物品的价值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, <span class="keyword">int</span> N, <span class="keyword">int</span>[] weight, <span class="keyword">int</span>[] values)</span></span>&#123;</span><br><span class="line">    <span class="comment">//dp[i][j]表示装 i 个物品背包容量为 j</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//默认初始化都为0，从第1行和第1列开始赋值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//物品从weight[0]开始添加，w表示第i个物品的体积，v表示第i个物品的价值</span></span><br><span class="line">        <span class="keyword">int</span> w = weight[i - <span class="number">1</span>]; <span class="keyword">int</span> v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; W + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="comment">// 装入或者不装入背包，择优</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= w)</span><br><span class="line">            dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">            <span class="comment">// 当前背包容量装不下，只能选择不装入背包</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意到 <span class="math inline">\(dp[i][j]\)</span> 都是通过上一行 <span class="math inline">\(dp[i-1][..]\)</span> 转移过来的，之前的数据都不会再使用了。 所以，我们可以进行状态压缩，将二维 dp 数组压缩为一维，节约空间复杂度，可见下一题。</p><h5 id="分割等和子集medium">416，分割等和子集，medium</h5><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意:</p><p>每个数组中的元素不会超过 100 数组的大小不会超过 200 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 5, 11, 5]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">解释: 数组可以分割成 [1, 5, 5] 和 [11].</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 2, 3, 5]</span><br><span class="line"></span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">解释: 数组不能分割成两个元素和相等的子集.</span><br></pre></td></tr></table></figure><ul><li><p>题意分析：</p><p>看起来和背包没关系，实际是<strong>背包问题的变体：子集背包问题</strong>。原背包问题的二维数组 <span class="math inline">\(v = dp[i][j]\)</span> 表示 对于前 <code>i</code> 个物品，当前背包容量为 <code>j</code>，这种情况下可以装的最大价值是 <span class="math inline">\(v\)</span>。</p><p>此题中，要把数组分割成两个等和子集，即背包容量：数组的和 <code>sum</code>的一半，物品：数组元素。如果遍历数组，部分元素的和恰好为 背包容量，则剩余元素的和也恰好为 <code>sum / 2</code>，返回true。</p></li><li><p>思路：</p><p><strong>特殊情况：</strong></p><p><code>nums</code> 数组的元素和 <code>sum</code> 若为奇数，则无法分割，返回false。</p><p>如果 <code>n &lt; 2</code>，数组无法分割，返回false。</p></li></ul><ol type="1"><li><p>子问题</p><p><span class="math inline">\(x = dp[i][j]\)</span> 表示 对于数组<code>nums</code> 的前 <code>i</code> 个元素，当前元素和是否为 <code>j</code>， 若为 j ，<span class="math inline">\(x = true\)</span>；否则，<span class="math inline">\(x = false\)</span>。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0][...] = false\)</span> 数组中没有元素可选取，返回false。</p><p><span class="math inline">\(dp[...][0] = true\)</span> 目标元素和为 0，不选取元素即可。</p></li><li><p>状态转移方程</p><p>当前元素 <code>num = nums[i - 1]</code>（从数组的 第 0 个元素开始遍历）</p><p>①. <code>j &gt;= num</code></p><ul><li><p>不将 <code>num</code> 算入，能否恰好等于 j ,<span class="math inline">\(dp[i][j]\)</span>取决于 <span class="math inline">\(dp[i - 1][j]\)</span></p></li><li><p>将 <code>num</code> 算入，能否恰好等于 j ,<span class="math inline">\(dp[i][j]\)</span>取决于 <span class="math inline">\(dp[i - 1][j - num]\)</span></p><p>理解：如果装入第 i 个元素，要看剩余元素和 <code>j - num</code> 限制下是否恰好装满。</p></li></ul><p>②.<code>j &lt; num</code></p><p>要达到的元素和 比 当前元素值 小，无法加入。</p><p>总结： <img src="https://img-blog.csdnimg.cn/20210107152332640.png#pic_center" alt="在这里插入图片描述" /></p></li></ol><ul><li><p>代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//dp[i][j]— [0, i]元素 元素是否为 j</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>][target + <span class="number">1</span>];<span class="comment">//初始化都为false</span></span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; target + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//要达到的元素和 比 当前元素值 小，无法加入</span></span><br><span class="line">                <span class="keyword">if</span>(j &lt; num) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] | dp[i - <span class="number">1</span>][j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>降维</p><p><span class="math inline">\(dp[i][j]\)</span> 都是通过上一行 <span class="math inline">\(dp[i-1][..]\)</span> 转移过来的，可以进行状态压缩，将二维 dp 数组压缩为一维，但要注意 <strong>j 应该从后往前反向遍历，因为每个物品（或者说数字）只能用一次，以免之前的结果影响其他的结果。</strong></p><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n = nums.length;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">          sum += num; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//特殊：</span></span><br><span class="line">      <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      sum = sum / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[sum + <span class="number">1</span>];</span><br><span class="line">      dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = sum; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">              <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                  dp[j] = dp[j] | dp[j - num];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[sum];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<strong>做题步骤</strong>：</p></li></ul><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 0-1背包问题</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法 1. 子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i][j]\)</span> 返回值是什么 2. base case：通常为 <span class="math inline">\(dp[0][...]、dp[...][0]、dp[0][0]\)</span> 3. 状态转移方程： 先遍历物品，再遍历背包。每个物品只有装和不装两个选择。</p><pre><code>组合问题公式   dp[i] += dp[i - num]True、False问题公式    dp[i] = dp[i] or dp[i - num]最大最小问题公式    dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] =  max(dp[i], dp[i - num]+1)</code></pre></li><li><p>最终<strong>返回结果</strong></p></li><li><p><strong>状态压缩</strong>至一维（可不进行）</p></li></ol><h5 id="目标和medium">494，目标和，medium</h5><p>给定一个非负整数数组<code>a1, a2, ..., an</code> 和一个目标数 S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p><p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums: [1, 1, 1, 1, 1], S: 3</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">-1+1+1+1+1 &#x3D; 3</span><br><span class="line">+1-1+1+1+1 &#x3D; 3</span><br><span class="line">+1+1-1+1+1 &#x3D; 3</span><br><span class="line">+1+1+1-1+1 &#x3D; 3</span><br><span class="line">+1+1+1+1-1 &#x3D; 3</span><br><span class="line"></span><br><span class="line">一共有5种方法让最终目标和为3。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：</span><br><span class="line"> 数组非空，且长度不会超过 20 。</span><br><span class="line">   初始的数组的和不会超过 1000 。</span><br><span class="line">  保证返回的最终结果能被 32 位整数存下。</span><br></pre></td></tr></table></figure><ul><li><p>题意分析： <img src="https://img-blog.csdnimg.cn/20210107155801985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 则转换为 0-1背包问题：给定一个数组 和一个容量为 target 的背包，求多少种方式将背包填满。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(x = dp[i][j]\)</span> 表示 对于数组<code>nums</code> 的前 <code>i</code> 个元素，放进容量 <code>j</code> 的背包，装满方式为 x。</p></li></ol><p><strong>特殊情况：</strong></p><p><code>S + sum</code> 必须为偶数才可分解，<code>S &lt; sum</code> 才可使数组 <code>nums</code> 元素得到 <code>S</code>。</p></li></ul><ol start="2" type="1"><li><p>base case</p><p><span class="math inline">\(dp[0][0] = 1\)</span> 没有元素，所以只能不选，和为0</p></li><li><p>状态转移方程</p><p>当前元素 <code>num = nums[i - 1]</code>（从数组的 第 0 个元素开始遍历）</p><p>①. <code>j &gt;= num</code></p><p>将 当前 <code>num = nums[i-1]</code> 放入或不放入背包，<span class="math inline">\(dp[i][j] = dp[i-1][j]+dp[i-1][j-num]\)</span></p><p>②. <code>j &lt; num</code></p><p>不能放入，取决于上一状态，<span class="math inline">\(dp[i][j] = dp[i-1][j]\)</span></p></li></ol><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(S &gt; sum || (sum + S) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> target = (sum + S) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>][target + <span class="number">1</span>]; </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态转移方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; target + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - num];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对base case 的理解：</p><p><strong>注意</strong>与0-1背包的区别：</p><p>对于0-1 背包，物品大小为正数，可以先对二维数组初始化第0行（除<span class="math inline">\([0][0]\)</span> 位置外全为0）和第0列（全为1）。然后 i 和 j 都从1开始遍历。 对于该问题，列表中可能存在为 0 的元素，因此<strong>选不选这个0，都能将容量为0的背包装满</strong>。如，<code>nums=&#123;0,0&#125;,target=0,dp[2][0]≠1</code>。</p><p>所以base case 只有 <span class="math inline">\(dp[0][0]=1\)</span>, 剩下的第0列的其他位置的值用状态转移方程确定 （而不能将 <span class="math inline">\(dp[i][0]\)</span>初始化为1） 。即 i 从1开始遍历，j 从0开始遍历。</p></li><li><p>优化：将二维<code>dp</code>数组压缩为一维，<strong><code>dp[i][j]</code>都是通过上一行<code>dp[i-1][..]</code>转移过来的</strong>，之前的数据都不会再使用了。需要注意的是 <code>j</code>应该从后往前反向遍历，因为每个物品（数字）只能用一次，以免之前的结果影响其他的结果。</p><ol type="1"><li><p>子问题：</p><p><span class="math inline">\(x = dp[i]\)</span> 表示数组 <code>nums</code> 的元素 装满 容量为 i 的背包，有 x 种装法。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 1\)</span> 全部不装，一种装法。</p></li><li><p>状态转移方程</p><p>由上面的二维可得$ dp[j] = dp[j] + dp[j - num]$</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(S &gt; sum || (sum + S) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> target = (sum + S) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>]; </span><br><span class="line">        <span class="comment">//base case//放入背包重量为0的方案数为1，不选</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = target; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                    dp[j] = dp[j] + dp[j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另一种方法：递归</p><p>对于第 i 个数，可以 ‘+’ 或 '-'，分别递归搜索两种操作，当搜索完一遍，如果元素和sum等于S，count+1。、</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> helper(nums, <span class="number">0</span>, <span class="number">0</span>, S);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> sum, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == nums.length)&#123;</span><br><span class="line">          <span class="keyword">if</span>(sum == S)</span><br><span class="line">              count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//还没全部搜索完，递归两种情况</span></span><br><span class="line">          helper(nums, i + <span class="number">1</span>, sum + nums[i], S);</span><br><span class="line">          helper(nums, i + <span class="number">1</span>, sum - nums[i], S);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="一和零medium">474，一和零，medium</h5><p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 m 和 n 。</p><p>请你找出并返回 <code>strs</code> 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p><p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;], m &#x3D; 5, n &#x3D; 3</span><br><span class="line">输出：4</span><br><span class="line">解释：最多有 5 个 0 和 3 个 1 的最大子集是 &#123;&quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot;&#125; ，因此答案是 4 。</span><br><span class="line">其他满足题意但较小的子集包括 &#123;&quot;0001&quot;,&quot;1&quot;&#125; 和 &#123;&quot;10&quot;,&quot;1&quot;,&quot;0&quot;&#125; 。&#123;&quot;111001&quot;&#125; 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;10&quot;, &quot;0&quot;, &quot;1&quot;], m &#x3D; 1, n &#x3D; 1</span><br><span class="line">输出：2</span><br><span class="line">解释：最大的子集是 &#123;&quot;0&quot;, &quot;1&quot;&#125; ，所以答案是 2 。</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>strs.length</code>&lt;= 600 1 &lt;= <code>strs[i].length</code> &lt;= 100 <code>strs[i]</code> 仅由 '0' 和 '1' 组成 1 &lt;= m, n &lt;= 100</p><ul><li><p>题目解析：</p><p>仍然是 0-1背包问题，但此题的背包有两个，一个放0，一个放1，称为背包0 和 背包1。物品：字符串数组中的字符。为最大最小问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j][k]\)</span> — 前 i 个字符串将 背包0容量为 j，背包1容量为k 的最大子集大小</p></li><li><p>base case</p><p><span class="math inline">\(dp[0][...][...]=0\)</span> 如果不使用任何一个字符串，则背包能装的字符串数就为0。</p><p><span class="math inline">\(dp[...][0][0]=0\)</span> 如果背包0，背包1的容量都为0，它能装的字符串数也为0。</p></li><li><p>状态转移方程</p><p>当前字符串str</p><ul><li><p>如果字符串<code>str</code>不装入背包，受上一状态影响。</p><p><span class="math inline">\(dp[i][j][k]=dp[i-1][j][k]\)</span></p></li><li><p>如果字符串<code>str</code> 装入背包，则与不装入的选择取最大值。</p><p><span class="math inline">\(dp[i][j][k] = max(dp[i-1][j][k],dp[i-1][j-count_0][j-count_1] + 1)\)</span></p></li></ul><p>边界条件为 j 与 <code>str</code> 中0 的数量 的大小关系，k 与 <code>str</code> 中 1 的数量的大小关系。</p></li><li><p>返回 <span class="math inline">\(dp[len][m][n]\)</span></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>][m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//base case dp[0][...][...]=0、dp[...][0][0]=0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先循环物品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            String str = strs[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n + <span class="number">1</span>; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; count_0(str) || k &lt; count_1(str))</span><br><span class="line">                    dp[i][j][k] = dp[i - <span class="number">1</span>][j][k];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    dp[i][j][k] = Math.max(dp[i - <span class="number">1</span>][j][k], dp[i - <span class="number">1</span>][j - count_0(str)][k - count_1(str)] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计str中0和1的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_0</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            String str = strs[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= count_0(str); j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = n; k &gt;= count_1(str); k--)&#123;</span><br><span class="line">                    dp[j][k] = Math.max(dp[j][k], dp[j - count_0(str)][k - count_1(str)] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计str中0和1的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_0</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思考：为什么背包0 和 背包1的 j、k要从 0 开始遍历？</p><p>字符串数组中如果存在“00”，“00”，选择也是不同的，会影响<span class="math inline">\(dp\)</span> 数组的结果。可参考494题中对 base case 的理解。</p></li></ul><h5 id="背包总结">0-1背包总结</h5><p>做题步骤：</p><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 0-1背包问题</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法 1. 子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i][j]\)</span> 返回值是什么 2. base case：通常为 <span class="math inline">\(dp[0][...]、dp[...][0]、dp[0][0]\)</span> 3. 状态转移方程： 先遍历物品，再遍历背包。每个物品只有装和不装两个选择。</p><p>组合问题公式 dp[i] += dp[i - num] True、False问题公式 dp[i] = dp[i] or dp[i - num] 最大最小问题公式 dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] = max(dp[i], dp[i - num]+1)</p></li><li><p>最终<strong>返回结果</strong></p></li><li><p><strong>状态压缩</strong>至一维（可不进行）</p></li></ol><p>套模板还是有用的，难的部分在于理清题意再转化到模板。base case 的情况容易混淆，分不清的时候先写出多维dp数组，再进行降维可能还有助于做题。 完全背包问题请见下一节总结内容。</p><h2 id="二完全背包问题">二、完全背包问题</h2><h5 id="完全背包问题引入">完全背包问题引入</h5><ul><li><p>完全背包的特点：物品可以无限次选取，且<strong>不考虑顺序</strong>。</p></li><li><p>与0-1背包不同在：</p><ul><li><p>0-1背包考虑当前物品装入或不装入背包，物品<strong>只有一件</strong>。</p></li><li>完全背包考虑当前物品装入或不装入背包，物品的数量<strong>无限</strong>，只要背包容量还有剩余就可以一直拿同一种物品。</li></ul></li><li><p>完全背包的变体问题：物品可以无限次选取，且<strong>考虑物品放入的顺序</strong>。</p></li></ul><p>下面在具体题目中进行总结。</p><h5 id="零钱兑换medium">322，零钱兑换，medium</h5><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><p>你可以认为每种硬币的数量是无限的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 &#x3D; 5 + 5 + 1</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：coins &#x3D; [2], amount &#x3D; 3</span><br><span class="line">输出：-1</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 0</span><br><span class="line">输出：0</span><br><span class="line"></span><br><span class="line">示例 4：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 1</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">示例 5：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>coins.length</code> &lt;= 12 1 &lt;= <code>coins[i]</code> &lt;= 231 - 1 0 &lt;= <code>amount</code> &lt;= 104</p><h6 id="解法一二维先遍历物品再遍历背包">解法一：二维（先遍历物品，再遍历背包）</h6><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> 前 i 个硬币组成总金额 j，所需最少硬币个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[..][0] = 0\)</span> 金额为0，不取硬币。</p><p><strong>特殊情况：</strong></p><p>此题中若无法组成总金额，需返回 -1。思考怎么实现呢？</p><p>把二维数组 <span class="math inline">\(dp\)</span> 初始化成最大值 <code>amount + 1</code>（硬币面额最少为1），如果发现没更新则说明无法取硬币组成总金额，返回 -1。</p></li><li><p>递推关系</p><p>最小问题，取min。当前coin = coins[i-1]</p><ul><li><p>不选 coin，最少硬币个数不变，总金额不变。</p><p><span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></p></li><li><p>选 coin，最少硬币个数 + 1。因为完全背包问题可以<strong>多次选取同一物品，所以为 <span class="math inline">\(dp[i][j - coin]\)</span></strong>，与 0-1背包的区别就体现在此。</p><p><span class="math inline">\(dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - coin] + 1)\)</span></p></li></ul></li></ol></li><li><p>代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][amount + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化dp表，默认值为极大值，代表无解</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i], amount + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//base case</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - coin] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                     dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount] &gt; amount ? -<span class="number">1</span>: dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">         Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[j] = Math.min(dp[j], dp[j - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span>: dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="解法二一维先遍历背包再遍历物品">解法二：一维（先遍历背包，再遍历物品）</h6><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> 硬币组成金额为 i ，所需最少硬币个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 0\)</span> 金额为0，不取硬币。</p></li><li><p>递推关系</p><p>以 coins=[1,2,5] amount = 11 为例</p><p>k 枚硬币 <code>a1，... ,ak</code> 总和为 11，即 <span class="math inline">\(dp[11] = k\)</span>，上一状态就是 <span class="math inline">\(dp[11-ak] = k-1\)</span></p><p>状态转移方程为：</p><p><span class="math inline">\(dp[i]=min(dp[i-coin])+1\)</span>，<code>for coin in coins  and if  i &gt;= coin</code></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//特殊判断，可有可无</span></span><br><span class="line">        <span class="keyword">if</span>(coins.length == <span class="number">1</span> &amp;&amp; amount % coins[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//硬币面额至少为1，最多为amount</span></span><br><span class="line">        Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//外循环为dp数组从1开始的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; amount + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//内循环为 coins 数组元素值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.length; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> coin = coins[j];</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= coin)</span><br><span class="line">                    <span class="comment">//得到上一状态的最小值</span></span><br><span class="line">                    dp[i] = Math.min((dp[i - coin] + <span class="number">1</span>), dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">       <span class="comment">//如果dp[amount]没更新，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span>: dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="零钱兑换medium-1">518，零钱兑换Ⅱ，medium</h5><p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 5, coins &#x3D; [1, 2, 5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 有四种方式可以凑成总金额:</span><br><span class="line">5&#x3D;5</span><br><span class="line">5&#x3D;2+2+1</span><br><span class="line">5&#x3D;2+1+1+1</span><br><span class="line">5&#x3D;1+1+1+1+1</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 3, coins &#x3D; [2]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 只用面额2的硬币不能凑成总金额3。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 10, coins &#x3D; [10] </span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>你可以假设：</p><p>0 &lt;= amount (总金额) &lt;= 5000 1 &lt;= coin (硬币面额) &lt;= 5000 硬币种类不超过 500 种 结果符合 32 位符号整数</p><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。组合问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> — 前 i 个硬币组成金额 j 的组合数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[..][0] = 1\)</span> 全部都不拿，只有这一种拿法。</p></li><li><p>递推关系</p><p><span class="math inline">\(dp[i][j]\)</span> 取决于是否选择 coin = coins[i-1]</p><ul><li>如果不选（即不将 coin 装入背包），<span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></li><li>如果选（即将 coin 装入背包），<span class="math inline">\(dp[i][j] = dp[i][j-coin]\)</span>，注意<strong>此处与 0-1背包 不同，硬币还可再选取。</strong></li></ul><p>要得到总的组合数，状态转移方程为：</p><p><span class="math inline">\(dp[i][j] = dp[i - 1][j] + dp[i][j-coin]\)</span></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][amount + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - coin];</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：通过观察可以发现，<code>dp</code>数组的转移只和<code>dp[i][..]</code>和<code>dp[i-1][..]</code>有关，所以可以压缩状态，进一步降低算法的空间复杂度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[j] += dp[j - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面两题为完全背包的变体：物品可以无限次选取，且<strong>考虑物品放入背包的顺序</strong>。</p><h5 id="组合总和medium">377，组合总和Ⅳ，medium</h5><p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums &#x3D; [1, 2, 3]</span><br><span class="line">target &#x3D; 4</span><br><span class="line"></span><br><span class="line">所有可能的组合为：</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line"></span><br><span class="line">请注意，顺序不同的序列被视作不同的组合。</span><br><span class="line">因此输出为 7。</span><br></pre></td></tr></table></figure><ul><li><p>题意分析</p><p>完全背包问题的变体：</p><p>数组的每个元素可以使用多次，直到等于target。</p><p>不同于完全背包：顺序不同的序列被视作不同的组合。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> —数组的元素组合为 i 的个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 1\)</span> 所有数都不选，只有一种。</p></li><li><p>状态转移方程</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/00df062b020fa03ff81e0a7000b1f3df.png" alt="image.png" /><figcaption>image.png</figcaption></figure><p>以 <code>nums =[1,2,3]，target = 4</code> 为例，</p><figure><img src="https://img-blog.csdnimg.cn/20210108113212272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>即将 <code>target = 4</code> 拆分为 <code>nums[i]</code> 和 <code>dp[target - nums[i]]</code>，最终得到 <span class="math inline">\(dp[4] = dp[3] + dp[2] + dp[1]\)</span></p><p>则状态转移方程为：</p><p><span class="math inline">\(dp[i] = sum(dp[i - num])\)</span> <code>for num in nums and if i &gt;= num</code></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &lt;= i)&#123;</span><br><span class="line">                    dp[i] += dp[i - num];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="单词拆分medium">139，单词拆分，medium</h5><p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。 你可以假设字典中没有重复的单词。 示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class="line">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><ul><li><p>题意分析</p><p>完全背包问题的变体：物品(<code>wordDict</code>中的单词)可以无限使用，直到填满背包（字符串s）。TRUE / False 问题。</p></li><li><p>思路</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> 字符串前 i 个字符组成的字符串 s[0,i-1] 能否拆分为 <code>wordList</code> 中的单词</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 0\)</span> 表示空串且合法。</p></li><li><p>递推关系</p><p>对于物品（<code>wordDict</code> 中的单词），要求有顺序放入背包（字符串s），则将物品迭代置于内循环，将背包迭代放在外循环，这样才能让物品按一定顺序放入背包中。</p><p>如果有单词 等于 字符串s的一部分，需要检查后面的字符串是否能放入背包。</p><p><span class="math inline">\(dp[i] = dp[i] | dp[i - len];\)</span><img src="https://img-blog.csdnimg.cn/20210108114808230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210108114808238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//s 为背包</span></span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String word : wordDict)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = word.length();</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= len &amp;&amp; word.equals(s.substring(i-len, i)))</span><br><span class="line">                    dp[i] = dp[i] | dp[i - len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="完全背包问题总结">完全背包问题总结</h5><p><strong>做题步骤</strong>：</p><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 完全背包问题 或 完全背包问题的变体。根据所求分为组合问题，True/False问题，最大最小问题。通常用<strong>一维 <span class="math inline">\(dp\)</span> 数组</strong>解题。</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法</p><ol type="1"><li><p>子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i]\)</span> 返回值是什么</p><ol start="2" type="1"><li>base case：通常为 <span class="math inline">\(dp[0]\)</span></li></ol></li><li><p>状态转移方程： <strong>先遍历背包，再遍历物品。</strong>这样才能保证放入顺序。</p></li></ol><p>组合问题公式 dp[i] += dp[i - num] True/False问题公式 dp[i] = dp[i] or dp[i - num] 最大最小问题公式 dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] = max(dp[i], dp[i - num]+1)</p></li><li><p>最终<strong>返回结果</strong></p></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <comments>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>idea导入Github分支</title>
      <link>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/</link>
      <guid>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/</guid>
      <pubDate>Wed, 06 Jan 2021 01:41:53 GMT</pubDate>
      
      <description>&lt;p&gt;在网上搜索了一圈没有特别简单直白的方法，把我的步骤贴在下面。 ### 1. 建立空文件夹 在任意位置新建文件夹即可。 ### 2. 使用Git Bash命令拉取分支&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在网上搜索了一圈没有特别简单直白的方法，把我的步骤贴在下面。 ### 1. 建立空文件夹 在任意位置新建文件夹即可。 ### 2. 使用Git Bash命令拉取分支</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20210106093532520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 具体命令为：<strong>git clone -b dev </strong> 后面是仓库的url <img src="https://img-blog.csdnimg.cn/20210106093652418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ### 3. 在 idea 中打开此项目 有可能会出现爆红，<a href="https://www.pianshen.com/article/85591420566/">参考</a>这篇文章解决。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      
      <comments>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
