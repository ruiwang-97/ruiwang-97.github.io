<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Wed, 10 Mar 2021 02:16:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LeetCode刷题—使用计数数组</title>
      <link>http://example.com/2021/03/10/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BD%BF%E7%94%A8%E8%AE%A1%E6%95%B0%E6%95%B0%E7%BB%84/</link>
      <guid>http://example.com/2021/03/10/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BD%BF%E7%94%A8%E8%AE%A1%E6%95%B0%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Wed, 10 Mar 2021 02:14:24 GMT</pubDate>
      
      <description>&lt;p&gt;此类题一般有一个元素值为&lt;strong&gt;1~n&lt;/strong&gt; 的数组，要求找到&lt;strong&gt;重复或缺失的数字&lt;/strong&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>此类题一般有一个元素值为<strong>1~n</strong> 的数组，要求找到<strong>重复或缺失的数字</strong>。</p><a id="more"></a><h5 id="找到所有数组中消失的数字easy">448，找到所有数组中消失的数字，easy</h5><p>给定一个范围在 1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p><p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p><p>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>题意：数组元素值为 1 ~ n，数组长度为n，有重复元素。</p><p>使用计数数组 count，从索引 1 存储 nums的元素值，count 元素值为0的下标即nums中缺失的元素。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//count数组的下标1~n用来存储nums数组元素1~n，count不含有的元素的下标即为没出现过的nums元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            count[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="错误的集合easy">645，错误的集合，easy</h5><p>集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。</p><p>给定一个数组 nums 代表了集合 S 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,2,2,4]</span><br><span class="line">输出: [2,3]</span><br></pre></td></tr></table></figure><p>注意:</p><p>给定数组的长度范围是 [2, 10000]。 给定的数组是无序的。</p><p><strong>题解</strong></p><p>和上面题的思路一致，找到计数数组count中元素为 0 的即为缺失元素，为2的即为重复元素。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findErrorNums(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            count[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="寻找重复数medium">287，寻找重复数，medium</h5><p>上面的双指针法已经是最优解法了，但计数数组的思想比较好想。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            count[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      <category domain="http://example.com/tags/%E6%95%B0%E7%BB%84/">数组</category>
      
      
      <comments>http://example.com/2021/03/10/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BD%BF%E7%94%A8%E8%AE%A1%E6%95%B0%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—回文问题</title>
      <link>http://example.com/2021/03/09/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%96%87%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/03/09/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%96%87%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Tue, 09 Mar 2021 06:44:19 GMT</pubDate>
      
      <description>&lt;p&gt;由一个整数问题引入。&lt;/p&gt;
&lt;p&gt;回文即 正序（从左向右）和倒序（从右向左）读都是一样的。常见的有整数、链表、字符串相关问题。&lt;/p&gt;
&lt;p&gt;先由整数问题引入。&lt;/p&gt;
&lt;h2 id=&quot;回文数&quot;&gt;回文数&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>由一个整数问题引入。</p><p>回文即 正序（从左向右）和倒序（从右向左）读都是一样的。常见的有整数、链表、字符串相关问题。</p><p>先由整数问题引入。</p><h2 id="回文数">回文数</h2><a id="more"></a><h4 id="整数反转easy">7，整数反转，easy</h4><p>给你一个 32 位的有符号整数 x ，返回 x 中每位上的数字反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−2<sup>31</sup>, 2<sup>31</sup> − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题需要注意的是x的范围，x∈[-2147483648, 2147483647]</p><p>考虑整数反转，只要不断取余并 / 10，即可取出末尾数字并构成新的反转数。如： <img src="https://img-blog.csdnimg.cn/20210309143302959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><p>可见此方法适用于 x为正或为负，循环的判断条件为 <code>x != 0</code> 即可。</p><p>但是需要注意的是 反转数 的范围，比如 x = 1147483619，反转后超过[−2<sup>31</sup>, 2<sup>31</sup> − 1]。则需要判断临界条件，<strong>判断第一次取余后的x</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee890586531264e25b92e600a50a7475.png" /></p><p>如图，如果此时<code>x &gt; 214748364</code> 说明已经超过范围，返回 0；如果此时<code>x = 214748364</code>，需要比较刚取出的末位数字与 7 的关系</p><p>负数同理</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e6282f5825b0df1868913d58e929ae47.png" /></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// x ≥ -2147483648 &amp;&amp; x ≤ 2147483647</span></span><br><span class="line">        <span class="comment">//将整数x不断取模，再x/10</span></span><br><span class="line">        <span class="comment">//x可正可负，判断条件为！= 0</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = x % <span class="number">10</span>;<span class="comment">//取模结果可正可负</span></span><br><span class="line">            <span class="comment">//判断剩余值是否越界</span></span><br><span class="line">            <span class="keyword">if</span>(res &gt; <span class="number">214748364</span> || res == <span class="number">214847364</span> &amp;&amp; tmp &gt; <span class="number">7</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res &lt; -<span class="number">214748364</span> || res == -<span class="number">214748364</span> &amp;&amp; tmp &lt; -<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//新的结果</span></span><br><span class="line">            res = res * <span class="number">10</span> + tmp;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这道题的思路，那么判断一个整数是否为回文数就很简单了，只需进行反转然后比较与原数字是否相等。</p><h4 id="回文数easy">9，回文数，easy</h4><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>代码</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = x;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(res &gt; <span class="number">214748364</span> || res == <span class="number">214748364</span> &amp;&amp; tmp &gt; <span class="number">7</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res &lt; -<span class="number">214748364</span> || res == -<span class="number">214748364</span> &amp;&amp; tmp &lt; -<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + tmp;</span><br><span class="line">            x /= <span class="number">10</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="回文串">回文串</h2><p>有了上面判断整数是否回文，再看字符串的问题。</p><h4 id="验证回文串easy">125，验证回文串，easy</h4><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>说明：本题中，我们将空字符串定义为有效的回文串。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;race a car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>回文常用<strong>左右指针</strong>来判断</p><p>此题难点在于只考虑字母和数字且忽略字母大小写，要进行合法字符的判断再用快慢指针比较字符是否相同。</p><p><strong>代码</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;     </span><br><span class="line">        <span class="comment">//首先将s转为没有空格全部小写的字符串</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                sb.append(Character.toLowerCase(c));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span> || c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = sb.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sb.charAt(left)==(sb.charAt(right)))&#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于回文串，也常用动态规划来求最XX个数。</p><p>如下两道题。</p><h4 id="回文子串medium">647，回文子串，medium</h4><p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;aaa&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>题目中要求回文子串个数，维护一个变量cnt，找到回文子串就将cnt+1</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> —— s[i]到s[j]形成的字符串是否是回文串</p></li><li><p>base case</p><p>单个字符一定为回文，返回TRUE</p><p><span class="math inline">\(dp[i][i] = true;\)</span></p></li><li><p>递推关系</p><p>如果 <code>s[i]==s[j]</code>，则比较中间部分是否是一个回文字符串</p><ul><li>j - i &lt;= 2，中间不含或只含一个子串，<code>dp[i][j] = true</code></li><li>否则，<span class="math inline">\(dp[i][j]\)</span> 取决于 <span class="math inline">\(dp[i+1][j - 1]\)</span>。注意遍历顺序！可以像如图 ：i 从下至上，j 从左至右遍历。 <img src="https://img-blog.csdnimg.cn/20210309144313182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li></ul><ol start="4" type="1"><li><p>返回值</p><p>上面得到的 <span class="math inline">\(dp[i][j]\)</span> 如果为 true，cnt++。最后返回cnt的值。</p></li></ol></li></ol><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//求dp[i][j]需要通过dp[i+1][j-1] 遍历顺序从下到上，从左到右</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt;= <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]))&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最长回文子串medium">5，最长回文子串，medium</h4><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;ac&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>看到最长联想到用动态规划解题。</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> ——子串<code>s[i...j]</code> （闭区间）是否为回文子串</p></li><li><p>递推关系</p><ol type="1"><li><p>base case</p><p>单个字符一定为回文，返回TRUE</p><p><span class="math inline">\(dp[i][i] = true;\)</span></p></li><li><p>状态转移方程</p><p>由题意，<code>s[i] == s[j]</code> 时子串<code>s[i...j]</code>为回文；去掉头尾后仍是回文时才有 <span class="math inline">\(dp[i][j] = true\)</span>。</p><p>则 <span class="math inline">\(dp[i][j] = (s[i] == s[j]) 与 dp[i+1][j-1]\)</span>。</p><p>边界条件： <code>i + 1 ≥ j - 1</code> =&gt; <code>j - i ≤ 2</code>，只需判断 <code>s[i] == s[j]</code>，不用参考以前的 <code>dp</code>值。</p><p>当 <code>j - i &gt; 2</code> 时，需要考虑 <span class="math inline">\(dp[i+1][j-1]\)</span>，即“有后效性”。在二维表中表现为参考左下方结果才能得到当前的 <span class="math inline">\(dp\)</span> 值。</p></li></ol></li><li><p>返回值</p><p>初始化变量 <code>maxLen</code> 记录最长回文子串长度， <code>start</code> 记录开始位置。</p></li></ol><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) != s.charAt(j))&#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i - j &gt;= -<span class="number">2</span>)</span><br><span class="line">                        dp[i][j] = <span class="keyword">true</span>; </span><br><span class="line">                        <span class="comment">// dp[i][j] = s.charAt(i) == s.charAt(j);</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                        <span class="comment">// dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; dp[i + 1][j - 1];</span></span><br><span class="line">                &#125;</span><br><span class="line">           </span><br><span class="line">                <span class="comment">//此时dp[i][j]=true，是回文子串，还要更新开始位置和长度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen)&#123;</span><br><span class="line">                    start = i;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>对于填表，由于构成子串，因此 <code>i</code> 和 <code>j</code> 的关系是 <code>i &lt;= j</code> ，因此只需要填这张表格对角线以上的部分。</p><p>由于需要满足“无后效性”，填表顺序也需要注意。</p><p><strong>说明：表格中的数字表示「填表顺序」，从 1 开始</strong>。表格外的箭头和数字也表示「填表顺序」，与表格中的数字含义一致。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9e7b4a1321aa0c234a2418668127cf3b.png" /></p><p><img src="https://img-blog.csdnimg.cn/img_convert/80831a741823e2bcbbcd897382b39a69.png" /></p><h2 id="回文链表">回文链表</h2><p>回文也可以应用在链表中，思路较简单。 #### 234，回文链表，easy</p><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>进阶： 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p><strong>题解</strong></p><p>利用快慢指针（快速度为慢速度的2倍）找到中间节点，将后半段链表进行反转，再比较反转后的链表与原链表前半段是否相同。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode middle = getMiddle(head);<span class="comment">//链表中点</span></span><br><span class="line">        ListNode newHead = reverse(middle.next);<span class="comment">//反转后半部分链表</span></span><br><span class="line">        <span class="comment">//比较前半部分和后半部分链表的节点值</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val != newHead.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="comment">//返回链表的中间节点（如果链表长度为偶数，为左边的中间节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getMiddle</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode temp = reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展</strong></p><p>此方法符合时间复杂度为 O(n)，空间复杂度为 O(1)。</p><p>链表不支持随机访问，从头开始查找，时间复杂度为O(n)，没有用栈等存储，空间复杂度为 O(1)。</p><p><strong>链表与数组进行对比：</strong></p><p>数组的优点</p><ul><li>随机访问性强</li><li>查找速度快</li></ul><p>数组的缺点</p><ul><li>插入和删除效率低</li><li>可能浪费内存</li><li>内存空间要求高，必须有足够的连续内存空间。</li><li>数组大小固定，不能动态拓展</li></ul><p>链表的优点</p><ul><li>插入删除速度快</li><li>内存利用率高，不会浪费内存</li><li>大小没有固定，拓展很灵活。</li></ul><p>链表的缺点</p><ul><li>不能随机查找，必须从第一个开始遍历，查找效率低</li></ul><table><thead><tr class="header"><th>时间复杂度</th><th>数组</th><th>链表</th></tr></thead><tbody><tr class="odd"><td>读取</td><td>O(1)</td><td>O(n)</td></tr><tr class="even"><td>插入</td><td>O(n)</td><td>O(1)</td></tr><tr class="odd"><td>删除</td><td>O(n)</td><td>O(1)</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%9B%9E%E6%96%87/">回文</category>
      
      
      <comments>http://example.com/2021/03/09/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%9B%9E%E6%96%87%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>狂神MyBatis笔记</title>
      <link>http://example.com/2021/03/08/%E7%8B%82%E7%A5%9EMyBatis%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2021/03/08/%E7%8B%82%E7%A5%9EMyBatis%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 08 Mar 2021 11:47:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;代码实现&quot;&gt;代码实现&lt;/h2&gt;
&lt;p&gt;数据持久层mapper中只需要接口UserMapper，不需要实现类，而是通过.xml文件的naemespace绑定对应接口。&lt;/p&gt;
&lt;h3 id=&quot;编写代码&quot;&gt;编写代码&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="代码实现">代码实现</h2><p>数据持久层mapper中只需要接口UserMapper，不需要实现类，而是通过.xml文件的naemespace绑定对应接口。</p><h3 id="编写代码">编写代码</h3><a id="more"></a><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口实现类由原来的...Impl转为一个Mapper配置文件...Mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace = 绑定一个对应的Mapper接口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 千万不能写错!!!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面的id对应上面接口的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="crud">CRUD</h3><h4 id="namespace">1. namespace</h4><p>namespace中的包名要和mapper接口的包名一致</p><h4 id="selectinsertupdatedelete语句">2. select、insert、update、delete语句</h4><ul><li>id：对应接口的方法名</li><li>parameterType：参数类型</li><li>resultType：Sql语句执行的返回值</li></ul><p>例1：实现根据id查询用户</p><ol type="1"><li><p>Mapper接口中添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加Select语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面的id对应上面接口的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户，用&#x27;#&#x27;取方法参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from User whele id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>例2：增加用户</p><ol type="1"><li><p>Mapper接口中添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加Select语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面的id对应上面接口的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户，用&#x27;#&#x27;取方法参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from User whele id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插入用户,对象中对属性可以直接取出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parametertype</span>&quot;<span class="attr">com.wu.pojo.User</span>&quot;&gt;</span></span><br><span class="line">insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>例3：修改用户</p><ol type="1"><li><p>Mapper接口中添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加Select语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面的id对应上面接口的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户，用&#x27;#&#x27;取方法参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from User whele id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插入用户,对象中对属性可以直接取出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parametertype</span>&quot;<span class="attr">com.wu.pojo.User</span>&quot;&gt;</span></span><br><span class="line">insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--更新用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">update user set name=#&#123;name&#125;,pwd =#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>例4：删除用户</p><ol type="1"><li><p>Mapper接口中添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加Select语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面的id对应上面接口的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户，用&#x27;#&#x27;取方法参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from User whele id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插入用户,对象中对属性可以直接取出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parametertype</span>&quot;<span class="attr">com.wu.pojo.User</span>&quot;&gt;</span></span><br><span class="line">insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--更新用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">update user set name=#&#123;name&#125;,pwd =#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="万能map">3. 万能map</h4><p>实体类，或数据库中的表，字段或参数过多，考虑使用Map。</p><ul><li>在 UserMapper 添加接口方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserById2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>在UserMapper.xml中添加该方法的语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个后面的参数对应map的key，名字可以自己随便取，不要求和实体类一一对应--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;userid&#125; and name =#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;userid&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">User user = mapper.getUserById2(map);</span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map传递参数，直接在sql中取出key即可！ 【parameter=“map”】</p><p>对象传递参数，直接在sql中取出对象的属性即可！ 【parameter=“Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到</p><p>多个参数用Map , <strong>或者注解！</strong></p></li></ul><h4 id="模糊查询">4. 模糊查询</h4><ul><li><p>在 UserMapper 添加接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserLike</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加该方法的语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--也可以用concat拼接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      <category domain="http://example.com/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="http://example.com/tags/MyBatis/">MyBatis</category>
      
      
      <comments>http://example.com/2021/03/08/%E7%8B%82%E7%A5%9EMyBatis%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot员工管理项目</title>
      <link>http://example.com/2021/03/07/SpringBoot%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</link>
      <guid>http://example.com/2021/03/07/SpringBoot%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</guid>
      <pubDate>Sun, 07 Mar 2021 08:50:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;jdk1.8&lt;/li&gt;
&lt;li&gt;maven 3.3.9&lt;/li&gt;
&lt;li&gt;SpringBoot 2.1.8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;导入静态资源&quot;&gt;导入静态资源&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/13P_1dRRWxqzdQFG1Y1I3UQ&quot;&gt;百度网盘链接&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="环境准备">环境准备</h2><ul><li>jdk1.8</li><li>maven 3.3.9</li><li>SpringBoot 2.1.8</li></ul><h2 id="导入静态资源">导入静态资源</h2><p><a href="https://pan.baidu.com/s/13P_1dRRWxqzdQFG1Y1I3UQ">百度网盘链接</a></p><a id="more"></a><p>提取码：wrbg</p><p>将asserts目录下的css、img、js等静态资源放置static目录下 <img src="https://img-blog.csdnimg.cn/20210307154859589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 将html静态资源放置templates目录下 <img src="https://img-blog.csdnimg.cn/20210307154922944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h2 id="创建项目">创建项目</h2><ul><li>File-New-Project-Spring Initializr快速创建Spring Boot项目，修改Group名，注意Java Version版本的选择为8。</li><li>引入依赖，选择Web-Spring Web，Template Engines-Thymeleaf，Lombok，如图所示。<img src="https://img-blog.csdnimg.cn/20210307153538485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li></ul><h2 id="模拟数据库">模拟数据库</h2><h3 id="创建数据库实体类">1. 创建数据库实体类</h3><p>新建 pojo 包，用来存放实体类</p><p>在 pojo 包下创建一个部门表Department和一个员工表Employee <img src="https://img-blog.csdnimg.cn/20210307155123929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h5 id="部门表">部门表：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="员工表">员工表：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;<span class="comment">//0:女 1：男</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">        <span class="comment">//默认的创建日期</span></span><br><span class="line">        <span class="keyword">this</span>.birth = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>由于导入了lombok依赖，使用@Data注解即可get属性，<span class="citation" data-cites="AllArgsConstructor有参构造">@AllArgsConstructor有参构造</span>，<span class="citation" data-cites="NoArgsConstructor无参构造">@NoArgsConstructor无参构造</span>。</p></blockquote><h3 id="编写dao层">2. 编写Dao层</h3><p>模拟数据库，完成对员工的增删改查任务。</p><h5 id="部门dao">部门Dao</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; department = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        department = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//创建一个部门表</span></span><br><span class="line"></span><br><span class="line">        department.put(<span class="number">1</span>, <span class="keyword">new</span> Department(<span class="number">1</span>, <span class="string">&quot;市场部&quot;</span>));</span><br><span class="line">        department.put(<span class="number">2</span>, <span class="keyword">new</span> Department(<span class="number">2</span>, <span class="string">&quot;教学部&quot;</span>));</span><br><span class="line">        department.put(<span class="number">3</span>, <span class="keyword">new</span> Department(<span class="number">4</span>, <span class="string">&quot;运营部&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得所有部门信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Department&gt; <span class="title">getDepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过id获得部门</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartmentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="员工dao">员工Dao</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//创建一个部门表</span></span><br><span class="line">employees.put(<span class="number">101</span>, <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">&quot;张晓明&quot;</span>,<span class="string">&quot;vdx342@qq.com&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> Department(<span class="number">1</span>, <span class="string">&quot;市场部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">102</span>, <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">&quot;黄校长&quot;</span>, <span class="string">&quot;qas261@162.com&quot;</span>,<span class="number">0</span>, <span class="keyword">new</span> Department(<span class="number">2</span>,<span class="string">&quot;教学部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">103</span>, <span class="keyword">new</span> Employee(<span class="number">103</span>,<span class="string">&quot;王例子&quot;</span>, <span class="string">&quot;edf123261@162.com&quot;</span>,<span class="number">0</span>, <span class="keyword">new</span> Department(<span class="number">3</span>,<span class="string">&quot;运营部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">104</span>, <span class="keyword">new</span> Employee(<span class="number">104</span>,<span class="string">&quot;安吉拉&quot;</span>, <span class="string">&quot;wd561@162.com&quot;</span>,<span class="number">1</span>, <span class="keyword">new</span> Department(<span class="number">4</span>,<span class="string">&quot;运营部&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">104</span>;</span><br><span class="line">    <span class="comment">//增加一个员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee emp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(emp.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            emp.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//emp部门由调用DepartmentDao包中的getDepartmentById()方法得到</span></span><br><span class="line">        emp.setDepartment(departmentDao.getDepartmentById(emp.getDepartment().getId()));</span><br><span class="line">        employees.put(emp.getId(), emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部员工信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id查询员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现">具体实现</h2><h3 id="一-默认访问首页">(一) 默认访问首页</h3><p>在controller类可以使用RequestMapping，浏览器发送 “/” 请求来到 templates 下的 index.html 页面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样每次都定义一个空方法比较麻烦，在MyMvcConfig 类中写webMvcConfigurer方法使所有组件一起起作用。修改引入的index.html 名为 login.html。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加视图映射</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">｝</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 将html文件其中的语法改为Thymeleaf，所有页面的静态资源都需要使用其接管。注意所有html都需要引入Thymeleaf命名空间。 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure> 例如，在 <code>index.html</code> 中 <img src="https://img-blog.csdnimg.cn/20210307160557602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 其他页面亦是如此，再次测试访问，正确显示页面</p><p>在application.properties修改url路径 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/kuang</span></span><br></pre></td></tr></table></figure> 运行，显示首页为 <img src="https://img-blog.csdnimg.cn/20210307162325534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h3 id="二国际化">（二）国际化</h3><h4 id="编写国际化配置文件抽取页面需要显示的国际化消息">1）、编写国际化配置文件，抽取页面需要显示的国际化消息</h4><p>在resources 下新建 i18n 包，包中新建配置文件<code>login.properties</code>和<code>login_en_US.properties</code>，自动生成如下形式： <img src="https://img-blog.csdnimg.cn/20210307161252704.png" alt="在这里插入图片描述" /></p><p>右键选择Add ... 下方 + 添加新语言，输入<code>zh_CN</code> 自动生成 <code>login_zh_CN.properties</code> <img src="https://img-blog.csdnimg.cn/20210307161350762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>在 Settings/Preferences 中找到 File Encodings，选为<strong>UTF8</strong>，并勾选自动转为ascii码。（此次是一个坑，不这样设置后面页面显示会出现乱码。） <img src="https://img-blog.csdnimg.cn/20201216233022753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 添加属性： <img src="https://img-blog.csdnimg.cn/20201217090321556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>配置好的文件如图 <img src="https://img-blog.csdnimg.cn/20210307161441122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210307161455434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210307161509114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h4 id="spring-boot自动配置好了管理国际化资源文件的组件">2）、Spring Boot自动配置好了管理国际化资源文件的组件</h4><p>我们的配置文件可以直接放在类路径下叫messages.properties。现在把配置文件放在i18n下，只需在application.properties下修改包名。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.messages.basename&#x3D;i18n&#x2F;login</span><br></pre></td></tr></table></figure></p><h4 id="去页面获取国际化的值">3）、去页面获取国际化的值（#{})</h4><p>在index.html 文件的相应位置用<code>th:**=&quot;#&#123;&#125;&quot;</code>修改 <img src="https://img-blog.csdnimg.cn/20201217201628675.png" alt="在这里插入图片描述" /> 此时显示页面为 <img src="https://img-blog.csdnimg.cn/20201217202555905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 此时，根据浏览器语言设置的信息即可切换中英文显示页面</p><h4 id="点击链接切换国际化">4）、点击链接切换国际化</h4><p>上述实现了登录首页显示为中文，我们在index.html页面中可以看到两个标签</p><p><code>&lt;a class=&quot;btn btn-sm&quot;&gt;中文&lt;/a&gt;</code> <code>&lt;a class=&quot;btn btn-sm&quot;&gt;English&lt;/a&gt;</code> 也就对应着视图中的 <img src="https://img-blog.csdnimg.cn/2021030716202535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 那么我们怎么通过这两个标签实现中英文切换呢?</p><p>首先在这两个标签上加上跳转链接并带上相应的参数 <img src="https://img-blog.csdnimg.cn/2021030716180356.png" alt="在这里插入图片描述" /></p><p>此时点击中文链接，url为 <img src="https://img-blog.csdnimg.cn/20210307162130307.png" alt="在这里插入图片描述" /></p><p>点击英文链接，显示页面为 <img src="https://img-blog.csdnimg.cn/20210307162140863.png" alt="在这里插入图片描述" /></p><p>但还没有实现点击链接切换。</p><p>先分析一下源码，首先搜索WebMvcAutoConfiguration，可以在其中找到关于一个方法 <code>localeResolver()</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果用户配置了,则使用用户配置好的</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//用户没有配置,则使用默认的</span></span><br><span class="line">   AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">   localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">   <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 再点开默认地区解析器的AcceptHeaderLocaleResolver对象，点击此类查看源码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderLocaleContextResolver</span> <span class="keyword">implements</span> <span class="title">LocaleContextResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Locale&gt; supportedLocales = <span class="keyword">new</span> ArrayList(<span class="number">4</span>);</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Locale defaultLocale;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AcceptHeaderLocaleContextResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> 可以发现它继承了LocaleResolver接口，实现了地区解析</p><p>类似地，我们只需要编写一个自己的地区解析器，继承LocaleResolver接口，重写其方法即可。</p><h5 id="编写区域解析器">编写区域解析器</h5><p><img src="https://img-blog.csdnimg.cn/20210307163114219.png" alt="在这里插入图片描述" /> 并重写<code>resolveLocale</code> 方法，对应着index.html 文件中请求参数 l - 如果点击中文按钮，则跳转到/index.html(l='zh_CN')页面 - 如果点击English按钮，则跳转到/index.html(l='en_US')页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocalResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果获取请求中的语言参数链接，就构造一个自己的</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);<span class="comment">//l对应着index.html文件中的跳转链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(language);</span></span><br><span class="line">        <span class="comment">//如果没有就使用默认</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">//如果请求的链接携带了国际化参数，就构造一个自己的</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            String[] s = language.split(<span class="string">&quot;_&quot;</span>);<span class="comment">//zh_CN</span></span><br><span class="line">            <span class="comment">//国家、地区</span></span><br><span class="line">             locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入容器">注入容器</h5><p>向容器中注入自定义的国际化组件才能生效</p><p>在<code>MyMvcConfig</code> 中添加代码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocalResolver();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> 重启项目即可实现国际化切换！</p><p>点击Engilsh <img src="https://img-blog.csdnimg.cn/20210307163828380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 点击中文<img src="https://img-blog.csdnimg.cn/20210307163856219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h3 id="三登录">（三）登录</h3><p>输入正确用户名密码。点击 <code>登录</code> 按钮即可登录进入后台，即dashboard.html页面。</p><h4 id="首先在index.html中添加表单提交地址">1）、首先在index.html中添加表单提交地址</h4><p>并添加<code>name</code>属性方便后面传参。 <img src="https://img-blog.csdnimg.cn/20210308200441814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p><h4 id="在controller-包新建logincontroller-类">2）、在controller 包新建LoginController 类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//具体的业务</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dashboard&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//消息回显，需要model</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.html 文件中添加键 msg 显示错误提示文本 <img src="https://img-blog.csdnimg.cn/20210308200834962.png" /></p><h4 id="测试">3）、测试：</h4><p>当输入正确用户名：admin，正确密码：123 时，进入；当输入错误信息时页面提示。 <img src="https://img-blog.csdnimg.cn/20210308200441814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /> 此时可以登录，但url中暴露了用户信息。编写一个映射，将dashboard 映射到main.html。</p><p>在 <code>MyMvcConfig</code> 类中的重写方法添加新的视图映射， <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br></pre></td></tr></table></figure> 并将 LoginController 类采取<strong>重定向</strong>的方式 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model, HttpSession httpSession)</span></span>&#123;</span><br><span class="line">        <span class="comment">//具体的业务</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">//重定向</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//消息回显，需要model</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 此时再次登录，显示的url 就隐藏了用户信息 <img src="https://img-blog.csdnimg.cn/20210308201855103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /> 但此时发现，直接访问 main.html 就进入了首页，造成安全问题，故需要对一些页面进行拦截。</p><h3 id="四登录拦截器">（四）登录拦截器</h3><p>用户登录后，将用户信息存入session。 - 如果发现session为空，说明没有登录，需要拦截 - 否则，不需要拦截</p><p>在 LoginController 类中将用户信息存入session <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model, HttpSession httpSession)</span></span>&#123;</span><br><span class="line">        <span class="comment">//具体的业务</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;loginUser&quot;</span>, username);<span class="comment">//拦截器获取此session</span></span><br><span class="line">            <span class="comment">//重定向</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//消息回显，需要model</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 在 config 包中新建 LoginHandlerInterceptot 类，实现 <code>HandlerInterceptor</code>接口，并重写 preHandle 方法。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//登录成功之后应该有用户的session</span></span><br><span class="line">        Object userSession = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="comment">//userSession为空，说明没有登录，需要拦截</span></span><br><span class="line">        <span class="keyword">if</span>(userSession == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//告诉一个消息</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;没有权限， 请先登录！&quot;</span>);</span><br><span class="line">            <span class="comment">//再返回到首页</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line">在 `MyMvcConfig` 类中添加拦截器，也就是重写addInterceptors 方法。注意排除登录页面及静态资源。</span><br><span class="line">```java</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> 此时，再直接输入main.html 就会提醒，对此页面进行了拦截。 <img src="https://img-blog.csdnimg.cn/20210308203154870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      <category domain="http://example.com/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="http://example.com/tags/%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/">员工管理项目</category>
      
      
      <comments>http://example.com/2021/03/07/SpringBoot%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单调栈的三个问题</title>
      <link>http://example.com/2021/03/03/%E5%8D%95%E8%B0%83%E6%A0%88%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/03/03/%E5%8D%95%E8%B0%83%E6%A0%88%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Wed, 03 Mar 2021 06:34:13 GMT</pubDate>
      
      <description>&lt;p&gt;一上午做了三道单调栈的问题，算是小摸了一下单调栈的套路，虽然很难想，掌握了规律还是很好做出来的！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/largest-rectangle-in-histogram/&quot;&gt;84，柱状图中最大的矩形，hard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/daily-temperatures/&quot;&gt;739，每日温度，medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/trapping-rain-water/&quot;&gt;42，接雨水，hard&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一上午做了三道单调栈的问题，算是小摸了一下单调栈的套路，虽然很难想，掌握了规律还是很好做出来的！</p><p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">84，柱状图中最大的矩形，hard</a></p><p><a href="https://leetcode-cn.com/problems/daily-temperatures/">739，每日温度，medium</a></p><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42，接雨水，hard</a></p><a id="more"></a><h5 id="柱状图中最大的矩形hard">84，柱状图中最大的矩形，hard</h5><p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png" /></p><p>以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png" /></p><p>图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,1,5,6,2,3]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>先考虑暴力解法，也就是对数组的每个高度来说，向左找、向右找到第一个比它小的高度，即可确定矩阵的宽，很容易就得到最大面积。</p><p>但这样时间复杂度比较高，每个元素都要循环两遍，为<em>O</em>(N<sup>2</sup>)，考虑怎么优化呢？</p><p>以空间换时间，对每个元素向后找比它小的，才能计算面积，符合【栈】先进后出的规则。用一个单调栈来记录<strong>下标</strong>（高度可以用下标来表示），这样就能很清楚的确定形成矩形的宽了。</p><p>如果当前的高度比它之前的高度（栈顶元素的高度）严格小于的时候，就可以直接确定以栈顶元素为高的矩形的面积，向左回退的时候，其实就可以当中间这些柱形不存在一样。</p><p>还有一个细节，为了确定数组两端元素的高为矩形的面积，在数组两端添加比 1 小的元素，这样就始终保证栈非空。</p><p>下面图帮助理解</p><p><img src="https://pic.leetcode-cn.com/7e876ae756613053b3432cebc9274e9dbdaafd2e6b8492d37fc34ee98f7655ea-%E5%9B%BE%E7%89%87.png" /></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line"><span class="comment">// //暴力解</span></span><br><span class="line"><span class="comment">//         int res = 0;</span></span><br><span class="line"><span class="comment">//         for(int i = 0; i &lt; heights.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             int left = i;</span></span><br><span class="line"><span class="comment">//             int right = i;</span></span><br><span class="line"><span class="comment">//             //向左找可以构成矩形的</span></span><br><span class="line"><span class="comment">//             while(left &gt; 0 &amp;&amp; heights[left - 1] &gt;= heights[i])&#123;</span></span><br><span class="line"><span class="comment">//                 left--;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             //向右找可以构成矩形的</span></span><br><span class="line"><span class="comment">//             while(right &lt; heights.length - 1 &amp;&amp; heights[right + 1] &gt;= heights[i])&#123;</span></span><br><span class="line"><span class="comment">//                 right++;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             int width = right - left + 1;</span></span><br><span class="line"><span class="comment">//             res = Math.max(res, width * heights[i]);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return res;</span></span><br><span class="line"><span class="comment">//单调栈：将数组左右两侧各加 &lt; 1 的柱子，这样所有元素的左边都比当前柱子小，只需找到右边第一个比当前柱子小的，即可确定以当前高度为高的矩形面积（宽即为左右两边第一个比当前柱子小的两柱子之间距离，左边即为栈顶元素）</span></span><br><span class="line">        <span class="comment">//重构数组</span></span><br><span class="line">        <span class="keyword">int</span> len = heights.length;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">2</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        nums[len + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            nums[i] = heights[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//单调栈中确定以数组每个元素的高度确定矩形的面积，并维护最大值res</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len + <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//当前高度比栈顶高度小即可确定栈顶元素的高度为高的矩形面积</span></span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; nums[i] &lt; nums[stack.peekLast()])&#123;</span><br><span class="line">                <span class="comment">//栈顶元素出栈</span></span><br><span class="line">                <span class="keyword">int</span> h = nums[stack.removeLast()];</span><br><span class="line">                <span class="comment">//栈顶元素的高度为高的矩形面积</span></span><br><span class="line">                res = Math.max(res, h * (i - stack.peekLast() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="每日温度medium">739，每日温度，medium</h5><p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p><p><strong>题解</strong></p><p>首先想到暴力解法，两层for循环，搜索每个元素后面比它大的值，就得到每个元素需要等待的天数。</p><p>此题目的是<u>向右</u>找到比当前索引对应的高度 高 的 第一个柱体，所以需要维护一个递减栈。</p><p>遍历数组元素，当前索引对应的高度比栈顶元素对应高度 大，即弹出栈顶并将索引差记录到结果数组。</p><figure><img src="https://pic.leetcode-cn.com/1614494588-CkmPkk-%E6%A0%88739%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6%E6%AD%A3%E5%BA%8F%E5%8A%A8%E7%94%BB1.gif" alt="动画演示" /><figcaption>动画演示</figcaption></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()])&#123;</span><br><span class="line">                <span class="keyword">int</span> idx = stack.pop();</span><br><span class="line">                res[idx] = i - idx;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接雨水hard">42，接雨水，hard</h5><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" /></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>依然是遍历到右面不比自己低的柱子时，会形成坑接住雨水。所以采用【单调栈】。</p><p>维护一个递减的单调栈，仍记录下标，栈中每个元素表示接雨水的【左侧柱体】。</p><p>遍历数组元素，当前元素对应高度大于栈顶元素对应高度，则能形成雨水，栈顶元素弹出，并记录其索引，去除栈中元素对应高度重复的元素（为了不重复计算）。计算雨水时，仍然采用高度*宽度，<code>宽度 = 当前遍历索引 - 栈顶索引 - 1</code>；<code>高度 = 两侧柱体取最矮的 - 上面记录的弹出栈的索引对应的高度</code>。因为以记录的柱体作为左侧柱体的雨水已经计算过了！</p><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/dan-diao-zhan-jie-jue-jie-yu-shui-wen-ti-by-sweeti/">可以跟着甜姨的图解理解一下</a></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;        </span><br><span class="line"><span class="keyword">if</span>(height.length == <span class="number">0</span> || height == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = height.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peekLast()])&#123;</span><br><span class="line">                <span class="keyword">int</span> popIdx = stack.removeLast();</span><br><span class="line">                <span class="comment">//去除高度重复的栈顶</span></span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; height[stack.peekLast()] == height[popIdx])&#123;</span><br><span class="line">                    stack.removeLast();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算雨水面积</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">int</span> idx = stack.peekLast();</span><br><span class="line">                    <span class="comment">//雨水面积为 宽*高，宽是当前元素与栈顶元素的距离，高取雨水两边的较矮高度-已经计算过的高度</span></span><br><span class="line">                    res += (i - idx - <span class="number">1</span>) * (Math.min(height[i], height[idx]) - height[popIdx]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>这三道题都可以用单调栈来解，各自也有不同的解法。总的来说，【单调栈】以空间换时间，使暴力解法的左右两次循环变为朝一个方向循环一次。在向左。</p><p>还有一个细节，就是记录下标，而不是将元素值入栈，这是为了方便计算间隔来计算面积，写代码时要提醒自己。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/">单调栈</category>
      
      
      <comments>http://example.com/2021/03/03/%E5%8D%95%E8%B0%83%E6%A0%88%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>狂神HTML笔记</title>
      <link>http://example.com/2021/03/02/%E7%8B%82%E7%A5%9EHTML%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2021/03/02/%E7%8B%82%E7%A5%9EHTML%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 02 Mar 2021 07:43:34 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;初识html&quot;&gt;1.初识HTML：&lt;/h1&gt;
&lt;figure&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20210302152918212.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;figcaption&gt;在这里插入图片描述&lt;/figcaption&gt;
&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="初识html">1.初识HTML：</h1><figure><img src="https://img-blog.csdnimg.cn/20210302152918212.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><a id="more"></a><h1 id="元素标签属性内容">2.元素=标签+属性+内容</h1><h3 id="网页基本标签">（1）网页基本标签</h3><ol type="1"><li>标题标签 <code>&lt;h1&gt;一级标签&lt;/h1&gt;</code> <code>&lt;h2&gt;二级标签&lt;/h2&gt;</code></li><li>段落标签 <code>&lt;p&gt;跑得快 跑得快&lt;/p&gt;</code></li><li>水平线标签 <code>&lt;hr/&gt;</code></li><li>换行标签 <code>跑得快 跑得快&lt;br/&gt;</code></li><li>粗体、斜体 <code>&lt;strong&gt;i love u&lt;/strong&gt;</code> <code>&lt;em&gt;i love u&lt;/em&gt;</code></li><li>特殊符号 空格：  <code>空&amp;nbsp;&amp;nbsp; 格</code> 大于：&gt; <code>4 &amp;gt;3</code> 小于：&lt; <code>2 &amp;lt;4</code></li></ol><h3 id="图像标签">（2）图像标签</h3><p><img src="https://img-blog.csdnimg.cn/20210302153014705.png" alt="在这里插入图片描述" /> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--img学习</span></span><br><span class="line"><span class="comment">    src:图片地址，推荐使用相对路径</span></span><br><span class="line"><span class="comment">    ../ ——上一级目录</span></span><br><span class="line"><span class="comment">    alt:图片名字（必填）</span></span><br><span class="line"><span class="comment">    title：鼠标悬停时显示的信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resource/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;狂神头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure> ### （3）超链接标签 <img src="https://img-blog.csdnimg.cn/20210302153042809.png" alt="在这里插入图片描述" /></p><p>href：必填，表示要跳转到哪个页面 target：表示窗口在哪里打开</p><h4 id="a页面间链接">a、页面间链接</h4><p><img src="https://img-blog.csdnimg.cn/20210302153104395.png" alt="在这里插入图片描述" /> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure> 图片链接： <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resource/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;狂神头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure> #### b、锚链接 1. 需要一个锚标记 2. 跳转到标记 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--锚标记：top--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span> = <span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用&quot;#&quot;标记 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure> #### c、功能性链接 1. 邮件链接：mailto 3. QQ链接：搜索QQ推广，在推广工具中获取 <img src="https://img-blog.csdnimg.cn/20210302153249536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h3 id="补充块元素和行内元素">【补充】块元素和行内元素</h3><figure><img src="https://img-blog.csdnimg.cn/20210302153428454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h3 id="列表标签">（4）列表标签</h3><p><img src="https://img-blog.csdnimg.cn/20210302153452335.png" /></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">    dl: 标签</span></span><br><span class="line"><span class="comment">    dt: 列表名称</span></span><br><span class="line"><span class="comment">    dd: 列表内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签">（5）表格标签</h3><p><img src="https://img-blog.csdnimg.cn/2021030215354221.png" alt="在这里插入图片描述" /> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格 table</span></span><br><span class="line"><span class="comment">    行 tr</span></span><br><span class="line"><span class="comment">    列 td--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>学生成绩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二、三行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>狂神<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第四、五行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Rui<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure> 效果： <img src="https://img-blog.csdnimg.cn/2021030215361459.png" alt="在这里插入图片描述" /></p><h3 id="媒体元素">（6）媒体元素</h3><figure><img src="https://img-blog.csdnimg.cn/20210302153633166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h1 id="页面结构">3.页面结构</h1><p><img src="https://img-blog.csdnimg.cn/20210302153706454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> # 4.内联框架： <img src="https://img-blog.csdnimg.cn/20210302153731285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> # 5.初识表单post和get提交： <img src="https://img-blog.csdnimg.cn/20210302153813566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--密码框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure> # 6.表单元素格式： <img src="https://img-blog.csdnimg.cn/20210302153857716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ### （1）文本框和单选框 <img src="https://img-blog.csdnimg.cn/20210302153922502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="文本框：" /> ### （2）按钮和多选框： <img src="https://img-blog.csdnimg.cn/20210302153941380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ### （3）下拉框、文本域和文件域： <img src="https://img-blog.csdnimg.cn/20210302154007639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210302154020877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ### （4）简单验证和滑块： <img src="https://img-blog.csdnimg.cn/20210302154045550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 表单的应用 <img src="https://img-blog.csdnimg.cn/20210302154121694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="只读：无法修改 添加readonly" /> ## 表单初级验证 <img src="https://img-blog.csdnimg.cn/20210302154149223.png" alt="输入框默认显示内容" /></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/html/">html</category>
      
      
      <comments>http://example.com/2021/03/02/%E7%8B%82%E7%A5%9EHTML%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>类变量、成员变量、局部变量存放位置比较</title>
      <link>http://example.com/2021/03/01/%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE%E6%AF%94%E8%BE%83/</link>
      <guid>http://example.com/2021/03/01/%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE%E6%AF%94%E8%BE%83/</guid>
      <pubDate>Mon, 01 Mar 2021 08:08:19 GMT</pubDate>
      
      <description>&lt;p&gt;三种变量易混淆，在学JVM的过程中分不清它们的存放位置，特此梳理比较。&lt;/p&gt;
&lt;p&gt;一、实例变量&lt;/p&gt;
&lt;p&gt;也叫成员变量、全局变量。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>三种变量易混淆，在学JVM的过程中分不清它们的存放位置，特此梳理比较。</p><p>一、实例变量</p><p>也叫成员变量、全局变量。</p><a id="more"></a><ul><li>定义在类中、方法外，有默认初始值。</li><li>通过对象的引用来访问实例变量。</li><li>随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的堆内存中。</li></ul><p>二、类变量</p><p>也叫静态变量。</p><ul><li>定义在类中、方法外，有关键字 static 修饰，有默认初始值。</li><li>可以通过对象调用，也可以通过类名调用。</li><li>生命周期与类共存亡。</li><li>对象的引用存放在<strong>方法区</strong>，如果用关键字 new 为引用类型的静态变量分配对象，该对象在堆中的地址也会存放在方法区。！但是<strong>对象本身仍在堆内存中</strong>。</li></ul><p>三、局部变量</p><ul><li>定义在方法中，或者方法的形参，没有初始化值。</li><li>生命周期与方法共存亡。</li><li>存放在栈中。局部的对象的引用所指对象在堆中的<strong>地址</strong>在存储在了栈中。</li></ul><p>举例：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticObjTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> ObjectHolder staticObj = <span class="keyword">new</span> ObjectHolder();<span class="comment">//静态变量、类变量</span></span><br><span class="line">        ObjectHolder instanceObj = <span class="keyword">new</span> ObjectHolder();<span class="comment">//实例变量、成员变量</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ObjectHolder localObj = <span class="keyword">new</span> ObjectHolder();<span class="comment">//局部变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>静态变量staticObj 随着Test的类型信息存放在<strong>方法区</strong></li><li>成员变量instance0bj 随着Test的对象实例存放在<strong>Java堆</strong></li><li>局部变量localobj则是存放在foo() 方法栈帧的局部变量表中。</li><li>三个对象的数据在内存中的地址都落在Eden区范围内，所以结论：只要是对象实例 即new() 必然会在Java堆中分配。</li></ul><p>再举个例子：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">PersonDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="comment">//局部变量p和形参args都在main方法的栈帧中</span></span><br><span class="line">        <span class="comment">//new Person()对象在堆中分配空间</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//sum在栈中，new int[10]在堆中分配空间</span></span><br><span class="line">        <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="comment">//实例变量name和age在堆(Heap)中分配空间</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//类变量(引用类型)name1和&quot;cn&quot;都在方法区(Method Area)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name1 = <span class="string">&quot;cn&quot;</span>;</span><br><span class="line">    <span class="comment">//类变量(引用类型)name2在方法区(Method Area)</span></span><br><span class="line">    <span class="comment">//new String(&quot;cn&quot;)对象在堆(Heap)中分配空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name2 = <span class="keyword">new</span> String(<span class="string">&quot;cn&quot;</span>);</span><br><span class="line">    <span class="comment">//num在堆中，new int[10]也在堆中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    Person(String name,<span class="keyword">int</span> age)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//this及形参name、age在构造方法被调用时</span></span><br><span class="line">        <span class="comment">//会在构造方法的栈帧中开辟空间</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//setName()方法在方法区中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//speak()方法在方法区中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;...&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//showCountry()方法在方法区中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">showCountry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;country=&quot;</span>+country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面代码中更容易看出区别，这部分还是要多想多记！</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JVM/">JVM</category>
      
      
      
      <comments>http://example.com/2021/03/01/%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE%E6%AF%94%E8%BE%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—LRU缓存机制</title>
      <link>http://example.com/2021/02/27/LeetCode%E5%88%B7%E9%A2%98%E2%80%94LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <guid>http://example.com/2021/02/27/LeetCode%E5%88%B7%E9%A2%98%E2%80%94LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Sat, 27 Feb 2021 03:26:04 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;146，LRU缓存机制，medium&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制 。&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;LRUCache&lt;/code&gt; 类：&lt;/p&gt;
&lt;p&gt;• &lt;code&gt;LRUCache(int capacity)&lt;/code&gt; 以正整数作为容量 &lt;code&gt;capacity&lt;/code&gt; 初始化 LRU 缓存&lt;/p&gt;
&lt;p&gt;• &lt;code&gt;int get(int key)&lt;/code&gt; 如果关键字 &lt;code&gt;key&lt;/code&gt; 存在于缓存中，则返回关键字的值，否则返回 -1 。&lt;/p&gt;
&lt;p&gt;• &lt;code&gt;void put(int key, int value)&lt;/code&gt; 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。&lt;/p&gt;
&lt;p&gt;进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>146，LRU缓存机制，medium</strong></p><p>运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制 。</p><p>实现 <code>LRUCache</code> 类：</p><p>• <code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 LRU 缓存</p><p>• <code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 -1 。</p><p>• <code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p><p>进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><a id="more"></a><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache &#x3D; new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); &#x2F;&#x2F; 缓存是 &#123;1&#x3D;1&#125;</span><br><span class="line">lRUCache.put(2, 2); &#x2F;&#x2F; 缓存是 &#123;1&#x3D;1, 2&#x3D;2&#125;</span><br><span class="line">lRUCache.get(1);    &#x2F;&#x2F; 返回 1</span><br><span class="line">lRUCache.put(3, 3); &#x2F;&#x2F; 该操作会使得关键字 2 作废，缓存是 &#123;1&#x3D;1, 3&#x3D;3&#125;</span><br><span class="line">lRUCache.get(2);    &#x2F;&#x2F; 返回 -1 (未找到)</span><br><span class="line">lRUCache.put(4, 4); &#x2F;&#x2F; 该操作会使得关键字 1 作废，缓存是 &#123;4&#x3D;4, 3&#x3D;3&#125;</span><br><span class="line">lRUCache.get(1);    &#x2F;&#x2F; 返回 -1 (未找到)</span><br><span class="line">lRUCache.get(3);    &#x2F;&#x2F; 返回 3</span><br><span class="line">lRUCache.get(4);    &#x2F;&#x2F; 返回 4</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>LRU 缓存淘汰算法是一种常用策略，认为最近使用的数据是「有用的」，很久没用过的数据是「没用的」，当内存满了就优先删除没用的数据。</p><p>此题需要设计数据结构，首先接收一个 <code>capacity</code> 参数作为缓存的最大容量，然后实现两个 API，一个是 <code>put(key, val)</code> 方法存入键值对，另一个是 <code>get(key)</code> 方法获取 key 对应的 val，如果 key 不存在则返回 -1。</p><p>此数据结构的必要条件： 1. cache 中的元素必须有时序，区分最近使用和久未使用的数据。 2. API 需要快速查找，快速插入，快速删除。</p><p>哈希表能实现快速查找，但无固定顺序。链表有顺序，能实现快速插入和删除，但查找慢。结合一下就形成新的数据结构：哈希链表 LinkedHashMap 。</p><ul><li><p>双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。</p></li><li><p>哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。</p></li></ul><p>这样一来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 O(1) 的时间内完成 <code>get</code> 或者 <code>put</code> 操作。具体的方法如下：</p><ul><li>对于 <code>get</code> 操作，首先判断 key 是否存在：<ul><li>如果 key 不存在，则返回−1；</li><li>如果 key 存在，则 key 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值。</li></ul></li><li>对于 <code>put</code> 操作，首先判断 key 是否存在：<ul><li>如果 key 不存在，使用 key 和 value 创建一个新的节点，在双向链表的头部添加该节点，并将 key 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项；</li><li>如果 key 存在，则与 get 操作类似，先通过哈希表定位，再将对应的节点的值更新为 value，并将该节点移到双向链表的头部。</li></ul></li></ul><p>为什么要用双向链表不用单向链表呢？下面通过代码思考。</p><p>双链表的节点类： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    Node prev;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = k;</span><br><span class="line">        <span class="keyword">this</span>.value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 然后依靠 Node 类型构建一个双向链表，实现几个LRU算法需要的API： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span></span>&#123;</span><br><span class="line">    <span class="comment">//头尾虚拟节点</span></span><br><span class="line">    Node head;</span><br><span class="line">    Node tail;</span><br><span class="line">    <span class="comment">//元素数量</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化双向链表</span></span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.next = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加节点到头部</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToHead</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点移至头部</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除链表中最后一个节点，并返回该节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node res = tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 到这里就能回答刚才「为什么必须要用双向链表」的问题了，因为我们需要删除操作。删除一个节点不光要得到该节点本身的指针，也需要操作其前驱节点的指针，而双向链表才能支持直接查找前驱，保证操作的时间复杂度 O(1)。</p><p>有了双向链表，只需要在LRU算法中把它和哈希表结合起来即可。代码框架： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCahche</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> DoubleList cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> DoubleList();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> 下面就能实现LRU算法的 <code>get</code> 和 <code>put</code> 方法。在维护链表的同时也要注意 <code>map</code> 中元素的增加、删除。</p><p><code>get</code> 操作较简单：若不存在 key，返回 -1；若存在，将链表中对应节点提至链表头部，再返回对应的value 值。</p><p><code>put</code> 操作较复杂，通过一个流程图来梳理： <img src="https://img-blog.csdnimg.cn/20210227112311467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>到此为止整个算法流程就梳理完了，还有一个问题要思考： 既然哈希表中已经存了 key，为什么链表中还要存 key 和 val 呢，只存 val 不就行了？</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        Node prev;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = k;</span><br><span class="line">        <span class="keyword">this</span>.value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span></span>&#123;</span><br><span class="line">        <span class="comment">//头尾虚拟节点</span></span><br><span class="line">        Node head;</span><br><span class="line">        Node tail;</span><br><span class="line">        <span class="comment">//元素数量</span></span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleList</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//初始化双向链表</span></span><br><span class="line">            head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            head.next = tail;</span><br><span class="line">            tail.next = head;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加节点到头部</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToHead</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            head.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">            node.prev.next = node.next;</span><br><span class="line">            node.next.prev = node.prev;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将节点移至头部</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">            removeNode(node);</span><br><span class="line">            addToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除链表中最后一个节点，并返回该节点</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Node <span class="title">removeTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Node res = tail.prev;</span><br><span class="line">            removeNode(res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> DoubleList cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> DoubleList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        Node n = map.get(key);</span><br><span class="line">        <span class="comment">//提至头部</span></span><br><span class="line">        cache.moveToHead(n);</span><br><span class="line">        <span class="keyword">return</span> n.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node n = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        <span class="comment">//若key已存在，修改链表中的值并提至头部，修改map中的键值对</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">            cache.removeNode(map.get(key));</span><br><span class="line">            cache.moveToHead(n);</span><br><span class="line">            map.put(key, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若key不存在，需要插入n</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//若容量已满，删除尾部最后一个 和map中对应的键值对</span></span><br><span class="line">            <span class="keyword">if</span>(cache.size() == capacity)&#123;</span><br><span class="line">                Node node = cache.removeTail();</span><br><span class="line">                map.remove(node.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//向链表头部和map中添加新元素</span></span><br><span class="line">            cache.addToHead(n);</span><br><span class="line">            map.put(key, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>put</code> 方法，可以回答上面的问题。容量满了要删除最后一个久未使用的元素，同时还要将 <code>map</code> 中对应的键删除。如果链表中只存储 <code>value</code>，那么就无法得知 <code>key</code>，就无法删除 <code>map</code> 中对应的键值对。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LRU/">LRU</category>
      
      
      <comments>http://example.com/2021/02/27/LeetCode%E5%88%B7%E9%A2%98%E2%80%94LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>易错！！String类与常量池</title>
      <link>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <guid>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <pubDate>Thu, 18 Feb 2021 14:16:02 GMT</pubDate>
      
      <description>&lt;p&gt;一、String对象有两种创建方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种方法是有差别的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一、String对象有两种创建方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>两种方法是有差别的。</p><a id="more"></a><ul><li>第一种方式是在<strong>常量池中取对象</strong>：先检查字符串常量池中有没有&quot;a&quot;，如果字符串常量池中没有，则创建一个，然后 str1 指向字符串常量池中的对象，如果有，则直接将 str1 指向&quot;a&quot;；</li><li>第二种方式是直接在<strong>堆内存空间创建</strong>一个新的对象。</li></ul><p>再如： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str3 = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure> str1 与 str3 都指向常量池中的 “a”，而 str2 指向堆中新创建的 “a”。 <img src="https://img-blog.csdnimg.cn/20210218215326378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 记住一点：只要<strong>使用 new 方法，便需要创建新的对象。</strong></p><p>二、String 类型的常量池的使用： - 直接使用双引号声明出来的 String 对象会直接存储在常量池中。 - 如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。 String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中<strong>已经包含一个等于此 String 对象内容的字符串</strong>，则返回常量池中该字符串的引用；如果没有，JDK1.7之前（不包含1.7）的处理方式是在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7以及之后的处理方式是<strong>在常量池中记录此字符串的引用</strong>，<strong>并返回</strong>该引用。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;计算机&quot;</span>);<span class="comment">//堆</span></span><br><span class="line">String s2 = s1.intern();<span class="comment">//常量池</span></span><br><span class="line">String s3 = <span class="string">&quot;计算机&quot;</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的 String 对象一个是常量池中的 String 对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的 String 对象</span></span><br></pre></td></tr></table></figure> 三、一个小问题</p><p><code>String str = new String(&quot;abc&quot;);</code> 这句话创建了几个字符串对象？ 答：1 或 2 个。如果常量池中已有 “abc”，只在堆空间创建一个 “abc”；如果常量池中没有 “abc”，将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 堆内存的地址值</span></span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">// 输出 true，内容相同</span></span><br></pre></td></tr></table></figure> 四、字符串拼接</p><p>常量池中的对象可以直接拼接成一个新的字符串。两个字符串拼接的结果在堆中。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">String str4 = str1 + str2; <span class="comment">//在堆上创建的新的对象      </span></span><br><span class="line">String str5 = <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure> <img src="https://img-blog.csdnimg.cn/20210218221413161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>五、扩展：Integer 类 与 常量池</p><p>Integer 类默认创建数值[-128，127] 的相应类型的缓存数据。 1. <code>Integer i1=40；</code> Java 在编译的时候会直接将代码封装成 <code>Integer i1=Integer.valueOf(40);</code>，从而使用常量池中的对象。 2. <code>Integer i1 = new Integer(40);</code> 这种情况下会创建新的对象。</p><p>一个例子: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2   &quot;</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2+i3   &quot;</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i4   &quot;</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5   &quot;</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5+i6   &quot;</span> + (i4 == i5 + i6));   </span><br><span class="line">System.out.println(<span class="string">&quot;40=i5+i6   &quot;</span> + (<span class="number">40</span> == i5 + i6));     </span><br></pre></td></tr></table></figure> 结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i1&#x3D;i2   true</span><br><span class="line">i1&#x3D;i2+i3   true</span><br><span class="line">i1&#x3D;i4   false</span><br><span class="line">i4&#x3D;i5   false</span><br><span class="line">i4&#x3D;i5+i6   true</span><br><span class="line">40&#x3D;i5+i6   true</span><br></pre></td></tr></table></figure> 解释：</p><p>语句 i4 == i5 + i6，因为 + 这个操作符不适用于 Integer 对象，首先 i5 和 i6 进行<strong>自动拆箱</strong>操作，进行数值相加，即 i4 == 40。然后 <strong>Integer 对象无法与数值进行直接比较</strong>，所以 i4 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/JVM/">JVM</category>
      
      
      <comments>http://example.com/2021/02/18/%E6%98%93%E9%94%99%EF%BC%81%EF%BC%81String%E7%B1%BB%E4%B8%8E%E5%B8%B8%E9%87%8F%E6%B1%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—双指针解数组排序</title>
      <link>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</link>
      <guid>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</guid>
      <pubDate>Wed, 17 Feb 2021 03:01:57 GMT</pubDate>
      
      <description>&lt;h5 id=&quot;前言&quot;&gt;前言&lt;/h5&gt;
&lt;p&gt;双指针分为快慢指针（向一个方向遍历）和左右指针（从两个方向相对遍历）， 在进行数组排序时常用到第一种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指针 j 用于探路，找到目标元素&lt;/strong&gt;与指针 i 所指元素交换，并将 i 向前一步，继续。&lt;/p&gt;
&lt;h5 id=&quot;模板&quot;&gt;模板&lt;/h5&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h5 id="前言">前言</h5><p>双指针分为快慢指针（向一个方向遍历）和左右指针（从两个方向相对遍历）， 在进行数组排序时常用到第一种。</p><p><strong>指针 j 用于探路，找到目标元素</strong>与指针 i 所指元素交换，并将 i 向前一步，继续。</p><h5 id="模板">模板</h5><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sortArrayByParity(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">    <span class="comment">//j 指针探路</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(找到目标元素)&#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                swap(A, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="按奇偶排序数组easy">905，按奇偶排序数组，easy</h5><p>给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。</p><p>你可以返回满足此条件的任何数组作为答案。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">（输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。）</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题目标是用 指针j 找到偶数元素，将偶数元素往前提。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArrayByParity(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="comment">//找到偶数元素</span></span><br><span class="line">            <span class="keyword">if</span>(A[j] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                swap(A, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="移动-0easy">283，移动 0，easy</h5><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题目标是用 指针j 找到非 0 元素，将非 0 元素往前提。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">            <span class="comment">//找到非 0 元素</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="颜色分类medium">75，颜色分类，medium</h5><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>与前两题不同在 需要两次交换，先用 指针j 找到 0，将 0 往前提。</p><p>再将 j 定于此位置，继续找 1，将 1 往前提。</p><p>过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20210217113417103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" /></p><p><a href="https://pic.leetcode-cn.com/4ff01311844f58b83124a449e24857e9d02fd6c04067e9551fda6bccbe59b87e-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%94%B9%E5%8F%98.gif">动画演示</a></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="comment">//第一步：将 0 往前提</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二步：将 1 往前提</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] == <span class="number">1</span>)&#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/">双指针</category>
      
      
      <comments>http://example.com/2021/02/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
