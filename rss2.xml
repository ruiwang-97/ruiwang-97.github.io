<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Mon, 11 Jan 2021 09:57:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>一文看清背包套路</title>
      <link>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/</link>
      <guid>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/</guid>
      <pubDate>Fri, 08 Jan 2021 12:44:55 GMT</pubDate>
      
      <description>&lt;p&gt;刷了几道背包问题，用了一周时间，动态规划的难真的领会到了。但再难总有规律可循，总结中刷题，刷题中总结。&lt;/p&gt;
&lt;p&gt;关于0-1背包的问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;416，分割等和子集&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;494，目标和&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;474，一和零&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于完全背包的问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;322，零钱兑换&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>刷了几道背包问题，用了一周时间，动态规划的难真的领会到了。但再难总有规律可循，总结中刷题，刷题中总结。</p><p>关于0-1背包的问题有：</p><ul><li><p>416，分割等和子集</p></li><li><p>494，目标和</p></li><li><p>474，一和零</p></li></ul><p>关于完全背包的问题有：</p><ul><li>322，零钱兑换</li></ul><a id="more"></a><ul><li><p>518，零钱兑换Ⅱ</p></li><li><p>377，组合总和Ⅳ</p></li><li><p>139，单词拆分</p></li></ul><h2 id="一0-1背包问题">一、0-1背包问题</h2><h5 id="引入">引入</h5><p>一个可装载重量为<code>W</code>的背包和<code>N</code>个物品，每个物品有重量和价值两个属性。怎么装使这个背包装下物品的价值最大？</p><p><strong>套路</strong>：</p><ol type="1"><li><p><strong>子问题</strong>：<strong>二维 <code>dp</code> 数组</strong> <span class="math inline">\(dp[i][j]\)</span>—对于前 <code>i</code> 个物品，当前背包容量为 <code>j</code>，这种情况下可以装的最大价值是 <span class="math inline">\(dp[i][j]\)</span>。</p><p>比如说，如果 <span class="math inline">\(dp[3][5] = 6\)</span>，其含义为：对于给定的一系列物品中，若只对前 3 个物品进行选择，当背包容量为 5 时，最多可以装下的价值为 6。 根据这个定义，我们想求的<strong>最终答案就是 <code>dp[N][W]</code></strong>。</p></li><li><p><strong>base case</strong>： 当没有物品 或 背包没有容量时，<span class="math inline">\(dp[0][...] = dp[...][0] = 0\)</span></p></li><li><p><strong>状态转移</strong>：</p><p>物品 i 有两种选择—装进背包和不装，设第 i 件物品体积为 w，价值为 v。</p><ul><li>物品 i 不装进背包，最大价值 <span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></li><li>物品 i 装进背包，最大价值 <span class="math inline">\(dp[i][j] = dp[i - 1][j - w] + v\)</span></li></ul><p>因此，0-1 背包的状态转移方程为：</p><p><span class="math inline">\(dp[i][j] = Math.max(dp[i - 1][j],dp[i - 1][j - w] + v)\)</span></p></li></ol><p><strong>代码：</strong></p><p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// W 为背包总体积</span></span><br><span class="line"><span class="comment">// N 为物品数量</span></span><br><span class="line"><span class="comment">// weights 数组存储 N 个物品的重量</span></span><br><span class="line"><span class="comment">// values 数组存储 N 个物品的价值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, <span class="keyword">int</span> N, <span class="keyword">int</span>[] weight, <span class="keyword">int</span>[] values)</span></span>&#123;</span><br><span class="line">    <span class="comment">//dp[i][j]表示装 i 个物品背包容量为 j</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//默认初始化都为0，从第1行和第1列开始赋值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//物品从weight[0]开始添加，w表示第i个物品的体积，v表示第i个物品的价值</span></span><br><span class="line">        <span class="keyword">int</span> w = weight[i - <span class="number">1</span>]; <span class="keyword">int</span> v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; W + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="comment">// 装入或者不装入背包，择优</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= w)</span><br><span class="line">            dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">            <span class="comment">// 当前背包容量装不下，只能选择不装入背包</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意到 <span class="math inline">\(dp[i][j]\)</span> 都是通过上一行 <span class="math inline">\(dp[i-1][..]\)</span> 转移过来的，之前的数据都不会再使用了。 所以，我们可以进行状态压缩，将二维 dp 数组压缩为一维，节约空间复杂度，可见下一题。</p><h5 id="分割等和子集medium">416，分割等和子集，medium</h5><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意:</p><p>每个数组中的元素不会超过 100 数组的大小不会超过 200 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 5, 11, 5]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">解释: 数组可以分割成 [1, 5, 5] 和 [11].</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 2, 3, 5]</span><br><span class="line"></span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">解释: 数组不能分割成两个元素和相等的子集.</span><br></pre></td></tr></table></figure><ul><li><p>题意分析：</p><p>看起来和背包没关系，实际是<strong>背包问题的变体：子集背包问题</strong>。原背包问题的二维数组 <span class="math inline">\(v = dp[i][j]\)</span> 表示 对于前 <code>i</code> 个物品，当前背包容量为 <code>j</code>，这种情况下可以装的最大价值是 <span class="math inline">\(v\)</span>。</p><p>此题中，要把数组分割成两个等和子集，即背包容量：数组的和 <code>sum</code>的一半，物品：数组元素。如果遍历数组，部分元素的和恰好为 背包容量，则剩余元素的和也恰好为 <code>sum / 2</code>，返回true。</p></li><li><p>思路：</p><p><strong>特殊情况：</strong></p><p><code>nums</code> 数组的元素和 <code>sum</code> 若为奇数，则无法分割，返回false。</p><p>如果 <code>n &lt; 2</code>，数组无法分割，返回false。</p></li></ul><ol type="1"><li><p>子问题</p><p><span class="math inline">\(x = dp[i][j]\)</span> 表示 对于数组<code>nums</code> 的前 <code>i</code> 个元素，当前元素和是否为 <code>j</code>， 若为 j ，<span class="math inline">\(x = true\)</span>；否则，<span class="math inline">\(x = false\)</span>。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0][...] = false\)</span> 数组中没有元素可选取，返回false。</p><p><span class="math inline">\(dp[...][0] = true\)</span> 目标元素和为 0，不选取元素即可。</p></li><li><p>状态转移方程</p><p>当前元素 <code>num = nums[i - 1]</code>（从数组的 第 0 个元素开始遍历）</p><p>①. <code>j &gt;= num</code></p><ul><li><p>不将 <code>num</code> 算入，能否恰好等于 j ,<span class="math inline">\(dp[i][j]\)</span>取决于 <span class="math inline">\(dp[i - 1][j]\)</span></p></li><li><p>将 <code>num</code> 算入，能否恰好等于 j ,<span class="math inline">\(dp[i][j]\)</span>取决于 <span class="math inline">\(dp[i - 1][j - num]\)</span></p><p>理解：如果装入第 i 个元素，要看剩余元素和 <code>j - num</code> 限制下是否恰好装满。</p></li></ul><p>②.<code>j &lt; num</code></p><p>要达到的元素和 比 当前元素值 小，无法加入。</p><p>总结： <img src="https://img-blog.csdnimg.cn/20210107152332640.png#pic_center" alt="在这里插入图片描述" /></p></li></ol><ul><li><p>代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//dp[i][j]— [0, i]元素 元素是否为 j</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>][target + <span class="number">1</span>];<span class="comment">//初始化都为false</span></span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; target + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//要达到的元素和 比 当前元素值 小，无法加入</span></span><br><span class="line">                <span class="keyword">if</span>(j &lt; num) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] | dp[i - <span class="number">1</span>][j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>降维</p><p><span class="math inline">\(dp[i][j]\)</span> 都是通过上一行 <span class="math inline">\(dp[i-1][..]\)</span> 转移过来的，可以进行状态压缩，将二维 dp 数组压缩为一维，但要注意 <strong>j 应该从后往前反向遍历，因为每个物品（或者说数字）只能用一次，以免之前的结果影响其他的结果。</strong></p><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n = nums.length;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">          sum += num; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//特殊：</span></span><br><span class="line">      <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      sum = sum / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[sum + <span class="number">1</span>];</span><br><span class="line">      dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = sum; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">              <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                  dp[j] = dp[j] | dp[j - num];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[sum];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<strong>做题步骤</strong>：</p></li></ul><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 0-1背包问题</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法 1. 子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i][j]\)</span> 返回值是什么 2. base case：通常为 <span class="math inline">\(dp[0][...]、dp[...][0]、dp[0][0]\)</span> 3. 状态转移方程： 先遍历物品，再遍历背包。每个物品只有装和不装两个选择。</p><pre><code>组合问题公式   dp[i] += dp[i - num]True、False问题公式    dp[i] = dp[i] or dp[i - num]最大最小问题公式    dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] =  max(dp[i], dp[i - num]+1)</code></pre></li><li><p>最终<strong>返回结果</strong></p></li><li><p><strong>状态压缩</strong>至一维（可不进行）</p></li></ol><h5 id="目标和medium">494，目标和，medium</h5><p>给定一个非负整数数组<code>a1, a2, ..., an</code> 和一个目标数 S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p><p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums: [1, 1, 1, 1, 1], S: 3</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">-1+1+1+1+1 &#x3D; 3</span><br><span class="line">+1-1+1+1+1 &#x3D; 3</span><br><span class="line">+1+1-1+1+1 &#x3D; 3</span><br><span class="line">+1+1+1-1+1 &#x3D; 3</span><br><span class="line">+1+1+1+1-1 &#x3D; 3</span><br><span class="line"></span><br><span class="line">一共有5种方法让最终目标和为3。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：</span><br><span class="line"> 数组非空，且长度不会超过 20 。</span><br><span class="line">   初始的数组的和不会超过 1000 。</span><br><span class="line">  保证返回的最终结果能被 32 位整数存下。</span><br></pre></td></tr></table></figure><ul><li><p>题意分析： <img src="https://img-blog.csdnimg.cn/20210107155801985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 则转换为 0-1背包问题：给定一个数组 和一个容量为 target 的背包，求多少种方式将背包填满。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(x = dp[i][j]\)</span> 表示 对于数组<code>nums</code> 的前 <code>i</code> 个元素，放进容量 <code>j</code> 的背包，装满方式为 x。</p></li></ol><p><strong>特殊情况：</strong></p><p><code>S + sum</code> 必须为偶数才可分解，<code>S &lt; sum</code> 才可使数组 <code>nums</code> 元素得到 <code>S</code>。</p></li></ul><ol start="2" type="1"><li><p>base case</p><p><span class="math inline">\(dp[0][0] = 1\)</span> 没有元素，所以只能不选，和为0</p></li><li><p>状态转移方程</p><p>当前元素 <code>num = nums[i - 1]</code>（从数组的 第 0 个元素开始遍历）</p><p>①. <code>j &gt;= num</code></p><p>将 当前 <code>num = nums[i-1]</code> 放入或不放入背包，<span class="math inline">\(dp[i][j] = dp[i-1][j]+dp[i-1][j-num]\)</span></p><p>②. <code>j &lt; num</code></p><p>不能放入，取决于上一状态，<span class="math inline">\(dp[i][j] = dp[i-1][j]\)</span></p></li></ol><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(S &gt; sum || (sum + S) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> target = (sum + S) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>][target + <span class="number">1</span>]; </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态转移方程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; target + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - num];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对base case 的理解：</p><p><strong>注意</strong>与0-1背包的区别：</p><p>对于0-1 背包，物品大小为正数，可以先对二维数组初始化第0行（除<span class="math inline">\([0][0]\)</span> 位置外全为0）和第0列（全为1）。然后 i 和 j 都从1开始遍历。 对于该问题，列表中可能存在为 0 的元素，因此<strong>选不选这个0，都能将容量为0的背包装满</strong>。如，<code>nums=&#123;0,0&#125;,target=0,dp[2][0]≠1</code>。</p><p>所以base case 只有 <span class="math inline">\(dp[0][0]=1\)</span>, 剩下的第0列的其他位置的值用状态转移方程确定 （而不能将 <span class="math inline">\(dp[i][0]\)</span>初始化为1） 。即 i 从1开始遍历，j 从0开始遍历。</p></li><li><p>优化：将二维<code>dp</code>数组压缩为一维，<strong><code>dp[i][j]</code>都是通过上一行<code>dp[i-1][..]</code>转移过来的</strong>，之前的数据都不会再使用了。需要注意的是 <code>j</code>应该从后往前反向遍历，因为每个物品（数字）只能用一次，以免之前的结果影响其他的结果。</p><ol type="1"><li><p>子问题：</p><p><span class="math inline">\(x = dp[i]\)</span> 表示数组 <code>nums</code> 的元素 装满 容量为 i 的背包，有 x 种装法。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 1\)</span> 全部不装，一种装法。</p></li><li><p>状态转移方程</p><p>由上面的二维可得$ dp[j] = dp[j] + dp[j - num]$</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(S &gt; sum || (sum + S) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> target = (sum + S) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>]; </span><br><span class="line">        <span class="comment">//base case//放入背包重量为0的方案数为1，不选</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = target; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= num)</span><br><span class="line">                    dp[j] = dp[j] + dp[j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另一种方法：递归</p><p>对于第 i 个数，可以 ‘+’ 或 '-'，分别递归搜索两种操作，当搜索完一遍，如果元素和sum等于S，count+1。、</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> helper(nums, <span class="number">0</span>, <span class="number">0</span>, S);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> sum, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == nums.length)&#123;</span><br><span class="line">          <span class="keyword">if</span>(sum == S)</span><br><span class="line">              count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//还没全部搜索完，递归两种情况</span></span><br><span class="line">          helper(nums, i + <span class="number">1</span>, sum + nums[i], S);</span><br><span class="line">          helper(nums, i + <span class="number">1</span>, sum - nums[i], S);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="一和零medium">474，一和零，medium</h5><p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 m 和 n 。</p><p>请你找出并返回 <code>strs</code> 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p><p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;], m &#x3D; 5, n &#x3D; 3</span><br><span class="line">输出：4</span><br><span class="line">解释：最多有 5 个 0 和 3 个 1 的最大子集是 &#123;&quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot;&#125; ，因此答案是 4 。</span><br><span class="line">其他满足题意但较小的子集包括 &#123;&quot;0001&quot;,&quot;1&quot;&#125; 和 &#123;&quot;10&quot;,&quot;1&quot;,&quot;0&quot;&#125; 。&#123;&quot;111001&quot;&#125; 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;10&quot;, &quot;0&quot;, &quot;1&quot;], m &#x3D; 1, n &#x3D; 1</span><br><span class="line">输出：2</span><br><span class="line">解释：最大的子集是 &#123;&quot;0&quot;, &quot;1&quot;&#125; ，所以答案是 2 。</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>strs.length</code>&lt;= 600 1 &lt;= <code>strs[i].length</code> &lt;= 100 <code>strs[i]</code> 仅由 '0' 和 '1' 组成 1 &lt;= m, n &lt;= 100</p><ul><li><p>题目解析：</p><p>仍然是 0-1背包问题，但此题的背包有两个，一个放0，一个放1，称为背包0 和 背包1。物品：字符串数组中的字符。为最大最小问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j][k]\)</span> — 前 i 个字符串将 背包0容量为 j，背包1容量为k 的最大子集大小</p></li><li><p>base case</p><p><span class="math inline">\(dp[0][...][...]=0\)</span> 如果不使用任何一个字符串，则背包能装的字符串数就为0。</p><p><span class="math inline">\(dp[...][0][0]=0\)</span> 如果背包0，背包1的容量都为0，它能装的字符串数也为0。</p></li><li><p>状态转移方程</p><p>当前字符串str</p><ul><li><p>如果字符串<code>str</code>不装入背包，受上一状态影响。</p><p><span class="math inline">\(dp[i][j][k]=dp[i-1][j][k]\)</span></p></li><li><p>如果字符串<code>str</code> 装入背包，则与不装入的选择取最大值。</p><p><span class="math inline">\(dp[i][j][k] = max(dp[i-1][j][k],dp[i-1][j-count_0][j-count_1] + 1)\)</span></p></li></ul><p>边界条件为 j 与 <code>str</code> 中0 的数量 的大小关系，k 与 <code>str</code> 中 1 的数量的大小关系。</p></li><li><p>返回 <span class="math inline">\(dp[len][m][n]\)</span></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>][m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//base case dp[0][...][...]=0、dp[...][0][0]=0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先循环物品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            String str = strs[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n + <span class="number">1</span>; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; count_0(str) || k &lt; count_1(str))</span><br><span class="line">                    dp[i][j][k] = dp[i - <span class="number">1</span>][j][k];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    dp[i][j][k] = Math.max(dp[i - <span class="number">1</span>][j][k], dp[i - <span class="number">1</span>][j - count_0(str)][k - count_1(str)] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计str中0和1的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_0</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            String str = strs[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= count_0(str); j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = n; k &gt;= count_1(str); k--)&#123;</span><br><span class="line">                    dp[j][k] = Math.max(dp[j][k], dp[j - count_0(str)][k - count_1(str)] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计str中0和1的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_0</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count_1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str_c = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str_c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思考：为什么背包0 和 背包1的 j、k要从 0 开始遍历？</p><p>字符串数组中如果存在“00”，“00”，选择也是不同的，会影响<span class="math inline">\(dp\)</span> 数组的结果。可参考494题中对 base case 的理解。</p></li></ul><h5 id="背包总结">0-1背包总结</h5><p>做题步骤：</p><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 0-1背包问题</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法 1. 子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i][j]\)</span> 返回值是什么 2. base case：通常为 <span class="math inline">\(dp[0][...]、dp[...][0]、dp[0][0]\)</span> 3. 状态转移方程： 先遍历物品，再遍历背包。每个物品只有装和不装两个选择。</p><p>组合问题公式 dp[i] += dp[i - num] True、False问题公式 dp[i] = dp[i] or dp[i - num] 最大最小问题公式 dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] = max(dp[i], dp[i - num]+1)</p></li><li><p>最终<strong>返回结果</strong></p></li><li><p><strong>状态压缩</strong>至一维（可不进行）</p></li></ol><p>套模板还是有用的，难的部分在于理清题意再转化到模板。base case 的情况容易混淆，分不清的时候先写出多维dp数组，再进行降维可能还有助于做题。 完全背包问题请见下一节总结内容。</p><h2 id="二完全背包问题">二、完全背包问题</h2><h5 id="完全背包问题引入">完全背包问题引入</h5><ul><li><p>完全背包的特点：物品可以无限次选取，且<strong>不考虑顺序</strong>。</p></li><li><p>与0-1背包不同在：</p><ul><li><p>0-1背包考虑当前物品装入或不装入背包，物品<strong>只有一件</strong>。</p></li><li>完全背包考虑当前物品装入或不装入背包，物品的数量<strong>无限</strong>，只要背包容量还有剩余就可以一直拿同一种物品。</li></ul></li><li><p>完全背包的变体问题：物品可以无限次选取，且<strong>考虑物品放入的顺序</strong>。</p></li></ul><p>下面在具体题目中进行总结。</p><h5 id="零钱兑换medium">322，零钱兑换，medium</h5><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><p>你可以认为每种硬币的数量是无限的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 &#x3D; 5 + 5 + 1</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：coins &#x3D; [2], amount &#x3D; 3</span><br><span class="line">输出：-1</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 0</span><br><span class="line">输出：0</span><br><span class="line"></span><br><span class="line">示例 4：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 1</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">示例 5：</span><br><span class="line">输入：coins &#x3D; [1], amount &#x3D; 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= <code>coins.length</code> &lt;= 12 1 &lt;= <code>coins[i]</code> &lt;= 231 - 1 0 &lt;= <code>amount</code> &lt;= 104</p><h6 id="解法一二维先遍历物品再遍历背包">解法一：二维（先遍历物品，再遍历背包）</h6><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> 前 i 个硬币组成总金额 j，所需最少硬币个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[..][0] = 0\)</span> 金额为0，不取硬币。</p><p><strong>特殊情况：</strong></p><p>此题中若无法组成总金额，需返回 -1。思考怎么实现呢？</p><p>把二维数组 <span class="math inline">\(dp\)</span> 初始化成最大值 <code>amount + 1</code>（硬币面额最少为1），如果发现没更新则说明无法取硬币组成总金额，返回 -1。</p></li><li><p>递推关系</p><p>最小问题，取min。当前coin = coins[i-1]</p><ul><li><p>不选 coin，最少硬币个数不变，总金额不变。</p><p><span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></p></li><li><p>选 coin，最少硬币个数 + 1。因为完全背包问题可以<strong>多次选取同一物品，所以为 <span class="math inline">\(dp[i][j - coin]\)</span></strong>，与 0-1背包的区别就体现在此。</p><p><span class="math inline">\(dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - coin] + 1)\)</span></p></li></ul></li></ol></li><li><p>代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][amount + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化dp表，默认值为极大值，代表无解</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i], amount + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//base case</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - coin] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                     dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount] &gt; amount ? -<span class="number">1</span>: dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">         Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[j] = Math.min(dp[j], dp[j - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span>: dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="解法二一维先遍历背包再遍历物品">解法二：一维（先遍历背包，再遍历物品）</h6><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> 硬币组成金额为 i ，所需最少硬币个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 0\)</span> 金额为0，不取硬币。</p></li><li><p>递推关系</p><p>以 coins=[1,2,5] amount = 11 为例</p><p>k 枚硬币 <code>a1，... ,ak</code> 总和为 11，即 <span class="math inline">\(dp[11] = k\)</span>，上一状态就是 <span class="math inline">\(dp[11-ak] = k-1\)</span></p><p>状态转移方程为：</p><p><span class="math inline">\(dp[i]=min(dp[i-coin])+1\)</span>，<code>for coin in coins  and if  i &gt;= coin</code></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//特殊判断，可有可无</span></span><br><span class="line">        <span class="keyword">if</span>(coins.length == <span class="number">1</span> &amp;&amp; amount % coins[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//硬币面额至少为1，最多为amount</span></span><br><span class="line">        Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//外循环为dp数组从1开始的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; amount + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//内循环为 coins 数组元素值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.length; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> coin = coins[j];</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= coin)</span><br><span class="line">                    <span class="comment">//得到上一状态的最小值</span></span><br><span class="line">                    dp[i] = Math.min((dp[i - coin] + <span class="number">1</span>), dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">       <span class="comment">//如果dp[amount]没更新，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span>: dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="零钱兑换medium-1">518，零钱兑换Ⅱ，medium</h5><p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 5, coins &#x3D; [1, 2, 5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 有四种方式可以凑成总金额:</span><br><span class="line">5&#x3D;5</span><br><span class="line">5&#x3D;2+2+1</span><br><span class="line">5&#x3D;2+1+1+1</span><br><span class="line">5&#x3D;1+1+1+1+1</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 3, coins &#x3D; [2]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 只用面额2的硬币不能凑成总金额3。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: amount &#x3D; 10, coins &#x3D; [10] </span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>你可以假设：</p><p>0 &lt;= amount (总金额) &lt;= 5000 1 &lt;= coin (硬币面额) &lt;= 5000 硬币种类不超过 500 种 结果符合 32 位符号整数</p><ul><li><p>题目解析：</p><p>数组的元素可以使用多次，对顺序没有要求，完全背包问题。组合问题。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i][j]\)</span> — 前 i 个硬币组成金额 j 的组合数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[..][0] = 1\)</span> 全部都不拿，只有这一种拿法。</p></li><li><p>递推关系</p><p><span class="math inline">\(dp[i][j]\)</span> 取决于是否选择 coin = coins[i-1]</p><ul><li>如果不选（即不将 coin 装入背包），<span class="math inline">\(dp[i][j] = dp[i - 1][j]\)</span></li><li>如果选（即将 coin 装入背包），<span class="math inline">\(dp[i][j] = dp[i][j-coin]\)</span>，注意<strong>此处与 0-1背包 不同，硬币还可再选取。</strong></li></ul><p>要得到总的组合数，状态转移方程为：</p><p><span class="math inline">\(dp[i][j] = dp[i - 1][j] + dp[i][j-coin]\)</span></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][amount + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - coin];</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态压缩：通过观察可以发现，<code>dp</code>数组的转移只和<code>dp[i][..]</code>和<code>dp[i-1][..]</code>有关，所以可以压缩状态，进一步降低算法的空间复杂度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = coins.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> coin = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; amount + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coin)</span><br><span class="line">                    dp[j] += dp[j - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面两题为完全背包的变体：物品可以无限次选取，且<strong>考虑物品放入背包的顺序</strong>。</p><h5 id="组合总和medium">377，组合总和Ⅳ，medium</h5><p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums &#x3D; [1, 2, 3]</span><br><span class="line">target &#x3D; 4</span><br><span class="line"></span><br><span class="line">所有可能的组合为：</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line"></span><br><span class="line">请注意，顺序不同的序列被视作不同的组合。</span><br><span class="line">因此输出为 7。</span><br></pre></td></tr></table></figure><ul><li><p>题意分析</p><p>完全背包问题的变体：</p><p>数组的每个元素可以使用多次，直到等于target。</p><p>不同于完全背包：顺序不同的序列被视作不同的组合。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> —数组的元素组合为 i 的个数。</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 1\)</span> 所有数都不选，只有一种。</p></li><li><p>状态转移方程</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/00df062b020fa03ff81e0a7000b1f3df.png" alt="image.png" /><figcaption>image.png</figcaption></figure><p>以 <code>nums =[1,2,3]，target = 4</code> 为例，</p><figure><img src="https://img-blog.csdnimg.cn/20210108113212272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>即将 <code>target = 4</code> 拆分为 <code>nums[i]</code> 和 <code>dp[target - nums[i]]</code>，最终得到 <span class="math inline">\(dp[4] = dp[3] + dp[2] + dp[1]\)</span></p><p>则状态转移方程为：</p><p><span class="math inline">\(dp[i] = sum(dp[i - num])\)</span> <code>for num in nums and if i &gt;= num</code></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &lt;= i)&#123;</span><br><span class="line">                    dp[i] += dp[i - num];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="单词拆分medium">139，单词拆分，medium</h5><p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。 你可以假设字典中没有重复的单词。 示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class="line">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><ul><li><p>题意分析</p><p>完全背包问题的变体：物品(<code>wordDict</code>中的单词)可以无限使用，直到填满背包（字符串s）。TRUE / False 问题。</p></li><li><p>思路</p><ol type="1"><li><p>子问题</p><p><span class="math inline">\(dp[i]\)</span> 字符串前 i 个字符组成的字符串 s[0,i-1] 能否拆分为 <code>wordList</code> 中的单词</p></li><li><p>base case</p><p><span class="math inline">\(dp[0] = 0\)</span> 表示空串且合法。</p></li><li><p>递推关系</p><p>对于物品（<code>wordDict</code> 中的单词），要求有顺序放入背包（字符串s），则将物品迭代置于内循环，将背包迭代放在外循环，这样才能让物品按一定顺序放入背包中。</p><p>如果有单词 等于 字符串s的一部分，需要检查后面的字符串是否能放入背包。</p><p><span class="math inline">\(dp[i] = dp[i] | dp[i - len];\)</span><img src="https://img-blog.csdnimg.cn/20210108114808230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210108114808238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p></li></ol></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//s 为背包</span></span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String word : wordDict)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = word.length();</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= len &amp;&amp; word.equals(s.substring(i-len, i)))</span><br><span class="line">                    dp[i] = dp[i] | dp[i - len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="完全背包问题总结">完全背包问题总结</h5><p><strong>做题步骤</strong>：</p><ol type="1"><li><p><strong>理解题意</strong>，判定此题为 完全背包问题 或 完全背包问题的变体。根据所求分为组合问题，True/False问题，最大最小问题。通常用<strong>一维 <span class="math inline">\(dp\)</span> 数组</strong>解题。</p></li><li><p>此题是否有<strong>特殊情况</strong></p></li><li><p><strong>动态规划</strong>正常做法</p><ol type="1"><li><p>子问题：确定背包和物品指代什么，<span class="math inline">\(dp[i]\)</span> 返回值是什么</p><ol start="2" type="1"><li>base case：通常为 <span class="math inline">\(dp[0]\)</span></li></ol></li><li><p>状态转移方程： <strong>先遍历背包，再遍历物品。</strong>这样才能保证放入顺序。</p></li></ol><p>组合问题公式 dp[i] += dp[i - num] True/False问题公式 dp[i] = dp[i] or dp[i - num] 最大最小问题公式 dp[i] = min(dp[i], dp[i - num]+1) 或 dp[i] = max(dp[i], dp[i - num]+1)</p></li><li><p>最终<strong>返回结果</strong></p></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <comments>http://example.com/2021/01/08/%E4%B8%80%E6%96%87%E7%9C%8B%E6%B8%85%E8%83%8C%E5%8C%85%E5%A5%97%E8%B7%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>idea导入Github分支</title>
      <link>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/</link>
      <guid>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/</guid>
      <pubDate>Wed, 06 Jan 2021 01:41:53 GMT</pubDate>
      
      <description>&lt;p&gt;在网上搜索了一圈没有特别简单直白的方法，把我的步骤贴在下面。 ### 1. 建立空文件夹 在任意位置新建文件夹即可。 ### 2. 使用Git Bash命令拉取分支&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在网上搜索了一圈没有特别简单直白的方法，把我的步骤贴在下面。 ### 1. 建立空文件夹 在任意位置新建文件夹即可。 ### 2. 使用Git Bash命令拉取分支</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20210106093532520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 具体命令为：<strong>git clone -b dev </strong> 后面是仓库的url <img src="https://img-blog.csdnimg.cn/20210106093652418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ### 3. 在 idea 中打开此项目 有可能会出现爆红，<a href="https://www.pianshen.com/article/85591420566/">参考</a>这篇文章解决。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      
      <comments>http://example.com/2021/01/06/idea%E5%AF%BC%E5%85%A5Github%E5%88%86%E6%94%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—动态规划（一）</title>
      <link>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%80%EF%BC%89/</link>
      <guid>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
      <pubDate>Tue, 29 Dec 2020 12:45:03 GMT</pubDate>
      
      <description>&lt;p&gt;跟着 labuladong 和 CS-Notes 对动态规划做题、总结，形成自己的模板。 ## 引入动态规划 动态规划问题的一般形式就是求最值。求解动态规划的核心问题是穷举。&lt;/p&gt;
&lt;p&gt;首先，动态规划的穷举有点特别，因为这类问题&lt;strong&gt;存在「重叠子问题」&lt;/strong&gt;，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。&lt;/p&gt;
&lt;p&gt;而且，动态规划问题一定会&lt;strong&gt;具备「最优子结构」&lt;/strong&gt;，才能通过子问题的最值得到原问题的最值。&lt;/p&gt;
&lt;p&gt;另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出&lt;strong&gt;正确的「状态转移方程」&lt;/strong&gt;才能正确地穷举。&lt;/p&gt;
&lt;h3 id=&quot;解题步骤&quot;&gt;解题步骤：&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>跟着 labuladong 和 CS-Notes 对动态规划做题、总结，形成自己的模板。 ## 引入动态规划 动态规划问题的一般形式就是求最值。求解动态规划的核心问题是穷举。</p><p>首先，动态规划的穷举有点特别，因为这类问题<strong>存在「重叠子问题」</strong>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p><p>而且，动态规划问题一定会<strong>具备「最优子结构」</strong>，才能通过子问题的最值得到原问题的最值。</p><p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<strong>正确的「状态转移方程」</strong>才能正确地穷举。</p><h3 id="解题步骤">解题步骤：</h3><a id="more"></a><ol type="1"><li>定义子问题</li><li>写出子问题的递推关系</li><li>确定 DP 数组的计算顺序（一般采用<strong>自底向上</strong>）</li><li>空间优化（可选） ## 第一类题型：斐波那契数列。 <a href="#509，斐波那契数列，easy">509，斐波那契数列，easy</a></li></ol><p><a href="#70，爬楼梯，easy">70，爬楼梯，easy</a></p><p><a href="#198，打家劫舍，easy">198，打家劫舍，easy</a></p><p><a href="#213，打家劫舍Ⅱ，medium">213，打家劫舍Ⅱ，medium</a></p><p><a href="#信件错排问题">信件错排问题</a></p><p><a href="#母牛生产">母牛生产</a> 通过「斐波那契数列问题」明白什么是<strong>重叠子问题</strong>（斐波那契数列没有求最值，所以严格来说不是动态规划问题）。 #### 509，斐波那契数列，easy</p><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(0) &#x3D; 0,   F(1) &#x3D; 1</span><br><span class="line">F(N) &#x3D; F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure><p>给定 N，计算 F(N)。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) &#x3D; F(1) + F(0) &#x3D; 1 + 0 &#x3D; 1.</span><br></pre></td></tr></table></figure><ul><li><p>方法一：暴力递归。</p><p>此解法最好理解，但效率不高，这是因为效率低，由下面的递归树不难发现<strong>存在大量重复计算</strong>，这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。 <img src="https://img-blog.csdnimg.cn/20201223113149629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><ul><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们想办法解决这个问题。</p></li><li><p>方法二：带备忘录的自顶向下</p><p>先<strong>计算存储子问题的答案，</strong>然后利用子问题的答案计算当前斐波那契数的答案。我们将递归计算，但是通过记忆化<strong>不重复计算</strong>已计算的值。</p><p>可以用数组 或 HashMap 存储已计算过的值。</p><ul><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            memo[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(memo, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] memo, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//已经计算过则直接取出</span></span><br><span class="line">        <span class="keyword">if</span>(memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line"><span class="comment">//没有计算过</span></span><br><span class="line">        memo[n] = helper(memo, n - <span class="number">1</span>) + helper(memo, n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>再次画出递归树。 <img src="https://img-blog.csdnimg.cn/img_convert/a627c1fa67c57265d1588257c847dbc5.png" alt="img" /> 通过剪枝，极大减少了子问题（即递归图中节点）的个数。 <img src="https://img-blog.csdnimg.cn/20201223130552783.png" alt="在这里插入图片描述" /></li><li><p>方法三：迭代（自底向上）</p><p>可以把这个「备忘录」独立出来成为一张表，发现计算index = n 的值只与前两个有关，则<strong>自底</strong> 建立前两个元素。</p></li><li><p>代码：</p><p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(n-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">           sum = first + second;</span><br><span class="line">           first = second;</span><br><span class="line">           second = sum;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> first;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> 另一种： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">      <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">      dp[<span class="number">0</span>] = <span class="number">0</span>; dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">         dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[n];</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure> #### 70，爬楼梯，easy</p></li></ul><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">   1. 1 阶 + 1 阶</span><br><span class="line">   2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">   1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">   2.  1 阶 + 2 阶</span><br><span class="line">   3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li><p>我们用 f(x) 表示<strong>爬到第 xx 级台阶的方案数</strong>，考虑<strong>最后一步</strong>可能跨了<strong>一级</strong>台阶，也可能跨了两级台阶，所以我们可以列出如下式子：</p><p>f(x) = f(x - 1) + f(x - 2)</p><p>它意味着爬到第 x 级台阶的方案数是爬到<strong>第 x−1 级台阶的方案数</strong>和爬到<strong>第 x−2 级台阶的方案数</strong>的<strong>和</strong>。</p></li><li><p>与斐波那契数列的递推式相同，区别在于 f(0) = 1。</p></li><li><p>爬楼梯的过程自底向上。</p></li></ul></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//f(n) = f(n - 1) + f(n - 2)</span></span><br><span class="line"><span class="comment">//1 1 2 3 5 8 ...</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">         sum = first + second;</span><br><span class="line">         first = second;</span><br><span class="line">         second = sum;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> 另一种： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 上面两道题可以很好的理解动态规划的重叠子问题，递推关系也很简单，下面通过具体例子理解解题步骤：</p></li><li>定义子问题</li><li>写出子问题的递推关系</li><li>确定 DP 数组的计算顺序</li><li><p>空间优化（可选） #### 198，打家劫舍，easy</p></li></ul><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果<strong>两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</strong></p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。</span><br><span class="line">     偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。</span><br><span class="line">     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</span><br></pre></td></tr></table></figure><ul><li><p>解题步骤：</p><ol type="1"><li><p>定义子问题</p><p>原问题是【全部房子偷到的最大金额】，子问题是【小偷到第 k 间房屋时偷到的最大金额】</p><p>理解：</p><p>子问题是<strong>参数化</strong>的，我们定义的子问题中有参数 k。假设一共有 n 个房子的话，就一共有 n 个子问题。动态规划实际上就是通过求这一堆子问题的解，来求出原问题的解。这要求子问题需要具备两个性质：</p><ul><li>原问题要能由子问题表示。例如这道小偷问题中，k=n 时实际上就是原问题。否则，解了半天子问题还是解不出原问题，那子问题岂不是白解了。</li><li>一个子问题的解要能通过其他子问题的解求出。例如这道小偷问题中，f(k) 可以由 f(k−1) 和 f(k−2) 求出，具体原理后面会解释。这个性质就是教科书中所说的“最优子结构”。如果定义不出这样的子问题，那么这道题实际上没法用动态规划解。</li></ul></li><li><p>子问题递推关系</p><ul><li><p>base case</p><p>首先考虑最简单的情况。</p><p>1). 只有一间房屋，则偷窃的最高金额为此房屋的金额</p><p>2). 只有两间房屋，不能挨着偷，选择金额较高的房屋偷。</p><p>用 <span class="math inline">\(dp[k]\)</span> 表示前 k 间房屋能偷窃到的最高总金额</p><p><span class="math inline">\(dp[0] = nums[0]\)</span></p><p><span class="math inline">\(dp[1] = max(nums[0],nums[1])\)</span></p></li><li><p>状态转移方程</p><p>房屋数量大于两间，对第 k (k &gt; 2) 间房屋，有两个选择</p><p>1). 偷第 k 间，那么就不能偷第 k - 1 间，偷窃总金额为 前 k - 2 间房屋的最高金额 与 第 k 间房屋金额 之和。</p></li></ul><figure><img src="https://img-blog.csdnimg.cn/20201223131417241.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure></li></ol></li></ul><p>​ 2). 不偷第 k 间，偷窃总金额为 前 k - 1 间房屋的最高金额。</p><figure><img src="https://img-blog.csdnimg.cn/20201223131424947.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>​ 在两个选项中选择最大的一项即为答案。</p><p>​ 那么就有如下的状态转移方程：</p><p>​ <span class="math inline">\(dp[k] = max(dp[k - 1],dp[k - 2] + nums[k])\)</span></p><p>​ 3. 确定 DP 数组的计算顺序</p><p>动态规划有两种计算顺序，一种是自顶向下的、使用备忘录的递归方法，一种是自底向上的、使用 dp 数组的循环方法。不过在普通的动态规划题目中，99% 的情况我们都不需要用到备忘录方法，所以我们最好坚持用<strong>自底向上的 dp 数组</strong>。</p><p>此题中 <span class="math inline">\(dp[k]\)</span> 依赖 <span class="math inline">\(dp[k-1]\)</span> 和 <span class="math inline">\(dp[k-2]\)</span>，采用自底向上。</p><ul><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = nums.length;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n]; </span><br><span class="line">       <span class="comment">//base case</span></span><br><span class="line">       dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">       dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">          dp[i] = Math.max(dp[i - <span class="number">1</span>], nums[i] + dp[i - <span class="number">2</span>]); </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="打家劫舍medium">213，打家劫舍Ⅱ，medium</h4><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</strong></p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够<strong>偷窃到的最高金额。</strong></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,3,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你不能先偷窃 1 号房屋（金额 &#x3D; 2），然后偷窃 3 号房屋（金额 &#x3D; 2）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li><p>与上一题的区别在于所有房屋相连，即 第一间房屋 和 最后一间房屋 不能同时偷窃。</p><p>可简化为两个单排列问题：</p><ol type="1"><li><p>不偷第一间房屋，偷窃金额的最大值由从 第二间房（nums[1]）到 最后一间房（nums[n - 1]）的数组来确定。</p></li><li><p>不偷最后一间房屋，偷窃金额的最大值由从 第一间房（nums[0]）到 倒数第二间房（nums[n - 2]）的数组来确定。</p><p>再由上面两种情况得到的结果取最大值。</p></li></ol></li><li><p>由上题思路，只需在主函数 构造两个新的数组 进行 动态规划，再取最大值即为最后结果。</p></li><li><p>主函数的边界条件：</p><p><code>nums.length = 0</code> 返回 0</p><p><code>nums.length = 1</code> 返回 nums[0]</p></li></ul></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       n = nums.length;</span><br><span class="line">       <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//不偷 第一间</span></span><br><span class="line">       <span class="keyword">int</span>[] nums1 = <span class="keyword">new</span> <span class="keyword">int</span>[n - <span class="number">1</span>];</span><br><span class="line">       <span class="comment">//不偷 最后一间</span></span><br><span class="line">       <span class="keyword">int</span>[] nums2 = <span class="keyword">new</span> <span class="keyword">int</span>[n - <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">           nums1[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">           nums2[i] = nums[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Math.max(rob_init(nums1), rob_init(nums2));</span><br><span class="line">   &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob_init</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       n = nums.length;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n]; </span><br><span class="line">       <span class="comment">//base case</span></span><br><span class="line">       dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">       dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">          dp[i] = Math.max(dp[i - <span class="number">1</span>], nums[i] + dp[i - <span class="number">2</span>]); </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> #### 信件错排问题</p></li></ul><p>有 N 个 信 和 信封，它们被打乱，求错误装信方式的数量。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 2</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 4</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ol type="1"><li><p>定义子问题</p><p>原问题是【N 个信和信封的错装方式数量】，子问题是【第 i 个信和信封的错装方式数量】</p></li><li><p>子问题递推关系</p><ul><li><p>base case</p><p>首先考虑最简单的情况。用 <span class="math inline">\(dp[k]\)</span> 表示前 i 个信和信封的错装方式数量。</p><p>1). N = 0，数量为 0 =&gt; <span class="math inline">\(dp[0] = 0\)</span></p><p>2). N = 1，数量为 0 =&gt; <span class="math inline">\(dp[1] = 0\)</span></p><p>3). N = 2，数量为 1 =&gt; <span class="math inline">\(dp[2] = 1\)</span></p></li><li><p>状态转移方程</p><p>i &gt; 2 时，信封错装方式有两种可能。</p><p>1). 对信件 i 和 信件 j，如果 信件 i 装入信封 j，信件 j 装入信封 i，i 、j 互换后正确。其余 i - 2 个信件装错的数量为 <span class="math inline">\(dp[i - 2]\)</span>，j 的选择有$ (i - 1)$ 种。此情况的错装方式数量为 <span class="math inline">\((i - 1) * dp[i - 2]\)</span> <img src="https://img-blog.csdnimg.cn/2020122313191830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><p>2). 对信件 i 和 信件 j，如果 信件 i 装入信封 j，信件 j 装入信封 k，i 、j 互换后只有 j 正确。其余 i - 1 个信件装错的数量为 <span class="math inline">\(dp[i - 1]\)</span>，j 的选择有$ (i - 1)$ 种。此情况的错装方式数量为 <span class="math inline">\((i - 1) * dp[i - 1]\)</span> <img src="https://img-blog.csdnimg.cn/20201223131928987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><p>那么就有如下的状态转移方程：</p><p><span class="math inline">\(dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\)</span></p></li></ul></li></ol></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MailerrorNums</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">       dp[<span class="number">0</span>] = <span class="number">0</span>; dp[<span class="number">1</span>] = <span class="number">0</span>; dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">           dp[i] = (i - <span class="number">1</span>) * dp[i - <span class="number">2</span>] + (i - <span class="number">1</span>) * dp[i - <span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> #### 母牛生产</p></li></ul><p> 假设农场中成熟的母牛每年都会生 1 头小母牛，并且永远不会死。第一年有 1 只小母牛，从第二年开始，母牛开始生小母牛。每只小母牛 3 年之后成熟又可以生小母牛。给定整数 N，求 N 年后牛的数量。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 1</span><br><span class="line">输出：1 </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 2</span><br><span class="line">输出：2 </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 3</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：N &#x3D; 4</span><br><span class="line">输出：4 </span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ol type="1"><li><p>定义子问题</p><p>原问题为【N 年后牛的数量】，子问题是【第 i 年的牛数量】</p></li><li><p>子问题递推关系</p><ul><li><p>base case</p><p>i &lt;= 4 时，只有 第一头母牛 和 它生的小母牛。设 <span class="math inline">\(dp[i]\)</span> 为 第 i 年的牛数量。</p><p><span class="math inline">\(dp[0] = 0\)</span>、<span class="math inline">\(dp[1] = 1\)</span>、<span class="math inline">\(dp[2] = 2\)</span>、<span class="math inline">\(dp[3] = 3\)</span></p></li><li><p>状态转移方程</p><p>i &gt; 4 时，第一头母牛 生产的小母牛 也开始生产。此时 牛的数量为 上一年牛的数量 <span class="math inline">\(dp[i - 1]\)</span> 加上 三年前牛的数量（即 第 i 年有生产能力的牛 的数量）<span class="math inline">\(dp[i - 3]\)</span>，即</p><p><span class="math inline">\(dp[i] = dp[i - 1] + dp[i - 3]\)</span></p></li></ul></li></ol></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cowNums</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n &lt; = <span class="number">4</span>) <span class="keyword">return</span> n;</span><br><span class="line">       <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">       dp[<span class="number">0</span>] = <span class="number">0</span>; dp[<span class="number">1</span>] = <span class="number">1</span>; dp[<span class="number">2</span>] = <span class="number">2</span>; dp[<span class="number">3</span>] = <span class="number">3</span>; dp[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">           dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">3</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <comments>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%80%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—动态规划（二）</title>
      <link>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89/</link>
      <guid>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89/</guid>
      <pubDate>Tue, 29 Dec 2020 12:39:55 GMT</pubDate>
      
      <description>&lt;p&gt;刷了一系列这类的题，真的感受到dp 深深的套路，那就看看 什么套路来解此类题吧！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#300，最长递增子序列，medium&quot;&gt;300，最长递增子序列，medium&lt;/a&gt; &lt;a href=&quot;#673，最长递增子序列的个数，medium&quot;&gt;673，最长递增子序列的个数，medium&lt;/a&gt; &lt;a href=&quot;#435，无重叠区间，medium&quot;&gt;435，无重叠区间，medium&lt;/a&gt; &lt;a href=&quot;#646，最长数对链，medium&quot;&gt;646，最长数对链，medium&lt;/a&gt; &lt;a href=&quot;#452，用最少数量的箭引爆气球，medium&quot;&gt;452，用最少数量的箭引爆气球，medium&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;最长递增子序列&quot;&gt;最长递增子序列&lt;/h3&gt;
&lt;p&gt;最长递增子序列（Longest Increasing Subsequence，简写 LIS）是比较经典的一个问题，比较容易想到的是动态规划解法，时间复杂度 &lt;strong&gt;O(N^2)&lt;/strong&gt;。注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>刷了一系列这类的题，真的感受到dp 深深的套路，那就看看 什么套路来解此类题吧！</p><p><a href="#300，最长递增子序列，medium">300，最长递增子序列，medium</a> <a href="#673，最长递增子序列的个数，medium">673，最长递增子序列的个数，medium</a> <a href="#435，无重叠区间，medium">435，无重叠区间，medium</a> <a href="#646，最长数对链，medium">646，最长数对链，medium</a> <a href="#452，用最少数量的箭引爆气球，medium">452，用最少数量的箭引爆气球，medium</a></p><h3 id="最长递增子序列">最长递增子序列</h3><p>最长递增子序列（Longest Increasing Subsequence，简写 LIS）是比较经典的一个问题，比较容易想到的是动态规划解法，时间复杂度 <strong>O(N^2)</strong>。注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。</p><a id="more"></a><h4 id="最长递增子序列medium">300，最长递增子序列，medium</h4><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [7,7,7,7,7,7,7]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><p><code>1 &lt;= nums.length &lt;= 2500</code></p><p><code>-104 &lt;= nums[i] &lt;= 104</code></p><ul><li><p>思路：</p><ol type="1"><li><p>子问题</p><p>到 nums[i] 的最长递增子序列的长度为 <span class="math inline">\(dp[i]\)</span></p></li><li><p>递推关系</p><ul><li><p>base case</p><p>dp 数组应全部初始化为1，因为子序列最少也要包含自己。</p></li><li><p>状态转移方程</p></li></ul><figure><img src="https://img-blog.csdnimg.cn/20201229200921170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>对于 <span class="math inline">\(dp[i]\)</span>，<strong>比较 nums[i] 与前 i - 1 个元素</strong>，如果有比 nums[i] <strong>小</strong>的 元素 nums[j]，则 nums[i] 可以加入已形成的 <span class="math inline">\(dp[j]\)</span> 之后，<span class="math inline">\(dp[i]\)</span> 为与 <span class="math inline">\(dp[j] + 1\)</span> 取<strong>最大值</strong>后的结果。</p></li><li><p>返回值</p><p>最终返回最大的 <span class="math inline">\(dp[i]\)</span>，在第一次遍历数组得到 <span class="math inline">\(dp[0]\)</span> ~ <span class="math inline">\(dp[i-1]\)</span> 时，不断取最大值更新 res。</p></li></ol></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n = nums.length;</span><br><span class="line">     <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">     <span class="comment">//base case</span></span><br><span class="line">     Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">     <span class="comment">//得到 dp[0] ~ dp[i-1]</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">         <span class="comment">//nums[i] 与前 i-1 个数字进行比较，得到 dp[i]</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(nums[j] &lt; nums[i])</span><br><span class="line">                 dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//在dp[0]~dp[n-1] 中找出最大值即为结果 </span></span><br><span class="line">         res = Math.max(res, dp[i]);</span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> #### 673，最长递增子序列的个数，medium</p></li></ul><p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,4,7]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,2,2,2]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ol type="1"><li><p>子问题</p><p>到 nums[i] 结尾，最长递增子序列的长度为 <span class="math inline">\(dp[i]\)</span>，此外还需要一个数组 <span class="math inline">\(count[i]\)</span> 来记录具有该长度的序列个数。</p></li><li><p>递推关系</p><ul><li><p>base case</p><p>dp 数组应全部初始化为1，因为子序列最少也要包含自己。</p><p>count 数组全部初始化为1，个数至少有一个。</p></li><li><p>状态转移方程</p><p>遍历[0...i]，再套一层[0....j]，其中 j＜i</p><p>当 <code>nums[j]＜nums[i]</code>，说明可以形成最长递增序列，nums[i] 可以加入已形成的 <span class="math inline">\(dp[j]\)</span> 之后。</p><ul><li>当 <span class="math inline">\(dp[j] + 1 &gt; dp[i]\)</span> 时，第一次出现此长度，<span class="math inline">\(dp[i] = dp[j] + 1\)</span>，最长递增子序列的长度增加 但 个数不变，count[i] = count[j]</li><li>当 <span class="math inline">\(dp[j] + 1 = dp[i]\)</span> 时，在循环中已经出现过此长度，现在的组合方式 <code>count[i]</code> 加上 <code>count[j]</code> 并记录最大递增子序列长度</li></ul></li></ul></li><li><p>返回值</p>返回最大长度对应的种类数之和。</li></ol></li><li><p>举例：</p>输入：[1,1,3,2]<br /><img src="https://img-blog.csdnimg.cn/20201229201136525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findNumberOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> n = nums.length;</span><br><span class="line">      <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">      Arrays.fill(count, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class="line">                  <span class="keyword">if</span>(dp[j] + <span class="number">1</span> &gt; dp[i])&#123;</span><br><span class="line">                      dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                      count[i] = count[j];</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span>(dp[j] + <span class="number">1</span> == dp[i])&#123;</span><br><span class="line">                      count[i] += count[j];</span><br><span class="line">                  &#125;   </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          maxLength = Math.max(maxLength, dp[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(dp[i] == maxLength)&#123;</span><br><span class="line">              res += count[i];</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></p></li></ul><h4 id="一个小总结">一个小总结</h4><ul><li>上面两题思路是很像的，动态规划基于数学归纳法。</li><li>先得到第 i 位 的 最长递增子序列个数，最终结果（子序列的最大长度）应该是 dp 数组中的最大值。</li><li>而对 dp[i]，与前面的 i - 1 个数进行比较，加在前面的递增子序列之后，不断取最大值，得到 dp[i]。</li><li>第二题 多增加了count 数组来记录最长子序列的个数，注意循环中的比较。</li></ul><p>下面又是【最长递增子序列】的另一种题型，将上面题中的数组划分很多个小区间，如果能识别是同一种题就好解决了！</p><h4 id="无重叠区间medium">435，无重叠区间，medium</h4><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p><p>注意:</p><ol type="1"><li>可以认为区间的终点总是大于它的起点。</li><li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li></ol><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3], [3,4], [1,3] ]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [1,2], [1,2] ]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3] ]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</span><br></pre></td></tr></table></figure><ul><li><p>问题解析：</p><p>可以抽象成上面的问题：最长非严格递增子序列。题目要求可以接触但不可以重叠，即非严格递增。子序列长度改为区间个数，【删除区间的最小数量】即 【保留区间的最大个数】。</p></li><li><p>思路：</p><ol type="1"><li><p>子问题</p><p>到第 i 个区间，保留的最大区间数为 <span class="math inline">\(dp[i]\)</span>。</p></li><li><p>递推关系</p><ul><li><p>base case</p><p>dp 数组应全部初始化为1，因为最少也要保留一个区间。</p></li><li><p>状态转移方程</p><p>对于 <span class="math inline">\(dp[i]\)</span>，前面 j = [0, i - 1] 个区间都有可能与它重叠（重叠即 j 的第 1 个元素 &gt; i 的第 0 个元素），需要得到保留不重叠的区间的最大值。</p><p><span class="math inline">\(dp[i] = Math.max(dp[i], dp[j] + 1)\)</span></p></li></ul></li><li><p>返回值</p><p>遍历过程中得到 ans 即 保留不重叠的区间的最大值，最后返回 n - ans，即删除的最小区间个数。</p></li></ol></li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> n = intervals.length;</span><br><span class="line">      <span class="comment">//对区间按起始数字进行排序</span></span><br><span class="line">      Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> o1[<span class="number">1</span>]-o2[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//保留的最大区间个数</span></span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">              <span class="comment">//如果没有重叠（即右边的0元素大于等于左边的1元素），更新dp[i]</span></span><br><span class="line">              <span class="keyword">if</span>(intervals[i][<span class="number">0</span>] &gt;= intervals[j][<span class="number">1</span>])   </span><br><span class="line">                  dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);               </span><br><span class="line">          &#125;</span><br><span class="line">          ans = Math.max(ans, dp[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//删除的最小数量</span></span><br><span class="line">      <span class="keyword">return</span> n - ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另一种：双指针</p><ul><li><p>思路：</p><p>先对各个区间从小到大排序，左区间小的优先；相同情况下，右区间小的优先。</p><p>排序后两个指针分别指向<strong>相邻</strong>两个区间，不发生重叠继续比较下两个相邻区间；发生重叠则去除 右元素较大的一个区间，这样较小的右区间才会尽可能减小与其他区间交集。</p></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o1[<span class="number">0</span>] != o2[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//i指向待比较的左边区间，j指向待比较的右边区间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; intervals.length-<span class="number">1</span> &amp;&amp; j&lt;=intervals.length-<span class="number">1</span>; i++,j++) &#123;</span><br><span class="line">        <span class="comment">//左边的1元素 &gt; 右边的0元素，发生重叠，需要去除其中一个</span></span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">1</span>] &gt; intervals[j][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="comment">//去除1元素较大的那个，如果右边区间的1元素较大，保留左边，i = i - 1，再次进入循环 i + 1，还在原位置;</span></span><br><span class="line">            <span class="comment">//如果左边区间的1元素较大，保留右边，i = j - 1，再次进入循环 i + 1，i = j , j向后移</span></span><br><span class="line">            i = intervals[i][<span class="number">1</span>] &lt; intervals[j][<span class="number">1</span>] ? i - <span class="number">1</span>: j - <span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//不发生重叠</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 646，最长数对链，medium</p></li></ul></li></ul><p>给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。</p><p>现在，我们定义一种跟随关系，当且仅当 b &lt; c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。</p><p>给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[[1,2], [2,3], [3,4]]</span><br><span class="line">输出：2</span><br><span class="line">解释：最长的数对链是 [1,2] -&gt; [3,4]</span><br></pre></td></tr></table></figure><ul><li>问题说明：与上一题的区别在于数对之间不可以有相等数字，是严格递增的区间。返回的是最长数对区间个数。</li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLongestChain</span><span class="params">(<span class="keyword">int</span>[][] pairs)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n = pairs.length;   </span><br><span class="line">       </span><br><span class="line">      Arrays.sort(paris, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (o1[<span class="number">0</span>] != o2[<span class="number">0</span>]) &#123;</span><br><span class="line">                  <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">              &#125;<span class="keyword">else</span></span><br><span class="line">                  <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">              <span class="comment">//不发生重叠, 更新 dp[i]</span></span><br><span class="line">              <span class="keyword">if</span>(pairs[i][<span class="number">0</span>] &gt; pairs[j][<span class="number">1</span>])&#123;</span><br><span class="line">                  dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">              &#125;    </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//上面对pairs 进行了排序，dp数组递增，返回最后一个元素即最大值</span></span><br><span class="line">      <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 452，用最少数量的箭引爆气球，medium</li></ul><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart</code>，<code>xend</code>， 且满足 <code>xstart ≤ x ≤ xend</code>，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 <code>points</code> ，其中 <code>points [i] = [xstart,xend]</code> ，返回引爆所有气球所必须射出的最小弓箭数。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：points &#x3D; [[10,16],[2,8],[1,6],[7,12]]</span><br><span class="line">输出：2</span><br><span class="line">解释：对于该样例，x &#x3D; 6 可以射爆 [2,8],[1,6] 两个气球，以及 x &#x3D; 11 射爆另外两个气球</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：points &#x3D; [[1,2],[3,4],[5,6],[7,8]]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><ul><li>问题说明：<span class="math inline">\(dp[i]\)</span> 表示 到第 i 个区间的最小弓箭数。如果 左边区间的1元素 &gt;= 右边区间的0元素，说明有重叠，可以共用一个箭；如果 左边区间的1元素 &lt; 右边区间的0元素，没有重叠，<span class="math inline">\(dp[i] = dp[j] + 1\)</span>。</li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(points.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n = points.length;</span><br><span class="line">      Arrays.sort(points, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (o1[<span class="number">0</span>] != o2[<span class="number">0</span>]) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Integer.compare(o1[<span class="number">0</span>], o2[<span class="number">0</span>]);</span><br><span class="line">              &#125;<span class="keyword">else</span></span><br><span class="line">                  <span class="keyword">return</span> Integer.compare(o1[<span class="number">1</span>], o2[<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;    </span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">              <span class="comment">//如果区间不重叠（左边的1元素 &lt; 右边的0元素），dp[j] + 1</span></span><br><span class="line">              <span class="keyword">if</span>(points[i][<span class="number">0</span>] &gt; points[j][<span class="number">1</span>])</span><br><span class="line">                  dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">          &#125;      </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注意：排序时，如果使用 <code>o1[0]-o2[0]</code> 、 <code>o1[1]-o2[1]</code> 在 [[-2147483646,-2147483645],[2147483646,2147483647]] 测试用例时会导致整形溢出。</li></ul><h4 id="一个小总结-1">一个小总结</h4><pre><code>这里动态规划的解法并不高效，只是为了讲解整体思路。上面几题都是先对区间排序，再根据题意看是否重叠更新dp[i]。</code></pre><p>继续刷题！继续更新！</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      <category domain="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <comments>http://example.com/2020/12/29/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot整合MyBatis-过程及报错解决</title>
      <link>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</link>
      <guid>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</guid>
      <pubDate>Sun, 27 Dec 2020 01:45:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;最近在学习Spring Boot，在整合MyBatis进行数据访问，报过多次错，踩了很多坑，在此记录一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML或注解来配置和映射原生信息，将接口和 Java 的POJOs(Plain Ordinary Java Object,普通的Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;整合过程&quot;&gt;整合过程&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;导入依赖 pom.xml文件如下：&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="引言">引言</h2><p>最近在学习Spring Boot，在整合MyBatis进行数据访问，报过多次错，踩了很多坑，在此记录一下。</p><blockquote><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML或注解来配置和映射原生信息，将接口和 Java 的POJOs(Plain Ordinary Java Object,普通的Java对象)映射成数据库中的记录。</p></blockquote><h2 id="整合过程">整合过程</h2><ol type="1"><li>导入依赖 pom.xml文件如下：</li></ol><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>在 application.properties 中连接数据库 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li><li>测试数据源 在tests类进行测试是否连接了数据库，代码及测试结果如下： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05MybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://img-blog.csdnimg.cn/2020122708531157.png" alt="测试结果" /> ## 项目目标 对数据库 mybatis 中 user 表的查询，user 表内容为： <img src="https://img-blog.csdnimg.cn/20201227092203933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li></ol><h2 id="项目构建">项目构建</h2><ol type="1"><li><p>项目结构 <img src="https://img-blog.csdnimg.cn/20201227090000359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p></li><li><p>搭建步骤： 1）. 在 application.properties 中整合 MyBatis <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#设置包别名（在Mapper映射文件中直接使用实体类名）</span><br><span class="line">mybatis.type-aliases-package==com.kuang.pojo</span><br><span class="line">#告诉系统在哪里找mapper.xml文件（映射文件）</span><br><span class="line">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure> 2). 创建实体类User <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line">   <span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line">   <span class="keyword">import</span> lombok.Data;</span><br><span class="line">   <span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Data</span></span><br><span class="line">   <span class="meta">@NoArgsConstructor</span></span><br><span class="line">   <span class="meta">@AllArgsConstructor</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String uname;</span><br><span class="line">   <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 3). 创建数据访问接口 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">* 创建MyBatis的 Mapper 映射接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这个注解表示这是一个mybatis的 mapper 类 ：Dao（数据访问层）</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//    User queryUserById(int id);</span></span><br><span class="line"><span class="comment">//    int addUser(User user);</span></span><br><span class="line"><span class="comment">//    int updateUser(User user);</span></span><br><span class="line"><span class="comment">//    int deleteUser(int id);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 4). 创建 Mapper 映射文件 在 resources 目录下，创建名为 mapper 的包，并在包中创建 SQL 映射文件 Mapper.xml。 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure> 5). 创建控制器类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.queryUserList();</span><br><span class="line">       <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> userList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 6). 运行 由于在 Mapper 映射接口中有 <span class="citation" data-cites="Mapper">@Mapper</span> 注解，Application 主类中不用添加 <span class="citation" data-cites="MapperScan">@MapperScan</span> 注解。直接启动，运行效果为： <img src="https://img-blog.csdnimg.cn/20201227092422842.png" alt="在这里插入图片描述" /> ## 报错记录 #### bean无法注入的问题——Error creating bean with name 'userController':</p></li></ol><p>错误原因可能有： 1. 包的位置不对，可以看下上面的项目结构，主类 和 子包都要在com.kuang 包下。 2. 注解使用不对，如 Controller接口没有使用@Controller、<span class="citation" data-cites="RestController注解等">@RestController注解等</span>。 3. xml 文件格式，去掉空格和中文注解 #### Invalid bound statement (not found): 这个报错原因一般是xml 映射文件有错误。检查下面几处： 1. xml 文件所在包名 与 接口 所在包名 一致，否则会报500 <img src="https://img-blog.csdnimg.cn/20201227093757891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><ol start="2" type="1"><li>xml 文件中 namespace 与 映射接口 的位置一致 <img src="https://img-blog.csdnimg.cn/20201227093409360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li><li>检察函数名是否一致 UserMapper 映射接口中 <img src="https://img-blog.csdnimg.cn/2020122709391747.png" alt="在这里插入图片描述" /> Mapper.xml 中 <img src="https://img-blog.csdnimg.cn/20201227093936837.png" alt="在这里插入图片描述" /> ## 总结 虽然是个很简单的整合，但一直报错，反复检查代码的过程中，也对各个注解的功能，项目的架构理解更深，继续积累，继续加油！</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      <category domain="http://example.com/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="http://example.com/tags/MyBatis/">MyBatis</category>
      
      
      <comments>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—重建二叉树</title>
      <link>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <guid>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <pubDate>Mon, 21 Dec 2020 06:39:20 GMT</pubDate>
      
      <description>&lt;p&gt;LeetCode中有三道很类似的题，思路也大同小异，故作一总结。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#105，从前序与中序遍历序列构造二叉树，medium&quot;&gt;105，从前序与中序遍历序列构造二叉树，medium&lt;/a&gt; &lt;a href=&quot;#106，根据中序和后序遍历构造二叉树，medium&quot;&gt;106，根据中序和后序遍历构造二叉树，medium&lt;/a&gt; &lt;a href=&quot;#889，根据前序和后序遍历构造二叉树，medium&quot;&gt;889，根据前序和后序遍历构造二叉树，medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这三道题都是给出两种遍历方式，由其遍历顺序可发现规律来重建此二叉树。下面详解105题，后两题思路稍作改变，比较好懂了。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>LeetCode中有三道很类似的题，思路也大同小异，故作一总结。</p><p><a href="#105，从前序与中序遍历序列构造二叉树，medium">105，从前序与中序遍历序列构造二叉树，medium</a> <a href="#106，根据中序和后序遍历构造二叉树，medium">106，根据中序和后序遍历构造二叉树，medium</a> <a href="#889，根据前序和后序遍历构造二叉树，medium">889，根据前序和后序遍历构造二叉树，medium</a></p><p>这三道题都是给出两种遍历方式，由其遍历顺序可发现规律来重建此二叉树。下面详解105题，后两题思路稍作改变，比较好懂了。</p><a id="more"></a><h4 id="从前序与中序遍历序列构造二叉树medium">105，从前序与中序遍历序列构造二叉树，medium</h4><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><p>注意: 你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7] 中序遍历 inorder = [9,3,15,20,7] 返回如下的二叉树：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><h5 id="方法一分治思想-hashmap">方法一：分治思想 + HashMap</h5><ul><li><p>前序遍历：根-左-右。</p><p>中序遍历：左-根-右。</p><p>以题目示例为例： <img src="https://pic.leetcode-cn.com/1603644245-oFksKK-Picture1.png" alt="Picture1.png" style="zoom:80%;" /></p><ul><li>前序遍历划分 <code>[ 3 | 9 | 20 15 7 ]</code></li><li>中序遍历划分 <code>[ 9 | 3 | 15 20 7 ]</code></li></ul><p>则前序遍历的首个元素 为 <strong>根节点的值</strong>，在中序遍历数组中找到 <strong>根节点所在索引</strong>，其<strong>左边的元素</strong>为 根节点的<strong>左子树</strong>，<strong>右边的元素</strong>为 根节点的<strong>右子树</strong>。</p></li><li><p>以上子树的递推性质是 <strong>分治算法</strong> 的体现，考虑通过递归对所有子树进行划分。</p><p>辅助函数 build，参数为：前序遍历的起点索引 preL，结束索引 preR，中序遍历的起点索引 inL，结束索引 inR。</p><p>通过上面所述找到 root 在中序遍历的索引，递归其左边元素和 右边元素，分别赋给 root 的左子树 和 右子树。递归出口为 <code>preL &gt; preR || inL &gt; inR</code>，表示越过叶子节点，此时返回null。</p><ul><li><p>其中 找到 root 在中序遍历的索引 一种简单的方法是直接扫描整个中序遍历的结果并找出根节点，但这样做的时间复杂度较高。我们可以考虑使用 <strong>HashMap</strong> 快速地<strong>定位根节点</strong>。对于哈希映射中的每个键值对，键表示一个元素（节点的值），值表示其在中序遍历中的索引。</p></li><li><p>确定 preL、preR、inL、inR 需要解方程 <img src="https://img-blog.csdnimg.cn/20201221142412691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><p>左子树 在 前序遍历中的起点索引：preL + 1</p><p>左子树 在 前序遍历中的结束索引：x</p><pre><code> x 满足 x - (preL + 1) = rootIndex - 1 - intL=&gt;  x = rootIndex - intL + preL</code></pre><p>左子树 在 中序遍历中的起点索引：intL</p><p>左子树 在 中序遍历中的结束索引：rootIndex - 1</p><p>右子树 在前序遍历中的起点索引：x + 1</p><p>右子树 在 前序遍历中的结束索引：preR</p><p>右子树 在 中序遍历中的起点索引：rootIndex + 1</p><p>右子树 在 中序遍历中的结束索引：inR</p></li></ul></li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] preorder;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.preorder = preorder;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="comment">//将中序遍历数组的元素和其索引存入map键值对</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class="line">          map.put(inorder[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//前序遍历:preL起始索引，preR结束索引；中序遍历：inL起始索引，inR结束索引</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(preL &gt; preR || inL &gt; inR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//将前序遍历首个元素设为根节点</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = preorder[preL];</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//找到中序遍历中root的索引</span></span><br><span class="line">      <span class="keyword">int</span> rootIndex = map.get(rootVal);</span><br><span class="line">      <span class="comment">//递归调用中序遍历root左右部分形成root的左右子树</span></span><br><span class="line">      root.left = build(preL + <span class="number">1</span>, rootIndex - inL + preL, inL, rootIndex - <span class="number">1</span>);</span><br><span class="line">      root.right = build(rootIndex - inL + preL + <span class="number">1</span>, preR, rootIndex + <span class="number">1</span>, inR);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 方法二</li><li><p>和上面总体思想一样，但不借助 HashMap 来定位 root 在中序遍历数组的索引，而是用 List 的 indexOf 来定位，用 subList 确定左右子树的范围。</p></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">      List&lt;Integer&gt; prelist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      List&lt;Integer&gt; inlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//将int数组转为List</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preorder.length; i++)&#123;</span><br><span class="line">          prelist.add(preorder[i]);</span><br><span class="line">          inlist.add(inorder[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(prelist, inlist);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(List&lt;Integer&gt; prelist, List&lt;Integer&gt; inlist)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(inlist.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//前序集合的首个元素为根节点</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = prelist.remove(<span class="number">0</span>);</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//找到根节点在中序的索引</span></span><br><span class="line">      <span class="keyword">int</span> index = inlist.indexOf(rootVal);</span><br><span class="line">      <span class="comment">//新的左右两边</span></span><br><span class="line">      root.left = build(prelist, inlist.subList(<span class="number">0</span>, index));</span><br><span class="line">      root.right = build(prelist, inlist.subList(index + <span class="number">1</span>, inlist.size()));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 先把数组转化为list集合，然后在list集合中进行截取，这样效率明显不是很高。 #### 106，根据中序和后序遍历构造二叉树，medium 根据一棵树的中序遍历与后序遍历构造二叉树。</p></li></ul><p>注意: 你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>中序遍历 inorder = [9,3,15,20,7] 后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><ul><li><p>思路：和上一题的思路基本一致，由中序遍历的规律（root 左部分为左子树，右部分为右子树），后序遍历的根节点为最后的节点。</p></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] postorder;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.postorder = postorder;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class="line">          map.put(inorder[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, inorder.length - <span class="number">1</span>, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> inL, <span class="keyword">int</span> inR, <span class="keyword">int</span> postL, <span class="keyword">int</span> postR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(inL &gt; inR || postL &gt; postR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//在后序数组中找到根节点root</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = postorder[postR];</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//中序中root的索引</span></span><br><span class="line">      <span class="keyword">int</span> rootIndex = map.get(rootVal);</span><br><span class="line">      root.left = build(inL, rootIndex - <span class="number">1</span>, postL, postL + rootIndex - <span class="number">1</span> - inL);</span><br><span class="line">      root.right = build(rootIndex + <span class="number">1</span>, inR, postL + rootIndex - inL, postR - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 889，根据前序和后序遍历构造二叉树，medium 返回与给定的前序和后序遍历匹配的任何二叉树。</p></li></ul><p>pre 和 post 遍历中的值是不同的正整数。</p><p>示例：</p><p>输入：pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1] 输出：[1,2,3,4,5,6,7]</p><ul><li><p>思路：还是按照之前的思路，找到根节点（即前序遍历的第一个元素或后序遍历的最后一个元素），但前序和后序 不像 中序的根作为分隔点，所以需要再找左子树的根 在 后序遍历数组 的 索引，依次来确定左右子树的长度。</p></li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  Map&lt;Integer,Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] post;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] pre;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.post = post;</span><br><span class="line">      <span class="keyword">this</span>.pre = pre;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; post.length; i++)&#123;</span><br><span class="line">          map.put(post[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, pre.length - <span class="number">1</span>, <span class="number">0</span>,  post.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> postL, <span class="keyword">int</span> postR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(preL &gt; preR || postL &gt; postR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//不加这步，下面int leftRoot = pre[preL + 1];会出现角标越界</span></span><br><span class="line">      <span class="keyword">if</span>(preL == preR) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(pre[preL]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//根的索引即前序第一个元素和后序最后一个元素</span></span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(post[postR]);</span><br><span class="line">      <span class="comment">//下面是为了确定左子树在数组中的长度</span></span><br><span class="line">      <span class="comment">//左子树根节点</span></span><br><span class="line">      <span class="keyword">int</span> leftRoot = pre[preL + <span class="number">1</span>];</span><br><span class="line">      <span class="comment">//左子树根节点在后序的索引</span></span><br><span class="line">      <span class="keyword">int</span> leftRootIndex = map.get(leftRoot);</span><br><span class="line"></span><br><span class="line">      root.left = build(preL + <span class="number">1</span>, leftRootIndex - postL + preL + <span class="number">1</span>, postL, leftRootIndex);</span><br><span class="line">      root.right = build(leftRootIndex - postL + preL + <span class="number">2</span>, preR, leftRootIndex + <span class="number">1</span>, postR - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 总结</li><li>三个题中 前序 + 中序 和 后序 + 中序，都利用中序的根左边部分是左子树，右边部分是右子树。所以先建立根节点，并找出根节点在中序遍历数组的索引，就可以利用此规律重建二叉树。</li><li>只有 前序 + 后序时，无法利用中序遍历的规律，则需要再找出左子树的根节点，来确定左、右子树的长度。</li><li>用 HashMap 来以空间换时间，快速定位。</li><li><p>注意三题都不能有重复数字，才能用上面方法。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      
      <comments>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—二叉树的遍历</title>
      <link>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <guid>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <pubDate>Sun, 20 Dec 2020 14:38:17 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;此篇用于梳理二叉树的遍历方式深度优先遍历前中后序遍历和广度优先遍历不仅能快速领会思想和总结规律还可以顺便刷下这些题&quot;&gt;此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;#LeetCode的94题：二叉树的中序遍历&quot;&gt;94，二叉树的中序遍历，medium&lt;/a&gt; &lt;a href=&quot;#LeetCode的102题：二叉树的层次遍历&quot;&gt;102，二叉树的层序遍历，easy&lt;/a&gt; &lt;a href=&quot;#LeetCode的230题：二叉搜索树中第k小的元素&quot;&gt;230，二叉搜索树中第k小的元素，medium&lt;/a&gt; &lt;a href=&quot;#LeetCode的501题：二叉搜索树中的众数&quot;&gt;501，二叉搜索树中的众数，easy&lt;/a&gt; &lt;a href=&quot;#LeetCode的530题：二叉树搜索树的最小绝对差&quot;&gt;530，二叉树搜索树的最小绝对差，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#LeetCode的530题：二叉树搜索树的最小绝对差&quot;&gt;530，二叉树搜索树的最小绝对差，easy&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="此篇用于梳理二叉树的遍历方式深度优先遍历前中后序遍历和广度优先遍历不仅能快速领会思想和总结规律还可以顺便刷下这些题">此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：</h4><p><a href="#LeetCode的94题：二叉树的中序遍历">94，二叉树的中序遍历，medium</a> <a href="#LeetCode的102题：二叉树的层次遍历">102，二叉树的层序遍历，easy</a> <a href="#LeetCode的230题：二叉搜索树中第k小的元素">230，二叉搜索树中第k小的元素，medium</a> <a href="#LeetCode的501题：二叉搜索树中的众数">501，二叉搜索树中的众数，easy</a> <a href="#LeetCode的530题：二叉树搜索树的最小绝对差">530，二叉树搜索树的最小绝对差，easy</a></p><p><a href="#LeetCode的530题：二叉树搜索树的最小绝对差">530，二叉树搜索树的最小绝对差，easy</a></p><a id="more"></a><h2 id="一二叉树的遍历有四种方式">一、二叉树的遍历有四种方式：</h2><h5 id="前序遍历根-左-右">1. 前序遍历：根-左-右</h5><h5 id="中序遍历左-根-右">2. 中序遍历：左-根-右</h5><h5 id="后序遍历左-右-根">3. 后序遍历：左-右-根</h5><h5 id="层次遍历bfs-分层存储">4. 层次遍历：BFS + 分层存储</h5><p>例如： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">4   5   6</span><br></pre></td></tr></table></figure> - 前序遍历顺序：[1 2 4 5 3 6] （中-左-右） - 中序遍历顺序：[4 2 5 1 3 6] （左-中-右） - 后序遍历顺序：[4 5 2 6 3 1] （右-左-中） - 层次遍历顺序：[1 2 3 4 5 6]</p><p>层次遍历使用 BFS 实现，利用的就是 BFS 一层一层遍历的特性；而前序、中序、后序遍历利用了 DFS 实现。</p><p>前序、中序、后序遍只是在对节点访问的顺序有一点不同，其它都相同。</p><p>注意：对于<strong>二叉搜索树，常进行中序遍历，其结果由小到大的顺序</strong>有时对解题很有帮助。 ## 二、二叉树遍历的模板 ##### 1. 前序遍历：根-左-右 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    visit(root);</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 2. 中序遍历：左-根-右</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    visit(root);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历左-右-根-1">3. 后序遍历：左-右-根</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">    visit(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="层次遍历">4. 层次遍历</h5><p>使用【队列】来由上至下由左至右遍历，队列由 LinkedList 实现。</p><h2 id="三实现递归与迭代两种方式">三、实现（递归与迭代两种方式）</h2><h5 id="前序遍历根-左-右-1">1. 前序遍历：根-左-右</h5><h6 id="leetcode的144题二叉树的前序遍历">LeetCode的144题：二叉树的前序遍历</h6><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="img" style="zoom:80%;" /></p><p>输入：root = [1,null,2,3] 输出：[1,2,3]</p><ul><li><p>方法一：递归。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       res.add(root.val);</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：迭代。借助栈。</p><ul><li><p>思路： 首先应该创建一个Stack用来存放节点，首先我们想要打印根节点的数据，此时Stack里面的内容为空，所以我们优先将头结点加入Stack，然后打印。</p>之后应该先打印左子树，然后右子树。所以先加入Stack的就是右子树，然后左子树。 <img src="https://img-blog.csdnimg.cn/20201220215751572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li><li><p>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     stack.push(root);</span><br><span class="line">     <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">         TreeNode node = stack.pop();</span><br><span class="line">         res.add(node.val);</span><br><span class="line">          <span class="comment">//栈先进后出，为保证左边的子节点先弹出，把右子节点压入栈</span></span><br><span class="line">         <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) stack.push(node.right);</span><br><span class="line">         <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) stack.push(node.left);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li></ul></li></ul><h5 id="中序遍历左-根-右-1">2. 中序遍历：左-根-右</h5><h6 id="leetcode的94题二叉树的中序遍历">LeetCode的94题：二叉树的中序遍历</h6><ul><li>方法一：递归。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="comment">//左中右</span></span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       res.add(root.val);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>方法二：迭代。<ul><li>思路： 从根节点向左找到最后一个左子节点，并压入栈。弹出栈顶节点，并加入结果集。再找此节点的右子节点，如果为空将弹出根节点。 <img src="https://img-blog.csdnimg.cn/20201220220612254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></li><li>代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//向左找左子节点</span></span><br><span class="line">           <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="comment">//将左子节点入栈</span></span><br><span class="line">               stack.push(root);</span><br><span class="line">               root = root.left;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//找到左子树最后一个左子节点弹出并添加至结果集</span></span><br><span class="line">           root = stack.pop();</span><br><span class="line">           res.add(root.val);</span><br><span class="line">           <span class="comment">//找此节点的右子节点进入上面循环</span></span><br><span class="line">           root = root.right;  </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   ｝</span><br></pre></td></tr></table></figure> ##### 3. 后序遍历：左-右-根 ###### LeetCode的145题：二叉树的后序遍历</li></ul></li><li>方法一：递归。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="comment">//左右中</span></span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">       res.add(root.val);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>方法二：迭代。前序遍历的结果倒序添加。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span>(root != <span class="keyword">null</span>) stack.push(root);</span><br><span class="line">       <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">           TreeNode node = stack.pop();</span><br><span class="line">           <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) stack.push(node.left);</span><br><span class="line">           <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) stack.push(node.right);</span><br><span class="line">           </span><br><span class="line">           res.add(<span class="number">0</span>, node.val);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> ##### 4. 层次遍历：BFS遍历 + 分层</li></ul><p><img src="https://img-blog.csdnimg.cn/20201220214729751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BFS遍历实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="leetcode的102题二叉树的层次遍历">LeetCode的102题：二叉树的层次遍历</h6><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>示例： 二叉树：[3,9,20,null,null,15,7],</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回其层次遍历结果：</p><p>[ [3], [9,20], [15,7]]</p><ul><li>思路：由上面BFS遍历过程，稍加修改，即将每层的节点序列存储到集合temp中，再将每一层添加至<code>List&lt;List&lt;Integer&gt;&gt; res</code>即可</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                temp.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将每层添加至结果集</span></span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四二叉搜索树的中序遍历">四、二叉搜索树的中序遍历</h2><p>由于<strong>BST树左小右大、中序遍历的结果由小到大</strong>，常利用这一结论来解题。如： ###### LeetCode的230题：二叉搜索树中第k小的元素 给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p><p>说明： 你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><ul><li>思路：直接应用上面中序遍历的结果，返回 list 的 第 k - 1 个元素即可。<ul><li>递归 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      helper(root, res);       </span><br><span class="line">      <span class="keyword">return</span> res.get(k - <span class="number">1</span>).val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序遍历结果</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;TreeNode&gt; list)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      helper(root.left, list);</span><br><span class="line">      list.add(root);</span><br><span class="line">      helper(root.right, list);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>迭代 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">          <span class="comment">//向左找左子节点</span></span><br><span class="line">          <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="comment">//将左子节点入栈</span></span><br><span class="line">              stack.push(root);</span><br><span class="line">              root = root.left;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//找到左子树最后一个左子节点弹出并添加至结果集</span></span><br><span class="line">          root = stack.pop();</span><br><span class="line">          <span class="comment">//找到第k小的节点</span></span><br><span class="line">          k--;</span><br><span class="line">          <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">          <span class="comment">//找此节点的右子节点进入上面循环</span></span><br><span class="line">          root = root.right;  </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ###### LeetCode的501题：二叉搜索树中的众数 给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</li></ul></li></ul><p>假定 BST 有如下定义：</p><p>结点左子树中所含结点的值小于等于当前结点的值 结点右子树中所含结点的值大于等于当前结点的值 左子树和右子树都是二叉搜索树</p><p>例如： 给定 BST [1,null,2,2],</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> &#x2F;</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>返回[2].</p><p>提示：如果众数超过1个，不需考虑输出顺序 - 方法：改造中序遍历。</p><ul><li><p>思路：</p><p>加入全局变量当前节点值<code>curVal</code>，当前节点出现次数<code>count</code>，最大出现的次数<code>maxCount</code></p><ul><li>如果当前节点值 <code>root.val == curVal</code>，<code>count++</code></li><li>如果不等于<code>curVal</code>，说明遇到下一个新的值，更新<code>curVal = root.val</code> ，且 <code>count = 1</code></li></ul><p>比较 <code>count</code> 与 maxCount</p><ul><li>如果相等，添加到结果集中</li><li>如果<code>count &gt; maxCount</code>，清空结果集，并把节点值 <code>root.val</code> 加入结果集，更新<code>maxCount = count</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> curVal;<span class="comment">//当前节点的值</span></span><br><span class="line">  <span class="keyword">int</span> count;<span class="comment">//cur节点的次数</span></span><br><span class="line"> <span class="keyword">int</span> maxCount;<span class="comment">//当前的最大次数</span></span><br><span class="line">  List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">      inorder(root);</span><br><span class="line">      <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++)&#123;</span><br><span class="line">          ans[i] = res.get(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      inorder(root.left);</span><br><span class="line">  <span class="comment">//如果当前节点值 node.val = cur，count + 1</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = root.val;</span><br><span class="line">      <span class="keyword">if</span>(rootVal == curVal)&#123;</span><br><span class="line">          count++;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 如果不等于cur，说明遇到下一个新的值，更新cur，且count = 1</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          curVal = rootVal;</span><br><span class="line">          count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//比较count 与 maxCount</span></span><br><span class="line">  <span class="comment">// 如果相等，添加到结果集中</span></span><br><span class="line">      <span class="keyword">if</span>(count == maxCount)&#123;</span><br><span class="line">         res.add(rootVal);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 如果count &gt; maxCount，清空结果集，并把节点值 node.val 加入结果集，更新maxCount = count</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(count &gt; maxCount)&#123;</span><br><span class="line">          res.clear();</span><br><span class="line">          res.add(rootVal);</span><br><span class="line">         maxCount = count;</span><br><span class="line">      &#125;</span><br><span class="line">      inorder(root.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ###### LeetCode的530题：二叉树搜索树的最小绝对差 给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</li></ul></li></ul><p>示例： 输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  3</span><br><span class="line"> &#x2F;</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>输出： 1</p><p>解释： 最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。 - 方法：改造中序遍历。因为二叉搜索树的中序遍历结果是升序的，我们只需要在中序遍历的时候和前一个节点比较，保存最小的差值即可。建立前一个节点作为全局变量。</p><ul><li>递归： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  TreeNode pre;<span class="comment">//前一个节点</span></span><br><span class="line">  <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">      inorder(root);</span><br><span class="line">      <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      inorder(root.left);</span><br><span class="line">      <span class="keyword">if</span>(pre != <span class="keyword">null</span>)</span><br><span class="line">          min = Math.min(min, root.val - pre.val);</span><br><span class="line">      pre = root;<span class="comment">//更新pre到下个节点</span></span><br><span class="line">      inorder(root.right);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>迭代 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">      Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">      TreeNode cur = root, prev = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">              stack.push(cur);</span><br><span class="line">              cur = cur.left;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cur = stack.pop();</span><br><span class="line">              <span class="comment">//在这里进行改造</span></span><br><span class="line">              <span class="keyword">if</span> (prev != <span class="keyword">null</span>)</span><br><span class="line">                  min = Math.min(min, cur.val - prev.val);</span><br><span class="line">              prev = cur;</span><br><span class="line">              </span><br><span class="line">              cur = cur.right;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—树的最近公共祖先</title>
      <link>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <guid>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <pubDate>Thu, 17 Dec 2020 08:40:48 GMT</pubDate>
      
      <description>&lt;p&gt;针对下面两题作出解答与总结： &lt;a href=&quot;#235，二叉搜索树的最近公共祖先，easy&quot;&gt;235，二叉搜索树的最近公共祖先，easy&lt;/a&gt; &lt;a href=&quot;#236，二叉树的最近公共祖先，medium&quot;&gt;236，二叉树的最近公共祖先，medium&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>针对下面两题作出解答与总结： <a href="#235，二叉搜索树的最近公共祖先，easy">235，二叉搜索树的最近公共祖先，easy</a> <a href="#236，二叉树的最近公共祖先，medium">236，二叉树的最近公共祖先，medium</a></p><a id="more"></a><h3 id="前序">前序</h3><p>最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>p、q两节点一定在此树上，有两种情况： 1. p、q 在一个节点两侧，此节点即为p、q的公共祖先，如下图中 2 为p = 7、q = 4 的最近公共祖先 <img src="https://img-blog.csdnimg.cn/20201217161655456.png" alt="在这里插入图片描述" /> 2. p 或 q为最近公共祖先，如下图中 p 即为最近公共祖先 <img src="https://img-blog.csdnimg.cn/20201217161909824.png" alt="在这里插入图片描述" /> ### 235，二叉搜索树的最近公共祖先，easy 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/f6e46ace5976ecb7788e718bdedf3e62.png" alt="img" /><figcaption>img</figcaption></figure><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p>说明:</p><p>所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉搜索树中。</p><ul><li><p>方法一：递归。</p><ul><li><p>思路：利用BST树左大右小的规律，p、q的位置有如下三种情况：</p><ul><li>在root的一左一右：返回root</li><li>都在root左子树：递归root.left</li><li>都在root右子树：递归root.right</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(p.val == root.val || q.val == root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &gt; root.val || p.val &gt; root.val &amp;&amp; q.val &lt; root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &lt; root.val) <span class="keyword">return</span> lowestCommonAncestor(root.left, p , q);</span><br><span class="line">        <span class="keyword">if</span>(p.val &gt; root.val &amp;&amp; q.val &gt; root.val) <span class="keyword">return</span> lowestCommonAncestor(root.right, p , q);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁版：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个差的乘积&lt;=0，p、q分布在root两侧,返回root</span></span><br><span class="line">        <span class="keyword">if</span>(p.val - root.val)*(q.val - root.val) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.val &lt; root.val ?lowestCommonAncestor(root.left,p,q) : lowestCommonAncestor(root.right,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二：迭代。</p><ul><li>思路：p，q与root可能有三种关系。①p，q都在root的左子树 ②.p，q都在root的右子树 ③.p，q在root的一左一右。</li><li>通过p.val，q.val与root.val的差的乘积来判断。<ul><li>如果大于0，说明①或②，则在root的左或右不断向下找，直到乘积为负返回此时根节点。</li><li>如果小于0，说明③，返回root。</li></ul></li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p.val == root.val || q.val == root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//更新root直到找到p、q为两侧时的root</span></span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &lt; root.val)</span><br><span class="line">                root = root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p.val &gt; root.val &amp;&amp; q.val &gt; root.val)</span><br><span class="line">                root = root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="二叉树的最近公共祖先medium">236，二叉树的最近公共祖先，medium</h5><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/194dc616212512f5efd6c8e72895ea22.png" alt="img" /><figcaption>img</figcaption></figure><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p>说明:</p><p>所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉树中。</p><ul><li><p>方法：递归回溯。</p><ul><li><p>思路：二叉树没有什么特点 ，只能考虑先知道左右子树的情况，然后决定向上返回什么。因此采用「后序遍历」的思想。通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。<strong>从底至顶回溯</strong>，当节点 p,q 在节点 root 的异侧时，节点 root 即为最近公共祖先，则向上返回 root 。</p><ul><li><p>递归出口：</p><ol type="1"><li>root递归到叶子节点，返回 null</li><li>当 root 等于 p 或 q，返回 root</li></ol></li><li><p>递归体：</p><p>递归左子节点和右子节点</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 两种情况的 base case</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">  TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">  TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>回溯的结果有三种情况：</p><p>以下面为例，</p></li></ul></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201217162249379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> （1）. 当 left和 right 同时不为空 ：说明 p,q 分列在 root 的 异侧 （分别在 左 / 右子树），因此 root为最近公共祖先，返回 root ；</p><p><img src="https://img-blog.csdnimg.cn/20201217162346233.png#pic_center" alt="在这里插入图片描述" /> （2）.当 left 和 right 有一为空，返回另一个值</p><p>left 为空，right 不为空，具体可分为两种情况：</p><ol type="1"><li>p,q 其中一个在 root 的 右子树 中，此时 right 指向 p（假设为 p ，图中 p = 2， q 在 3 的右子树中）；</li><li>p,q 两节点都在 root 的 右子树 中，此时的 right 指向 最近公共祖先节点 （图中 p = 7， q = 4，返回公共节点 right = 2）； <img src="https://img-blog.csdnimg.cn/20201217162608560.png#pic_center" alt="在这里插入图片描述" /> 或 <img src="https://img-blog.csdnimg.cn/20201217162636205.png#pic_center" alt="在这里插入图片描述" /></li></ol><p>（3）left ，right 都为空，返回null <img src="https://img-blog.csdnimg.cn/20201217162704543.png#pic_center" alt="在这里插入图片描述" /></p><p>​</p><ul><li>代码：</li></ul><p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val == p.val || root.val == q.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//分别递归左右子树</span></span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="comment">//回溯结果</span></span><br><span class="line">        <span class="comment">// if(left == null &amp;&amp; right == null) return null;</span></span><br><span class="line">        <span class="keyword">if</span>(left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span> ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/">二叉搜索树</category>
      
      
      <comments>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—BST树的基础操作及套路模板</title>
      <link>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Wed, 16 Dec 2020 11:42:21 GMT</pubDate>
      
      <description>&lt;p&gt;本文针对BST 的基础操作：判断 BST 的合法性（&lt;em&gt;98&lt;/em&gt;）、增（&lt;em&gt;701&lt;/em&gt;）、删（&lt;em&gt;450&lt;/em&gt;）、查（&lt;em&gt;700&lt;/em&gt;）。以几道题来总结出套路模板，以一敌十！ &lt;a href=&quot;#98，验证二叉搜索树，medium&quot;&gt;98，验证二叉搜索树，medium&lt;/a&gt; &lt;a href=&quot;#700，二叉搜索树中的搜索，easy&quot;&gt;700，二叉搜索树中的搜索，easy&lt;/a&gt; &lt;a href=&quot;#701，二叉搜索树中的插入操作，medium&quot;&gt;701，二叉搜索树中的插入操作，medium&lt;/a&gt; &lt;a href=&quot;#450，删除二叉搜索树中的节点，medium&quot;&gt;450，删除二叉搜索树中的节点，medium&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文针对BST 的基础操作：判断 BST 的合法性（<em>98</em>）、增（<em>701</em>）、删（<em>450</em>）、查（<em>700</em>）。以几道题来总结出套路模板，以一敌十！ <a href="#98，验证二叉搜索树，medium">98，验证二叉搜索树，medium</a> <a href="#700，二叉搜索树中的搜索，easy">700，二叉搜索树中的搜索，easy</a> <a href="#701，二叉搜索树中的插入操作，medium">701，二叉搜索树中的插入操作，medium</a> <a href="#450，删除二叉搜索树中的节点，medium">450，删除二叉搜索树中的节点，medium</a></p><a id="more"></a><h5 id="验证二叉搜索树medium">98，验证二叉搜索树，medium</h5><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。</p><ul><li><p>思路：很容易想到对于节点root，采用递归判断左子节点的值比它小，右子节点的值比它大，但注意：对每个节点都满足也不一定是BST树，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  5</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   6</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   7</span><br></pre></td></tr></table></figure><p>没有满足右子树的节点都比root值大。</p><p>建立辅助函数，增加最小节点min和最大节点max 作为辅助函数的参量。对于root，比较<code>root.val</code>与当前的<code>min.val</code> 和 <code>max.val</code>，再对<code>root.left</code> 和<code>root.right</code> 进行递归操作。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> healper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是BST树必须满足 min.val &lt; root.val &lt; max.val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">healper</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min != <span class="keyword">null</span> &amp;&amp; min.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max != <span class="keyword">null</span> &amp;&amp; max.val &lt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//左子树范围的最小值是min.val，最大值是当前节点的值，也就是root的值，因为左子树的值要比当前节点小</span></span><br><span class="line">    <span class="comment">//右子数范围的最大值是max.val，最小值是当前节点的值，也就是root的值，因为右子树的值要比当前节点大</span></span><br><span class="line">        <span class="keyword">return</span> healper(root.left, min, root) &amp;&amp; healper(root.right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二：中序遍历。</p><ul><li><p>思路：中序遍历的结果是从小到大排序的，建立一个全局遍历<code>pre</code>代表前一个节点，当前节点与前一个节点进行比较。</p><ul><li><p>递归：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line"><span class="comment">//中序遍历，递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 访问左子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 访问当前节点，如果不是按照从小到大的顺序，则返回false；否则pre右移，继续比较</span></span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="comment">// 访问右子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>易错点：采用递归方法只与左右子节点比较，但没有保证整棵树是BST树。</p></li></ul><h5 id="二叉搜索树中的搜索easy">700，二叉搜索树中的搜索，easy</h5><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p><p>例如，</p><p>给定二叉搜索树:</p><pre><code>    4   / \  2   7 / \1   3</code></pre><p>和值: 2 你应该返回如下子树:</p><pre><code>  2      / \   1   3</code></pre><p>在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</p><ul><li><p>思路：对于普通二叉树，判断是否存在值为 <code>val</code> 的节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> search(root.left, val) || search(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于BST树，利用其左小右大的规律，不需要递归地搜索两边，类似二分查找思想，根据<code>val</code>和<code>root.val</code>的大小比较，就能排除一边。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val) <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span> || root.val == val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">return</span> val &lt; root.val ? searchBST(root.left, val) : searchBST(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结</strong>：BST树遍历搜索的框架为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="二叉搜索树中的插入操作medium">701，二叉搜索树中的插入操作，medium</h5><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p>示例 1：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/be940ab2e07119dcd45e5d58370fc5de.png" alt="img" /><figcaption>img</figcaption></figure><p>输入：root = [4,2,7,1,3], val = 5 输出：[4,2,7,1,3,5] 解释：另一个满足题目要求可以通过的树是：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg" alt="img" style="zoom:80%;" /></p><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [40,20,60,10,30,50,70], val &#x3D; 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,null,null,null,null,null,null], val &#x3D; 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>对于函数<code>TreeNode insertIntoBST(TreeNode root, int val)</code>，表示插入值为 <code>val</code> 的节点后的BST树。由上面总结的查找的模板，再加入修改的操作即可。<strong>一旦涉及「改」，函数就要返回<code>TreeNode</code>类型，并且对递归调用的返回值进行接收。</strong></p><ul><li>方法：递归</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找 + 修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        <span class="comment">//val值比当前节点值大，将找个值插入右子树，且赋给root.right</span></span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) root.right = insertIntoBST(root.right, val);</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt; val) root.left = insertIntoBST(root.left, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除二叉搜索树中的节点medium">450，删除二叉搜索树中的节点，medium</h5><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p><p>示例:</p><p>root = [5,3,6,2,4,null,7] key = 3</p><pre><code>    5   / \  3   6 / \   \2   4   7</code></pre><p>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。</p><p>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。</p><pre><code>    5   / \  4   6 /     \2       7</code></pre><p>另一个正确答案是 [5,2,6,null,4,null,7]。</p><pre><code>    5   / \  2   6   \   \    4   7</code></pre><ul><li><p>思路：还是<strong>查找 + 修改</strong> 类型，按照上面的遍历框架，写出初步解答：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 找到啦，进行删除</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">       <span class="comment">//一些删除操作</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在左子树，对左子树进行删除操作并重新赋给root.left</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        root.left = deleteNode(root.left, key);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在右子树，对右子树进行删除操作并重新赋给root.right</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        root.right = deleteNode(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到要删除的节点后，删除操作有下面情况：</p></li></ul><figure><img src="https://img-blog.csdnimg.cn/20201216192138470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><ol type="1"><li><p>左右子节点有为空的（如12），返回非空的子节点</p><p><em>（<code>deleteNode</code> 函数即返回删除值为key的节点后的树）</em></p><p>如果左右子节点都为空，则返回null</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line"><span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br></pre></td></tr></table></figure></li><li><p>左右子节点都不为空，就要找到<strong>左子树的最大值或者右子树的最小值</strong>替换此root，并在左子树（或右子树）删除此节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root.val = getMaxLeft(root.left).val;</span><br><span class="line">root.left = deleteNode(root.left, root.val);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.val == key)&#123;</span><br><span class="line">            <span class="comment">//1.有子节点为空</span></span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="comment">//2.子节点非空，则由左子树的最大值或者右子树的最小值替换此root，并在左子树（或右子树）删除此节点</span></span><br><span class="line">            root.val = getMaxLeft(root.left).val;</span><br><span class="line">            root.left = deleteNode(root.left, root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//key在右子树，对右子树进行删除操作，并把新的子树重新赋给root.right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; key)&#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从root.left出发,找到root的左子树的最大值（向右找）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMaxLeft</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="总结">总结：</h5><ul><li><p>由BST树的搜索框架，可以实现增（插）删改查，这几项的操作都是<strong>搜+改</strong>，做题可以先把框架写出来，再分析每步干什么。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于BST树最大的特点就是左小右大，中序遍历的结果由小到大。</p></li><li><p>递归最重要的就是弄清函数的含义，如果有返回值代表什么。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/">二叉搜索树</category>
      
      
      <comments>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—递归解决树</title>
      <link>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/</link>
      <guid>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/</guid>
      <pubDate>Wed, 16 Dec 2020 11:34:12 GMT</pubDate>
      
      <description>&lt;p&gt;对于树，经常用的算法有递归，回溯，BFS，DFS等。下面是一些用递归算法来解的题： &lt;a href=&quot;#104，二叉树的最大深度，easy&quot;&gt;104，二叉树的最大深度，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#110，平衡二叉树，easy&quot;&gt;110，平衡二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#543，二叉树的直径，easy&quot;&gt;543，二叉树的直径，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#226，翻转二叉树，easy&quot;&gt;226，翻转二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#617，合并二叉树，easy&quot;&gt;617，合并二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#112，路径总和，easy&quot;&gt;112，路径总和，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#113，路径总和Ⅱ，midium&quot;&gt;113，路径总和Ⅱ，midium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#572，另一个树的子树，easy&quot;&gt;572，另一个树的子树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#101，对称二叉树，easy&quot;&gt;101，对称二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#111，二叉树的最小深度，easy&quot;&gt;111，二叉树的最小深度，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#404，左叶子之和，easy&quot;&gt;404，左叶子之和，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#687，最长同值路径，medium&quot;&gt;687，最长同值路径，medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#671，二叉树中第二小的节点，easy&quot;&gt;671，二叉树中第二小的节点，easy&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>对于树，经常用的算法有递归，回溯，BFS，DFS等。下面是一些用递归算法来解的题： <a href="#104，二叉树的最大深度，easy">104，二叉树的最大深度，easy</a></p><p><a href="#110，平衡二叉树，easy">110，平衡二叉树，easy</a></p><p><a href="#543，二叉树的直径，easy">543，二叉树的直径，easy</a></p><p><a href="#226，翻转二叉树，easy">226，翻转二叉树，easy</a></p><p><a href="#617，合并二叉树，easy">617，合并二叉树，easy</a></p><p><a href="#112，路径总和，easy">112，路径总和，easy</a></p><p><a href="#113，路径总和Ⅱ，midium">113，路径总和Ⅱ，midium</a></p><p><a href="#572，另一个树的子树，easy">572，另一个树的子树，easy</a></p><p><a href="#101，对称二叉树，easy">101，对称二叉树，easy</a></p><p><a href="#111，二叉树的最小深度，easy">111，二叉树的最小深度，easy</a></p><p><a href="#404，左叶子之和，easy">404，左叶子之和，easy</a></p><p><a href="#687，最长同值路径，medium">687，最长同值路径，medium</a></p><p><a href="#671，二叉树中第二小的节点，easy">671，二叉树中第二小的节点，easy</a></p><a id="more"></a><h5 id="二叉树的最大深度easy">104，二叉树的最大深度，easy</h5><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回它的最大深度 3 。</p><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftDepth = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftDepth &gt;= rightDepth ? leftDepth + <span class="number">1</span> : rightDepth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="平衡二叉树easy">110，平衡二叉树，easy</h5><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><p>示例 1：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/341009251c7788edc838975732064bf1.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/bce64ca4c0e80b345a5a286122112851.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; []</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><ul><li><p>思想：先判断root 为根节点的树是不是平衡二叉树，（即比较左右子树的高度差是否不超过1），再判断以root.left 和 root.right 为根节点的树是不是平衡二叉树。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">         <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">     <span class="comment">//判断当前根节点的树是否为平衡二叉树</span></span><br><span class="line">     <span class="keyword">if</span>(Math.abs(l - r) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> (isBalanced(root.left) &amp;&amp; isBalanced(root.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取整棵树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        <span class="keyword">return</span> Math.max(depth(root.left),depth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="二叉树的直径easy">543，二叉树的直径，easy</h5><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><p>示例 : 给定二叉树</p><pre><code>      1     / \    2   3   / \       4   5    </code></pre><p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><p>注意：两结点之间的路径长度是以它们之间边的数目表示。</p><ul><li><p>方法：DFS递归。</p></li><li><p>思路：直径 = 任意两个结点路径长度中的最大值，可以看做树内的某一节点的左子树节点数l + 右子树节点数r - 1，所有节点的l + r - 1中的最大值即为直径。定义一个递归函数计算经过的左右子树的节点数l + r，函数返回给定节点为根的子树的深度。递归搜索每个节点并设一个全局变量 ans 记录 l + r 的最大值，最后返回 ans 即为树的直径。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        depth(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最大的 L+R</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">        <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">        ans = Math.max(ans, l + r);<span class="comment">//找到最大直径</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(l, r) + <span class="number">1</span>;<span class="comment">//树的深度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="翻转二叉树easy">226，翻转二叉树，easy</h5><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>输出：</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><ul><li><p>方法一：递归。</p></li><li><p>思路：分别对左右子树都进行翻转，再交换。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode leftTree = root.left;<span class="comment">//保存原来的左子树</span></span><br><span class="line">        root.left = invertTree(root.right);</span><br><span class="line">        root.right = invertTree(leftTree);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：借助栈（DFS）。</p></li><li><p>思路：先将根节点压入栈。栈非空时，弹出栈顶节点，如果弹出节点的左右子节点有非空，将其压入栈，并进行交换，重复此过程直到栈空。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode temp = node.right;</span><br><span class="line">            node.right = node.left;</span><br><span class="line">            node.left = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="合并二叉树easy">617，合并二叉树，easy</h5><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">     1                           2 </span><br><span class="line">   &#x2F;   \                       &#x2F;   \</span><br><span class="line">  3     2                     1     3</span><br><span class="line"> &#x2F;                             \     \</span><br><span class="line">5                               4     7                               </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \   \ </span><br><span class="line"> 5   4   7</span><br></pre></td></tr></table></figure><p>注意: 合并必须从两个树的根节点开始。</p><ul><li><p>方法一：递归。(dfs)</p></li><li><p>思路：新建一棵树，如果原来两棵树的节点都存在，直接相加；如果有一个不存在，返回另一个节点。递归节点的左右子节点，作为新树的左右子树。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t1 == <span class="keyword">null</span> ? t2 : t1;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode newTree = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">        newTree.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">        newTree.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        <span class="keyword">return</span> newTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="路径总和easy">112，路径总和，easy</h5><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例: 给定如下二叉树，以及目标和 sum = 22，</p><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \      \    7    2      1</code></pre><p>返回 true, 因为存在目标和为 22 的根节点到叶子- 方法一：递归（dfs）</p><ul><li><p>思路：以当前根节点为例，如果为null，返回false；如果为叶子节点，判断当前节点值是否与sum相等并返回；如果不是叶子节点，递归搜索左右子节点。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.val == sum;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left,sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="路径总和midium">113，路径总和Ⅱ，midium</h5><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例: 给定如下二叉树，以及目标和 sum = 22，</p><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \    / \    7    2  5   1</code></pre><p>返回:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>方法：递归回溯（dfs）。</p></li><li><p>思路：</p><ul><li>回溯条件：<ol type="1"><li>节点为空— 如果当前节点为空，说明节点没有孩子，循着这条路径，已经找不到符合条件的路径。</li><li>节点为叶子节点— 如果当前节点是叶子节点并且它的值满足题目要求，则它所在的路径就是满足要求的。</li></ol></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        dfs(root, sum, res, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//把当前节点值加入到list中</span></span><br><span class="line">         list.add(root.val);</span><br><span class="line">        <span class="comment">//叶子节点且此节点值=sum</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; root.val == sum) res.add(<span class="keyword">new</span> ArrayList(list));</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//还没到叶子节点，继续从左右节点向下找</span></span><br><span class="line">        dfs(root.left, sum - root.val, res, list);</span><br><span class="line">        dfs(root.right, sum - root.val, res, list);</span><br><span class="line">        <span class="comment">//防止分支污染，遍历完当前节点的左子树、右子树，说明经过这个节点的路径已经被遍历完，因此要回溯到当前节点的父节点</span></span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&amp;mid=2247487910&amp;idx=1&amp;sn=2670aec7139c6b98e83ff66114ac1cf7&amp;chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&amp;scene=21#wechat_redirect">关于递归与回溯的详解</a></p></li></ul><h5 id="另一个树的子树easy">572，另一个树的子树，easy</h5><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p><p>示例 1: 给定的树 s:</p><pre><code>         3        / \       4   5      / \         1   2   </code></pre><p>给定的树 t：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4 </span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure><p>返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p><p>示例 2: 给定的树 s：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   5</span><br><span class="line"> &#x2F; \    </span><br><span class="line">1   2 </span><br></pre></td></tr></table></figure><p>给定的树 t：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure><p>返回 false。</p><ul><li><p>方法：建立一个递归函数，判断两棵树是否相等。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第二棵树为空，一定是子树</span></span><br><span class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//第一棵树为空，没有子树</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较t是否是s的左子树和右子树的一部分，或s与t是两棵相同的树</span></span><br><span class="line">        <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t) || isSameTree(s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断两棵树是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//如果其中有一个节点为空或两节点值不相等时，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较左子树和右子树是否相同</span></span><br><span class="line">        <span class="keyword">return</span> isSameTree(s.left, t.left) &amp;&amp; isSameTree(s.right, t.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="对称二叉树easy">101，对称二叉树，easy</h5><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><pre><code>    1   / \  2   2 / \ / \3  4 4  3</code></pre><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><pre><code>    1   / \  2   2   \   \   3    3</code></pre><ul><li><p>方法一：递归。</p></li><li><p>思路：建立一个递归函数，移动两个指针遍历这棵树，判断根节点的左右子树是否对称。在主函数调用此递归函数，参数为根的左子节点和右子节点。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用两个指针检查树是否对称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span> || p.val != q.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="二叉树的最小深度easy">111，二叉树的最小深度，easy</h5><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/6d8500c55fe3ebe98dc781d7b62a3bbf.png" alt="img" /><figcaption>img</figcaption></figure><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,null,3,null,4,null,5,null,6]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。</p><ul><li>结束条件：当root为空，返回0</li><li>递归体：若左右子树皆空，返回1；若左子树和右子树有非空的，记录其最小路径，最后返回结果为最小路径 ➕ 1</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1.当root的左右子树都为空</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mindep = Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//2.root的左子树或右子树有不为空，计算其最小路径</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.left), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.right), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回最小路径+1</span></span><br><span class="line">        <span class="keyword">return</span> mindep + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误原因：想法是dfs 来递归左右子树找它们的最小路径，然后取最小。但这样可能在 [2,null,3,null,4,null,5,null,6] 结构中不成立，因为root的左子树为空，所以要加一个判断。</p></li></ul><h5 id="左叶子之和easy">404，左叶子之和，easy</h5><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p><p>示例：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</p><ul><li><p>方法一：递归dfs</p></li><li><p>思路：所有左叶子节点之和，需要遍历整棵树，采用dfs。</p><ul><li><p>递归出口：节点为空或为叶子节点</p></li><li><p>递归条件：</p><ul><li>如果左子树不为空，判断左子节点是否为叶子节点：若不是，递归调用左子节点<ul><li>如果右子树为空，结果不变；若不为空，上面的结果＋ 递归调用右子节点</li></ul></li><li>否则左子树为空，右子树一定不为空，只需判断右子节点是不是叶子节点，若不是，递归调用右子节点</li><li>最后返回结果</li></ul></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = isLeaf(root.left) ? root.left.val : dfs(root.left);</span><br><span class="line">            <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">            res += isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res = isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简洁的版本：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLeaf(root.left)) <span class="keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另一题：一棵树所有左子节点的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">           res = sumOfLeftLeaves(root.left) + root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.left) + root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="最长同值路径medium">687，最长同值路径，medium</h5><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p><p>注意：两个节点之间的路径长度由它们之间的边数表示。</p><p>示例 1:</p><p>输入:</p><pre><code>          5         / \        4   5       / \   \      1   1   5</code></pre><p>输出:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>示例 2:</p><p>输入:</p><pre><code>          1         / \        4   5       / \   \      4   4   5</code></pre><p>输出:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。（dfs）</p></li><li><p>思路：</p></li></ul><figure><img src="https://img-blog.csdnimg.cn/20201214162048997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><ul><li><p>最长路径分为2种情况：</p><ol type="1"><li>以root为起点，经过左子树或右子树，如(2)</li><li>不以root为起点，root为中间点，如(1)</li></ol></li><li><p>辅助函数helper，计算以每一个节点为起点的最长同值路径maxLength，在过程中可以得到以root为根节点的树的最长同值路径ans。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="comment">//以root为根节点的树的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以root为起点的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以左、右子节点为起点的最长同值路径</span></span><br><span class="line">        <span class="keyword">int</span> leftLength = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightLength = helper(root.right);</span><br><span class="line">        <span class="comment">//如果左、右子树都非空 且 root.val == root.left.val == root.right.val，更新ans</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span> &amp;&amp; root.val == root.left.val  &amp;&amp; root.val == root.right.val)&#123;</span><br><span class="line">            ans = Math.max(ans, leftLength + rightLength + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftPath = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightPath = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果左右子树有非空且子节点的值与root的值相等，以根节点为起点的最长同值路径为leftPath,rightPath中的最大值</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val)&#123;</span><br><span class="line">            leftPath  = leftLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val)&#123;</span><br><span class="line">            rightPath = rightLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取左右子树的最长同值路径的最大值</span></span><br><span class="line">        maxLength = Math.max(leftPath,rightPath);</span><br><span class="line">        <span class="comment">//更新ans</span></span><br><span class="line">        ans = Math.max(ans, maxLength);</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁版：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> path = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = dfs(root.left);</span><br><span class="line">    <span class="keyword">int</span> right = dfs(root.right);</span><br><span class="line">    <span class="keyword">int</span> leftPath = root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val ? left + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightPath = root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val ? right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    path = Math.max(path, leftPath + rightPath);</span><br><span class="line">    <span class="keyword">return</span> Math.max(leftPath, rightPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="二叉树中第二小的节点easy">671，二叉树中第二小的节点，easy</h5><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p><p>更正式地说，<code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p><p>给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p><p>示例 1：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/0bcc8d1bfd49276663468ef8e4c20907.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,5,null,null,5,7]</span><br><span class="line">输出：5</span><br><span class="line">解释：最小的值是 2 ，第二小的值是 5 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ac58c17f14a23e31dd1aa6a7c40abcc6.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,2]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最小的值是 2, 但是不存在第二小的值。</span><br></pre></td></tr></table></figure><ul><li><p>题意解析：每个树的根节点的值都为这棵树所有节点最小的值，所有节点中第二小的值即只比根节点大的值。</p></li><li><p>方法一：递归。</p><ul><li>递归出口：节点为空，返回 -1。</li><li>递归体：<ul><li>左右子节点都为空，返回 -1。</li><li>根节点取的是左子节点的值，递归左子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li><li>根节点取的是右子节点的值，递归右子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li></ul></li><li>结果：<ul><li>left 、right 如果都不为 -1，取最小值并返回</li><li>left 不为 -1(right 为 -1)，返回left</li><li>否则（left为 -1），返回right(-1 或 root.right.val或递归结果)</li></ul></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = root.left.val;</span><br><span class="line">        <span class="comment">//如果左子节点是最小值，递归左子节点，得到以左子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(left == root.val)&#123;</span><br><span class="line">            left = findSecondMinimumValue(root.left);<span class="comment">//-1 或 以root.left为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right = root.right.val;</span><br><span class="line">        <span class="comment">//如果右子节点是最小值，递归右子节点，得到以右子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(right == root.val)&#123;</span><br><span class="line">            right = findSecondMinimumValue(root.right);<span class="comment">//-1 或 以root.right为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果两边的树递归结果都不为-1（都正常），返回它们的最小值，即在root为根的树中只比root.val大</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span> &amp;&amp; right != -<span class="number">1</span>) <span class="keyword">return</span> Math.min(left,right);</span><br><span class="line">        <span class="comment">//如果左子树正常，返回左子树</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span>) <span class="keyword">return</span> left; </span><br><span class="line">        <span class="comment">//否则返回右子树递归值（-1 或 以root.right为根的树的第二小的值）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> right;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      <category domain="http://example.com/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
