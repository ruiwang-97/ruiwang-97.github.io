<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Sun, 27 Dec 2020 01:47:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SpringBoot整合MyBatis-过程及报错解决</title>
      <link>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</link>
      <guid>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</guid>
      <pubDate>Sun, 27 Dec 2020 01:45:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近在学习Spring Boot，在整合MyBatis进行数据访问，报过多次错，踩了很多坑，在此记录一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML或注解来配置和映射原生信息，将接口和 Java 的POJOs(Plain Ordinary Java Object,普通的Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;整合过程&quot;&gt;&lt;a href=&quot;#整合过程&quot; class=&quot;headerlink&quot; title=&quot;整合过程&quot;&gt;&lt;/a&gt;整合过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;导入依赖&lt;br&gt;pom.xml文件如下：&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近在学习Spring Boot，在整合MyBatis进行数据访问，报过多次错，踩了很多坑，在此记录一下。</p><blockquote><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML或注解来配置和映射原生信息，将接口和 Java 的POJOs(Plain Ordinary Java Object,普通的Java对象)映射成数据库中的记录。</p></blockquote><h2 id="整合过程"><a href="#整合过程" class="headerlink" title="整合过程"></a>整合过程</h2><ol><li>导入依赖<br>pom.xml文件如下：</li></ol><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 application.properties 中连接数据库<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li><li>测试数据源<br>在tests类进行测试是否连接了数据库，代码及测试结果如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05MybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020122708531157.png" alt="测试结果"><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2>对数据库 mybatis 中 user 表的查询，user 表内容为：<br><img src="https://img-blog.csdnimg.cn/20201227092203933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ol><li><p>项目结构<br><img src="https://img-blog.csdnimg.cn/20201227090000359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>搭建步骤：<br>1）. 在 application.properties 中整合 MyBatis</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#设置包别名（在Mapper映射文件中直接使用实体类名）</span><br><span class="line">mybatis.type-aliases-package==com.kuang.pojo</span><br><span class="line">#告诉系统在哪里找mapper.xml文件（映射文件）</span><br><span class="line">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure><p> 2).  创建实体类User</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line">   <span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line">   <span class="keyword">import</span> lombok.Data;</span><br><span class="line">   <span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Data</span></span><br><span class="line">   <span class="meta">@NoArgsConstructor</span></span><br><span class="line">   <span class="meta">@AllArgsConstructor</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String uname;</span><br><span class="line">   <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3). 创建数据访问接口</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">* 创建MyBatis的 Mapper 映射接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这个注解表示这是一个mybatis的 mapper 类 ：Dao（数据访问层）</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//    User queryUserById(int id);</span></span><br><span class="line"><span class="comment">//    int addUser(User user);</span></span><br><span class="line"><span class="comment">//    int updateUser(User user);</span></span><br><span class="line"><span class="comment">//    int deleteUser(int id);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 4). 创建 Mapper 映射文件<br> 在 resources 目录下，创建名为 mapper 的包，并在包中创建 SQL 映射文件 Mapper.xml。</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 5). 创建控制器类</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.queryUserList();</span><br><span class="line">       <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> userList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 6). 运行<br> 由于在  Mapper 映射接口中有 @Mapper 注解，Application 主类中不用添加 @MapperScan 注解。直接启动，运行效果为：<br> <img src="https://img-blog.csdnimg.cn/20201227092422842.png" alt="在这里插入图片描述"></p><h2 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h2><h4 id="bean无法注入的问题——Error-creating-bean-with-name-‘userController’"><a href="#bean无法注入的问题——Error-creating-bean-with-name-‘userController’" class="headerlink" title="bean无法注入的问题——Error creating bean with name ‘userController’:"></a>bean无法注入的问题——Error creating bean with name ‘userController’:</h4></li></ol><p>错误原因可能有：</p><ol><li><p>包的位置不对，可以看下上面的项目结构，主类 和 子包都要在com.kuang 包下。</p></li><li><p>注解使用不对，如 Controller接口没有使用@Controller、@RestController注解等。</p></li><li><p>xml 文件格式，去掉空格和中文注解</p><h4 id="Invalid-bound-statement-not-found"><a href="#Invalid-bound-statement-not-found" class="headerlink" title="Invalid bound statement (not found):"></a>Invalid bound statement (not found):</h4><p>这个报错原因一般是xml 映射文件有错误。检查下面几处：</p></li><li><p>xml 文件所在包名 与 接口 所在包名 一致，否则会报500<br> <img src="https://img-blog.csdnimg.cn/20201227093757891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>xml 文件中 namespace 与 映射接口 的位置一致<br><img src="https://img-blog.csdnimg.cn/20201227093409360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol></li><li><p>检察函数名是否一致<br>UserMapper 映射接口中<br><img src="https://img-blog.csdnimg.cn/2020122709391747.png" alt="在这里插入图片描述"><br>Mapper.xml 中<br><img src="https://img-blog.csdnimg.cn/20201227093936837.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然是个很简单的整合，但一直报错，反复检查代码的过程中，也对各个注解的功能，项目的架构理解更深，继续积累，继续加油！</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/">SpringBoot学习</category>
      
      
      <category domain="http://example.com/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="http://example.com/tags/MyBatis/">MyBatis</category>
      
      
      <comments>http://example.com/2020/12/27/SpringBoot%E6%95%B4%E5%90%88MyBatis-%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—重建二叉树</title>
      <link>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <guid>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <pubDate>Mon, 21 Dec 2020 06:39:20 GMT</pubDate>
      
      <description>&lt;p&gt;LeetCode中有三道很类似的题，思路也大同小异，故作一总结。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#105%EF%BC%8C%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium&quot;&gt;105，从前序与中序遍历序列构造二叉树，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#106%EF%BC%8C%E6%A0%B9%E6%8D%AE%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium&quot;&gt;106，根据中序和后序遍历构造二叉树，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#889%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%89%8D%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium&quot;&gt;889，根据前序和后序遍历构造二叉树，medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这三道题都是给出两种遍历方式，由其遍历顺序可发现规律来重建此二叉树。下面详解105题，后两题思路稍作改变，比较好懂了。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>LeetCode中有三道很类似的题，思路也大同小异，故作一总结。</p><p><a href="#105%EF%BC%8C%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium">105，从前序与中序遍历序列构造二叉树，medium</a><br><a href="#106%EF%BC%8C%E6%A0%B9%E6%8D%AE%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium">106，根据中序和后序遍历构造二叉树，medium</a><br><a href="#889%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%89%8D%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Cmedium">889，根据前序和后序遍历构造二叉树，medium</a></p><p>这三道题都是给出两种遍历方式，由其遍历顺序可发现规律来重建此二叉树。下面详解105题，后两题思路稍作改变，比较好懂了。</p><a id="more"></a><h4 id="105，从前序与中序遍历序列构造二叉树，medium"><a href="#105，从前序与中序遍历序列构造二叉树，medium" class="headerlink" title="105，从前序与中序遍历序列构造二叉树，medium"></a>105，从前序与中序遍历序列构造二叉树，medium</h4><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><p>注意:<br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><h5 id="方法一：分治思想-HashMap"><a href="#方法一：分治思想-HashMap" class="headerlink" title="方法一：分治思想 + HashMap"></a>方法一：分治思想 + HashMap</h5><ul><li><p>前序遍历：根-左-右。</p><p>中序遍历：左-根-右。</p><p>以题目示例为例：</p><img src="https://pic.leetcode-cn.com/1603644245-oFksKK-Picture1.png" alt="Picture1.png" style="zoom:80%;" /><ul><li>前序遍历划分 <code>[ 3 | 9 | 20 15 7 ]</code></li><li>中序遍历划分 <code>[ 9 | 3 | 15 20 7 ]</code></li></ul><p>则前序遍历的首个元素 为 <strong>根节点的值</strong>，在中序遍历数组中找到 <strong>根节点所在索引</strong>，其<strong>左边的元素</strong>为 根节点的<strong>左子树</strong>，<strong>右边的元素</strong>为 根节点的<strong>右子树</strong>。</p></li></ul><ul><li><p>以上子树的递推性质是 <strong>分治算法</strong> 的体现，考虑通过递归对所有子树进行划分。</p><p>辅助函数 build，参数为：前序遍历的起点索引 preL，结束索引 preR，中序遍历的起点索引 inL，结束索引 inR。</p><p>通过上面所述找到 root 在中序遍历的索引，递归其左边元素和 右边元素，分别赋给 root 的左子树 和 右子树。递归出口为 <code>preL &gt; preR || inL &gt; inR</code>，表示越过叶子节点，此时返回null。</p><ul><li><p>其中 找到 root 在中序遍历的索引 一种简单的方法是直接扫描整个中序遍历的结果并找出根节点，但这样做的时间复杂度较高。我们可以考虑使用 <strong>HashMap</strong> 快速地<strong>定位根节点</strong>。对于哈希映射中的每个键值对，键表示一个元素（节点的值），值表示其在中序遍历中的索引。</p></li><li><p>确定 preL、preR、inL、inR 需要解方程<br><img src="https://img-blog.csdnimg.cn/20201221142412691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul></li></ul><pre><code>   左子树 在 前序遍历中的起点索引：preL + 1   左子树 在 前序遍历中的结束索引：x        x 满足 x - (preL + 1) = rootIndex - 1 - intL=&gt;  x = rootIndex - intL + preL    左子树 在 中序遍历中的起点索引：intL   左子树 在 中序遍历中的结束索引：rootIndex - 1   右子树 在前序遍历中的起点索引：x + 1   右子树 在 前序遍历中的结束索引：preR   右子树 在 中序遍历中的起点索引：rootIndex + 1   右子树 在 中序遍历中的结束索引：inR</code></pre><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] preorder;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.preorder = preorder;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="comment">//将中序遍历数组的元素和其索引存入map键值对</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class="line">          map.put(inorder[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//前序遍历:preL起始索引，preR结束索引；中序遍历：inL起始索引，inR结束索引</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(preL &gt; preR || inL &gt; inR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//将前序遍历首个元素设为根节点</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = preorder[preL];</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//找到中序遍历中root的索引</span></span><br><span class="line">      <span class="keyword">int</span> rootIndex = map.get(rootVal);</span><br><span class="line">      <span class="comment">//递归调用中序遍历root左右部分形成root的左右子树</span></span><br><span class="line">      root.left = build(preL + <span class="number">1</span>, rootIndex - inL + preL, inL, rootIndex - <span class="number">1</span>);</span><br><span class="line">      root.right = build(rootIndex - inL + preL + <span class="number">1</span>, preR, rootIndex + <span class="number">1</span>, inR);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5></li><li><p>和上面总体思想一样，但不借助 HashMap 来定位 root 在中序遍历数组的索引，而是用 List 的 indexOf 来定位，用 subList 确定左右子树的范围。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">      List&lt;Integer&gt; prelist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      List&lt;Integer&gt; inlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//将int数组转为List</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preorder.length; i++)&#123;</span><br><span class="line">          prelist.add(preorder[i]);</span><br><span class="line">          inlist.add(inorder[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(prelist, inlist);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(List&lt;Integer&gt; prelist, List&lt;Integer&gt; inlist)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(inlist.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//前序集合的首个元素为根节点</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = prelist.remove(<span class="number">0</span>);</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//找到根节点在中序的索引</span></span><br><span class="line">      <span class="keyword">int</span> index = inlist.indexOf(rootVal);</span><br><span class="line">      <span class="comment">//新的左右两边</span></span><br><span class="line">      root.left = build(prelist, inlist.subList(<span class="number">0</span>, index));</span><br><span class="line">      root.right = build(prelist, inlist.subList(index + <span class="number">1</span>, inlist.size()));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把数组转化为list集合，然后在list集合中进行截取，这样效率明显不是很高。</p><h4 id="106，根据中序和后序遍历构造二叉树，medium"><a href="#106，根据中序和后序遍历构造二叉树，medium" class="headerlink" title="106，根据中序和后序遍历构造二叉树，medium"></a>106，根据中序和后序遍历构造二叉树，medium</h4><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p></li></ul><p>注意:<br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>中序遍历 inorder = [9,3,15,20,7]<br>后序遍历 postorder = [9,15,7,20,3]<br>返回如下的二叉树：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><ul><li><p>思路：和上一题的思路基本一致，由中序遍历的规律（root 左部分为左子树，右部分为右子树），后序遍历的根节点为最后的节点。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] postorder;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.postorder = postorder;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class="line">          map.put(inorder[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, inorder.length - <span class="number">1</span>, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> inL, <span class="keyword">int</span> inR, <span class="keyword">int</span> postL, <span class="keyword">int</span> postR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(inL &gt; inR || postL &gt; postR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//在后序数组中找到根节点root</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = postorder[postR];</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">      <span class="comment">//中序中root的索引</span></span><br><span class="line">      <span class="keyword">int</span> rootIndex = map.get(rootVal);</span><br><span class="line">      root.left = build(inL, rootIndex - <span class="number">1</span>, postL, postL + rootIndex - <span class="number">1</span> - inL);</span><br><span class="line">      root.right = build(rootIndex + <span class="number">1</span>, inR, postL + rootIndex - inL, postR - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="889，根据前序和后序遍历构造二叉树，medium"><a href="#889，根据前序和后序遍历构造二叉树，medium" class="headerlink" title="889，根据前序和后序遍历构造二叉树，medium"></a>889，根据前序和后序遍历构造二叉树，medium</h4><p>返回与给定的前序和后序遍历匹配的任何二叉树。</p><p>pre 和 post 遍历中的值是不同的正整数。</p></li></ul><p>示例：</p><p>输入：pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]<br>输出：[1,2,3,4,5,6,7]</p><ul><li><p>思路：还是按照之前的思路，找到根节点（即前序遍历的第一个元素或后序遍历的最后一个元素），但前序和后序 不像 中序的根作为分隔点，所以需要再找左子树的根 在 后序遍历数组 的 索引，依次来确定左右子树的长度。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  Map&lt;Integer,Integer&gt; map;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] post;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] pre;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.post = post;</span><br><span class="line">      <span class="keyword">this</span>.pre = pre;</span><br><span class="line">      map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; post.length; i++)&#123;</span><br><span class="line">          map.put(post[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> build(<span class="number">0</span>, pre.length - <span class="number">1</span>, <span class="number">0</span>,  post.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> postL, <span class="keyword">int</span> postR)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(preL &gt; preR || postL &gt; postR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//不加这步，下面int leftRoot = pre[preL + 1];会出现角标越界</span></span><br><span class="line">      <span class="keyword">if</span>(preL == preR) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(pre[preL]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//根的索引即前序第一个元素和后序最后一个元素</span></span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(post[postR]);</span><br><span class="line">      <span class="comment">//下面是为了确定左子树在数组中的长度</span></span><br><span class="line">      <span class="comment">//左子树根节点</span></span><br><span class="line">      <span class="keyword">int</span> leftRoot = pre[preL + <span class="number">1</span>];</span><br><span class="line">      <span class="comment">//左子树根节点在后序的索引</span></span><br><span class="line">      <span class="keyword">int</span> leftRootIndex = map.get(leftRoot);</span><br><span class="line"></span><br><span class="line">      root.left = build(preL + <span class="number">1</span>, leftRootIndex - postL + preL + <span class="number">1</span>, postL, leftRootIndex);</span><br><span class="line">      root.right = build(leftRootIndex - postL + preL + <span class="number">2</span>, preR, leftRootIndex + <span class="number">1</span>, postR - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4></li><li><p>三个题中 前序 + 中序 和 后序 + 中序，都利用中序的根左边部分是左子树，右边部分是右子树。所以先建立根节点，并找出根节点在中序遍历数组的索引，就可以利用此规律重建二叉树。</p></li><li><p>只有 前序 + 后序时，无法利用中序遍历的规律，则需要再找出左子树的根节点，来确定左、右子树的长度。</p></li><li><p>用 HashMap 来以空间换时间，快速定位。</p></li><li><p>注意三题都不能有重复数字，才能用上面方法。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      
      <comments>http://example.com/2020/12/21/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—二叉树的遍历</title>
      <link>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <guid>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <pubDate>Sun, 20 Dec 2020 14:38:17 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：&quot;&gt;&lt;a href=&quot;#此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：&quot; class=&quot;headerlink&quot; title=&quot;此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：&quot;&gt;&lt;/a&gt;此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;#LeetCode%E7%9A%8494%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86&quot;&gt;94，二叉树的中序遍历，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#LeetCode%E7%9A%84102%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86&quot;&gt;102，二叉树的层序遍历，easy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#LeetCode%E7%9A%84230%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0&quot;&gt;230，二叉搜索树中第k小的元素，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#LeetCode%E7%9A%84501%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0&quot;&gt;501，二叉搜索树中的众数，easy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#LeetCode%E7%9A%84530%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE&quot;&gt;530，二叉树搜索树的最小绝对差，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#LeetCode%E7%9A%84530%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE&quot;&gt;530，二叉树搜索树的最小绝对差，easy&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题："><a href="#此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：" class="headerlink" title="此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题："></a>此篇用于梳理二叉树的遍历方式：深度优先遍历（前、中、后序遍历）和广度优先遍历，不仅能快速领会思想和总结规律，还可以顺便刷下这些题：</h4><p><a href="#LeetCode%E7%9A%8494%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86">94，二叉树的中序遍历，medium</a><br><a href="#LeetCode%E7%9A%84102%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86">102，二叉树的层序遍历，easy</a><br><a href="#LeetCode%E7%9A%84230%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0">230，二叉搜索树中第k小的元素，medium</a><br><a href="#LeetCode%E7%9A%84501%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0">501，二叉搜索树中的众数，easy</a><br><a href="#LeetCode%E7%9A%84530%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE">530，二叉树搜索树的最小绝对差，easy</a></p><p><a href="#LeetCode%E7%9A%84530%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE">530，二叉树搜索树的最小绝对差，easy</a></p><a id="more"></a><h2 id="一、二叉树的遍历有四种方式："><a href="#一、二叉树的遍历有四种方式：" class="headerlink" title="一、二叉树的遍历有四种方式："></a>一、二叉树的遍历有四种方式：</h2><h5 id="1-前序遍历：根-左-右"><a href="#1-前序遍历：根-左-右" class="headerlink" title="1. 前序遍历：根-左-右"></a>1. 前序遍历：根-左-右</h5><h5 id="2-中序遍历：左-根-右"><a href="#2-中序遍历：左-根-右" class="headerlink" title="2. 中序遍历：左-根-右"></a>2. 中序遍历：左-根-右</h5><h5 id="3-后序遍历：左-右-根"><a href="#3-后序遍历：左-右-根" class="headerlink" title="3. 后序遍历：左-右-根"></a>3. 后序遍历：左-右-根</h5><h5 id="4-层次遍历：BFS-分层存储"><a href="#4-层次遍历：BFS-分层存储" class="headerlink" title="4. 层次遍历：BFS + 分层存储"></a>4. 层次遍历：BFS + 分层存储</h5><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">4   5   6</span><br></pre></td></tr></table></figure><ul><li>前序遍历顺序：[1 2 4 5 3 6]   （中-左-右）</li><li>中序遍历顺序：[4 2 5 1 3 6]   （左-中-右）</li><li>后序遍历顺序：[4 5 2 6 3 1]   （右-左-中）<ul><li>层次遍历顺序：[1 2 3 4 5 6]</li></ul></li></ul><p>层次遍历使用 BFS 实现，利用的就是 BFS 一层一层遍历的特性；而前序、中序、后序遍历利用了 DFS 实现。</p><p>前序、中序、后序遍只是在对节点访问的顺序有一点不同，其它都相同。</p><p>注意：对于<strong>二叉搜索树，常进行中序遍历，其结果由小到大的顺序</strong>有时对解题很有帮助。</p><h2 id="二、二叉树遍历的模板"><a href="#二、二叉树遍历的模板" class="headerlink" title="二、二叉树遍历的模板"></a>二、二叉树遍历的模板</h2><h5 id="1-前序遍历：根-左-右-1"><a href="#1-前序遍历：根-左-右-1" class="headerlink" title="1. 前序遍历：根-左-右"></a>1. 前序遍历：根-左-右</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    visit(root);</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-中序遍历：左-根-右-1"><a href="#2-中序遍历：左-根-右-1" class="headerlink" title="2. 中序遍历：左-根-右"></a>2. 中序遍历：左-根-右</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    visit(root);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-后序遍历：左-右-根-1"><a href="#3-后序遍历：左-右-根-1" class="headerlink" title="3. 后序遍历：左-右-根"></a>3. 后序遍历：左-右-根</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">    visit(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-层次遍历"><a href="#4-层次遍历" class="headerlink" title="4. 层次遍历"></a>4. 层次遍历</h5><p>使用【队列】来由上至下由左至右遍历，队列由 LinkedList 实现。</p><h2 id="三、实现（递归与迭代两种方式）"><a href="#三、实现（递归与迭代两种方式）" class="headerlink" title="三、实现（递归与迭代两种方式）"></a>三、实现（递归与迭代两种方式）</h2><h5 id="1-前序遍历：根-左-右-2"><a href="#1-前序遍历：根-左-右-2" class="headerlink" title="1. 前序遍历：根-左-右"></a>1. 前序遍历：根-左-右</h5><h6 id="LeetCode的144题：二叉树的前序遍历"><a href="#LeetCode的144题：二叉树的前序遍历" class="headerlink" title="LeetCode的144题：二叉树的前序遍历"></a>LeetCode的144题：二叉树的前序遍历</h6><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="img" style="zoom:80%;" /><p>输入：root = [1,null,2,3]<br>输出：[1,2,3]</p><ul><li>方法一：递归。</li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       res.add(root.val);</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法二：迭代。借助栈。</p><ul><li><p>思路：<br>首先应该创建一个Stack用来存放节点，首先我们想要打印根节点的数据，此时Stack里面的内容为空，所以我们优先将头结点加入Stack，然后打印。</p><p> 之后应该先打印左子树，然后右子树。所以先加入Stack的就是右子树，然后左子树。<br><img src="https://img-blog.csdnimg.cn/20201220215751572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     stack.push(root);</span><br><span class="line">     <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">         TreeNode node = stack.pop();</span><br><span class="line">         res.add(node.val);</span><br><span class="line">          <span class="comment">//栈先进后出，为保证左边的子节点先弹出，把右子节点压入栈</span></span><br><span class="line">         <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) stack.push(node.right);</span><br><span class="line">         <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) stack.push(node.left);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="2-中序遍历：左-根-右-2"><a href="#2-中序遍历：左-根-右-2" class="headerlink" title="2. 中序遍历：左-根-右"></a>2. 中序遍历：左-根-右</h5><h6 id="LeetCode的94题：二叉树的中序遍历"><a href="#LeetCode的94题：二叉树的中序遍历" class="headerlink" title="LeetCode的94题：二叉树的中序遍历"></a>LeetCode的94题：二叉树的中序遍历</h6><ul><li>方法一：递归。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="comment">//左中右</span></span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       res.add(root.val);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>方法二：迭代。<ul><li>思路：<br>从根节点向左找到最后一个左子节点，并压入栈。弹出栈顶节点，并加入结果集。再找此节点的右子节点，如果为空将弹出根节点。<br><img src="https://img-blog.csdnimg.cn/20201220220612254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//向左找左子节点</span></span><br><span class="line">           <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="comment">//将左子节点入栈</span></span><br><span class="line">               stack.push(root);</span><br><span class="line">               root = root.left;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//找到左子树最后一个左子节点弹出并添加至结果集</span></span><br><span class="line">           root = stack.pop();</span><br><span class="line">           res.add(root.val);</span><br><span class="line">           <span class="comment">//找此节点的右子节点进入上面循环</span></span><br><span class="line">           root = root.right;  </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   ｝</span><br></pre></td></tr></table></figure><h5 id="3-后序遍历：左-右-根-2"><a href="#3-后序遍历：左-右-根-2" class="headerlink" title="3. 后序遍历：左-右-根"></a>3. 后序遍历：左-右-根</h5><h6 id="LeetCode的145题：二叉树的后序遍历"><a href="#LeetCode的145题：二叉树的后序遍历" class="headerlink" title="LeetCode的145题：二叉树的后序遍历"></a>LeetCode的145题：二叉树的后序遍历</h6></li></ul></li><li>方法一：递归。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       dfs(root, res);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">       <span class="comment">//左右中</span></span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">       dfs(root.left, res);</span><br><span class="line">       dfs(root.right, res);</span><br><span class="line">       res.add(root.val);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>方法二：迭代。前序遍历的结果倒序添加。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span>(root != <span class="keyword">null</span>) stack.push(root);</span><br><span class="line">       <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">           TreeNode node = stack.pop();</span><br><span class="line">           <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) stack.push(node.left);</span><br><span class="line">           <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) stack.push(node.right);</span><br><span class="line">           </span><br><span class="line">           res.add(<span class="number">0</span>, node.val);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="4-层次遍历：BFS遍历-分层"><a href="#4-层次遍历：BFS遍历-分层" class="headerlink" title="4. 层次遍历：BFS遍历 + 分层"></a>4. 层次遍历：BFS遍历 + 分层</h5></li></ul><p><img src="https://img-blog.csdnimg.cn/20201220214729751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BFS遍历实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="LeetCode的102题：二叉树的层次遍历"><a href="#LeetCode的102题：二叉树的层次遍历" class="headerlink" title="LeetCode的102题：二叉树的层次遍历"></a>LeetCode的102题：二叉树的层次遍历</h6><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>示例：<br>二叉树：[3,9,20,null,null,15,7],</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回其层次遍历结果：</p><p>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]</p><ul><li>思路：由上面BFS遍历过程，稍加修改，即将每层的节点序列存储到集合temp中，再将每一层添加至<code>List&lt;List&lt;Integer&gt;&gt; res</code>即可</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                temp.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将每层添加至结果集</span></span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、二叉搜索树的中序遍历"><a href="#四、二叉搜索树的中序遍历" class="headerlink" title="四、二叉搜索树的中序遍历"></a>四、二叉搜索树的中序遍历</h2><p>由于<strong>BST树左小右大、中序遍历的结果由小到大</strong>，常利用这一结论来解题。如：</p><h6 id="LeetCode的230题：二叉搜索树中第k小的元素"><a href="#LeetCode的230题：二叉搜索树中第k小的元素" class="headerlink" title="LeetCode的230题：二叉搜索树中第k小的元素"></a>LeetCode的230题：二叉搜索树中第k小的元素</h6><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p><p>说明：<br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><ul><li>思路：直接应用上面中序遍历的结果，返回 list 的 第 k - 1 个元素即可。<ul><li>递归<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      helper(root, res);       </span><br><span class="line">      <span class="keyword">return</span> res.get(k - <span class="number">1</span>).val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序遍历结果</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;TreeNode&gt; list)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      helper(root.left, list);</span><br><span class="line">      list.add(root);</span><br><span class="line">      helper(root.right, list);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">          <span class="comment">//向左找左子节点</span></span><br><span class="line">          <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="comment">//将左子节点入栈</span></span><br><span class="line">              stack.push(root);</span><br><span class="line">              root = root.left;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//找到左子树最后一个左子节点弹出并添加至结果集</span></span><br><span class="line">          root = stack.pop();</span><br><span class="line">          <span class="comment">//找到第k小的节点</span></span><br><span class="line">          k--;</span><br><span class="line">          <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">          <span class="comment">//找此节点的右子节点进入上面循环</span></span><br><span class="line">          root = root.right;  </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="LeetCode的501题：二叉搜索树中的众数"><a href="#LeetCode的501题：二叉搜索树中的众数" class="headerlink" title="LeetCode的501题：二叉搜索树中的众数"></a>LeetCode的501题：二叉搜索树中的众数</h6>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</li></ul></li></ul></li></ul><p>假定 BST 有如下定义：</p><p>结点左子树中所含结点的值小于等于当前结点的值<br>结点右子树中所含结点的值大于等于当前结点的值<br>左子树和右子树都是二叉搜索树</p><p>例如：<br>给定 BST [1,null,2,2],</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> &#x2F;</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>返回[2].</p><p>提示：如果众数超过1个，不需考虑输出顺序</p><ul><li><p>方法：改造中序遍历。</p><ul><li><p>思路：</p><p>加入全局变量当前节点值<code>curVal</code>，当前节点出现次数<code>count</code>，最大出现的次数<code>maxCount</code></p><ul><li>如果当前节点值 <code>root.val == curVal</code>，<code>count++</code><ul><li>如果不等于<code>curVal</code>，说明遇到下一个新的值，更新<code>curVal = root.val</code> ，且 <code>count = 1</code></li></ul></li></ul><p>比较 <code>count</code> 与 maxCount</p><ul><li>如果相等，添加到结果集中</li><li>如果<code>count &gt; maxCount</code>，清空结果集，并把节点值 <code>root.val</code> 加入结果集，更新<code>maxCount = count</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> curVal;<span class="comment">//当前节点的值</span></span><br><span class="line">  <span class="keyword">int</span> count;<span class="comment">//cur节点的次数</span></span><br><span class="line"> <span class="keyword">int</span> maxCount;<span class="comment">//当前的最大次数</span></span><br><span class="line">  List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">      inorder(root);</span><br><span class="line">      <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++)&#123;</span><br><span class="line">          ans[i] = res.get(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      inorder(root.left);</span><br><span class="line">  <span class="comment">//如果当前节点值 node.val = cur，count + 1</span></span><br><span class="line">      <span class="keyword">int</span> rootVal = root.val;</span><br><span class="line">      <span class="keyword">if</span>(rootVal == curVal)&#123;</span><br><span class="line">          count++;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 如果不等于cur，说明遇到下一个新的值，更新cur，且count = 1</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          curVal = rootVal;</span><br><span class="line">          count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//比较count 与 maxCount</span></span><br><span class="line">  <span class="comment">// 如果相等，添加到结果集中</span></span><br><span class="line">      <span class="keyword">if</span>(count == maxCount)&#123;</span><br><span class="line">         res.add(rootVal);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 如果count &gt; maxCount，清空结果集，并把节点值 node.val 加入结果集，更新maxCount = count</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(count &gt; maxCount)&#123;</span><br><span class="line">          res.clear();</span><br><span class="line">          res.add(rootVal);</span><br><span class="line">         maxCount = count;</span><br><span class="line">      &#125;</span><br><span class="line">      inorder(root.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="LeetCode的530题：二叉树搜索树的最小绝对差"><a href="#LeetCode的530题：二叉树搜索树的最小绝对差" class="headerlink" title="LeetCode的530题：二叉树搜索树的最小绝对差"></a>LeetCode的530题：二叉树搜索树的最小绝对差</h6>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</li></ul></li></ul></li></ul><p>示例：<br>输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  3</span><br><span class="line"> &#x2F;</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>输出：<br>1</p><p>解释：<br>最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。</p><ul><li><p>方法：改造中序遍历。因为二叉搜索树的中序遍历结果是升序的，我们只需要在中序遍历的时候和前一个节点比较，保存最小的差值即可。建立前一个节点作为全局变量。</p><ul><li>递归：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  TreeNode pre;<span class="comment">//前一个节点</span></span><br><span class="line">  <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">      inorder(root);</span><br><span class="line">      <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      inorder(root.left);</span><br><span class="line">      <span class="keyword">if</span>(pre != <span class="keyword">null</span>)</span><br><span class="line">          min = Math.min(min, root.val - pre.val);</span><br><span class="line">      pre = root;<span class="comment">//更新pre到下个节点</span></span><br><span class="line">      inorder(root.right);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">      Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">      TreeNode cur = root, prev = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">              stack.push(cur);</span><br><span class="line">              cur = cur.left;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cur = stack.pop();</span><br><span class="line">              <span class="comment">//在这里进行改造</span></span><br><span class="line">              <span class="keyword">if</span> (prev != <span class="keyword">null</span>)</span><br><span class="line">                  min = Math.min(min, cur.val - prev.val);</span><br><span class="line">              prev = cur;</span><br><span class="line">              </span><br><span class="line">              cur = cur.right;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2020/12/20/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—树的最近公共祖先</title>
      <link>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <guid>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <pubDate>Thu, 17 Dec 2020 08:40:48 GMT</pubDate>
      
      <description>&lt;p&gt;针对下面两题作出解答与总结：&lt;br&gt;&lt;a href=&quot;#235%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%8Ceasy&quot;&gt;235，二叉搜索树的最近公共祖先，easy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#236%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%8Cmedium&quot;&gt;236，二叉树的最近公共祖先，medium&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>针对下面两题作出解答与总结：<br><a href="#235%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%8Ceasy">235，二叉搜索树的最近公共祖先，easy</a><br><a href="#236%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%8Cmedium">236，二叉树的最近公共祖先，medium</a></p><a id="more"></a><h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><p>最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>p、q两节点一定在此树上，有两种情况：</p><ol><li>p、q 在一个节点两侧，此节点即为p、q的公共祖先，如下图中 2 为p = 7、q = 4 的最近公共祖先<br><img src="https://img-blog.csdnimg.cn/20201217161655456.png" alt="在这里插入图片描述"></li><li>p 或 q为最近公共祖先，如下图中 p 即为最近公共祖先<br><img src="https://img-blog.csdnimg.cn/20201217161909824.png" alt="在这里插入图片描述"><h3 id="235，二叉搜索树的最近公共祖先，easy"><a href="#235，二叉搜索树的最近公共祖先，easy" class="headerlink" title="235，二叉搜索树的最近公共祖先，easy"></a>235，二叉搜索树的最近公共祖先，easy</h3>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。<br>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/f6e46ace5976ecb7788e718bdedf3e62.png" alt="img"></p><p> 示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p>说明:</p><p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉搜索树中。</p><ul><li><p>方法一：递归。</p><ul><li><p>思路：利用BST树左大右小的规律，p、q的位置有如下三种情况：</p><ul><li>在root的一左一右：返回root</li><li>都在root左子树：递归root.left</li><li>都在root右子树：递归root.right</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(p.val == root.val || q.val == root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &gt; root.val || p.val &gt; root.val &amp;&amp; q.val &lt; root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &lt; root.val) <span class="keyword">return</span> lowestCommonAncestor(root.left, p , q);</span><br><span class="line">        <span class="keyword">if</span>(p.val &gt; root.val &amp;&amp; q.val &gt; root.val) <span class="keyword">return</span> lowestCommonAncestor(root.right, p , q);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁版：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个差的乘积&lt;=0，p、q分布在root两侧,返回root</span></span><br><span class="line">        <span class="keyword">if</span>(p.val - root.val)*(q.val - root.val) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.val &lt; root.val ?lowestCommonAncestor(root.left,p,q) : lowestCommonAncestor(root.right,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二：迭代。</p><ul><li>思路：p，q与root可能有三种关系。①p，q都在root的左子树 ②.p，q都在root的右子树 ③.p，q在root的一左一右。</li><li>通过p.val，q.val与root.val的差的乘积来判断。<ul><li>如果大于0，说明①或②，则在root的左或右不断向下找，直到乘积为负返回此时根节点。</li><li>如果小于0，说明③，返回root。</li></ul></li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p.val == root.val || q.val == root.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//更新root直到找到p、q为两侧时的root</span></span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val &lt; root.val &amp;&amp; q.val &lt; root.val)</span><br><span class="line">                root = root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p.val &gt; root.val &amp;&amp; q.val &gt; root.val)</span><br><span class="line">                root = root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="236，二叉树的最近公共祖先，medium"><a href="#236，二叉树的最近公共祖先，medium" class="headerlink" title="236，二叉树的最近公共祖先，medium"></a>236，二叉树的最近公共祖先，medium</h5><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/194dc616212512f5efd6c8e72895ea22.png" alt="img"></p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p>说明:</p><p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉树中。</p><ul><li><p>方法：递归回溯。</p><ul><li>思路：二叉树没有什么特点 ，只能考虑先知道左右子树的情况，然后决定向上返回什么。因此采用「后序遍历」的思想。通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。<strong>从底至顶回溯</strong>，当节点 p,q 在节点 root 的异侧时，节点 root 即为最近公共祖先，则向上返回 root 。</li></ul></li></ul><pre><code>- 递归出口：  1. root递归到叶子节点，返回 null  2. 当 root 等于 p 或 q，返回 root- 递归体：  递归左子节点和右子节点<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 两种情况的 base case</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">  TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">  TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 回溯的结果有三种情况：  以下面为例，</code></pre><p><img src="https://img-blog.csdnimg.cn/20201217162249379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>（1）. 当 left和 right 同时不为空 ：说明 p,q 分列在 root 的 异侧 （分别在 左 / 右子树），因此 root为最近公共祖先，返回 root ；</p><p><img src="https://img-blog.csdnimg.cn/20201217162346233.png#pic_center" alt="在这里插入图片描述"><br>（2）.当 left 和 right 有一为空，返回另一个值</p><p> left 为空，right 不为空，具体可分为两种情况：</p><ol><li>p,q 其中一个在 root 的 右子树 中，此时 right 指向 p（假设为 p ，图中 p = 2， q 在 3 的右子树中）；</li><li>p,q 两节点都在 root 的 右子树 中，此时的 right 指向 最近公共祖先节点 （图中 p = 7， q = 4，返回公共节点 right = 2）；<br><img src="https://img-blog.csdnimg.cn/20201217162608560.png#pic_center" alt="在这里插入图片描述"><br>或<br><img src="https://img-blog.csdnimg.cn/20201217162636205.png#pic_center" alt="在这里插入图片描述"></li></ol><p>（3）left ，right 都为空，返回null<br><img src="https://img-blog.csdnimg.cn/20201217162704543.png#pic_center" alt="在这里插入图片描述"></p><p>​    </p><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val == p.val || root.val == q.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//分别递归左右子树</span></span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="comment">//回溯结果</span></span><br><span class="line">        <span class="comment">// if(left == null &amp;&amp; right == null) return null;</span></span><br><span class="line">        <span class="keyword">if</span>(left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span> ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/">二叉搜索树</category>
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2020/12/17/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—BST树的基础操作及套路模板</title>
      <link>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Wed, 16 Dec 2020 11:42:21 GMT</pubDate>
      
      <description>&lt;p&gt;本文针对BST 的基础操作：判断 BST 的合法性（&lt;em&gt;98&lt;/em&gt;）、增（&lt;em&gt;701&lt;/em&gt;）、删（&lt;em&gt;450&lt;/em&gt;）、查（&lt;em&gt;700&lt;/em&gt;）。以几道题来总结出套路模板，以一敌十！&lt;br&gt;&lt;a href=&quot;#98%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%8Cmedium&quot;&gt;98，验证二叉搜索树，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#700%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2%EF%BC%8Ceasy&quot;&gt;700，二叉搜索树中的搜索，easy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#701%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%EF%BC%8Cmedium&quot;&gt;701，二叉搜索树中的插入操作，medium&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#450%EF%BC%8C%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmedium&quot;&gt;450，删除二叉搜索树中的节点，medium&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文针对BST 的基础操作：判断 BST 的合法性（<em>98</em>）、增（<em>701</em>）、删（<em>450</em>）、查（<em>700</em>）。以几道题来总结出套路模板，以一敌十！<br><a href="#98%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%8Cmedium">98，验证二叉搜索树，medium</a><br><a href="#700%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2%EF%BC%8Ceasy">700，二叉搜索树中的搜索，easy</a><br><a href="#701%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%EF%BC%8Cmedium">701，二叉搜索树中的插入操作，medium</a><br><a href="#450%EF%BC%8C%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmedium">450，删除二叉搜索树中的节点，medium</a></p><a id="more"></a><h5 id="98，验证二叉搜索树，medium"><a href="#98，验证二叉搜索树，medium" class="headerlink" title="98，验证二叉搜索树，medium"></a>98，验证二叉搜索树，medium</h5><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。</p><ul><li><p>思路：很容易想到对于节点root，采用递归判断左子节点的值比它小，右子节点的值比它大，但注意：对每个节点都满足也不一定是BST树，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  5</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   6</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   7</span><br></pre></td></tr></table></figure><p>没有满足右子树的节点都比root值大。</p><p>建立辅助函数，增加最小节点min和最大节点max 作为辅助函数的参量。对于root，比较<code>root.val</code>与当前的<code>min.val</code> 和 <code>max.val</code>，再对<code>root.left</code> 和<code>root.right</code> 进行递归操作。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> healper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是BST树必须满足 min.val &lt; root.val &lt; max.val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">healper</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min != <span class="keyword">null</span> &amp;&amp; min.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max != <span class="keyword">null</span> &amp;&amp; max.val &lt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//左子树范围的最小值是min.val，最大值是当前节点的值，也就是root的值，因为左子树的值要比当前节点小</span></span><br><span class="line">    <span class="comment">//右子数范围的最大值是max.val，最小值是当前节点的值，也就是root的值，因为右子树的值要比当前节点大</span></span><br><span class="line">        <span class="keyword">return</span> healper(root.left, min, root) &amp;&amp; healper(root.right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二：中序遍历。</p><ul><li><p>思路：中序遍历的结果是从小到大排序的，建立一个全局遍历<code>pre</code>代表前一个节点，当前节点与前一个节点进行比较。</p><ul><li><p>递归：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line"><span class="comment">//中序遍历，递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 访问左子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 访问当前节点，如果不是按照从小到大的顺序，则返回false；否则pre右移，继续比较</span></span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="comment">// 访问右子树</span></span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历，代表前一个节点</span></span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>易错点：采用递归方法只与左右子节点比较，但没有保证整棵树是BST树。</p></li></ul><h5 id="700，二叉搜索树中的搜索，easy"><a href="#700，二叉搜索树中的搜索，easy" class="headerlink" title="700，二叉搜索树中的搜索，easy"></a>700，二叉搜索树中的搜索，easy</h5><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p><p>例如，</p><p>给定二叉搜索树:</p><pre><code>    4   / \  2   7 / \1   3</code></pre><p>和值: 2<br>你应该返回如下子树:</p><pre><code>  2      / \   1   3</code></pre><p>在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</p><ul><li><p>思路：对于普通二叉树，判断是否存在值为 <code>val</code> 的节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> search(root.left, val) || search(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于BST树，利用其左小右大的规律，不需要递归地搜索两边，类似二分查找思想，根据<code>val</code>和<code>root.val</code>的大小比较，就能排除一边。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val) <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span> || root.val == val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">return</span> val &lt; root.val ? searchBST(root.left, val) : searchBST(root.right, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结</strong>：BST树遍历搜索的框架为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="701，二叉搜索树中的插入操作，medium"><a href="#701，二叉搜索树中的插入操作，medium" class="headerlink" title="701，二叉搜索树中的插入操作，medium"></a>701，二叉搜索树中的插入操作，medium</h5><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p>示例 1：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/be940ab2e07119dcd45e5d58370fc5de.png" alt="img"></p><p>输入：root = [4,2,7,1,3], val = 5<br>输出：[4,2,7,1,3,5]<br>解释：另一个满足题目要求可以通过的树是：</p><img src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg" alt="img" style="zoom:80%;" /><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [40,20,60,10,30,50,70], val &#x3D; 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,null,null,null,null,null,null], val &#x3D; 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><p>对于函数<code>TreeNode insertIntoBST(TreeNode root, int val)</code>，表示插入值为 <code>val</code> 的节点后的BST树。由上面总结的查找的模板，再加入修改的操作即可。<strong>一旦涉及「改」，函数就要返回<code>TreeNode</code>类型，并且对递归调用的返回值进行接收。</strong></p><ul><li>方法：递归</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找 + 修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        <span class="comment">//val值比当前节点值大，将找个值插入右子树，且赋给root.right</span></span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; val) root.right = insertIntoBST(root.right, val);</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt; val) root.left = insertIntoBST(root.left, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="450，删除二叉搜索树中的节点，medium"><a href="#450，删除二叉搜索树中的节点，medium" class="headerlink" title="450，删除二叉搜索树中的节点，medium"></a>450，删除二叉搜索树中的节点，medium</h5><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点；<br>如果找到了，删除它。<br>说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p><p>示例:</p><p>root = [5,3,6,2,4,null,7]<br>key = 3</p><pre><code>    5   / \  3   6 / \   \2   4   7</code></pre><p>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。</p><p>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。</p><pre><code>    5   / \  4   6 /     \2       7</code></pre><p>另一个正确答案是 [5,2,6,null,4,null,7]。</p><pre><code>    5   / \  2   6   \   \    4   7</code></pre><ul><li><p>思路：还是<strong>查找 + 修改</strong> 类型，按照上面的遍历框架，写出初步解答：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 找到啦，进行删除</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">       <span class="comment">//一些删除操作</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在左子树，对左子树进行删除操作并重新赋给root.left</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        root.left = deleteNode(root.left, key);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// key在右子树，对右子树进行删除操作并重新赋给root.right</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        root.right = deleteNode(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到要删除的节点后，删除操作有下面情况：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20201216192138470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li><p>左右子节点有为空的（如12），返回非空的子节点</p><p><em>（<code>deleteNode</code> 函数即返回删除值为key的节点后的树）</em></p><p>如果左右子节点都为空，则返回null</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line"><span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br></pre></td></tr></table></figure></li><li><p>左右子节点都不为空，就要找到<strong>左子树的最大值或者右子树的最小值</strong>替换此root，并在左子树（或右子树）删除此节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root.val = getMaxLeft(root.left).val;</span><br><span class="line">root.left = deleteNode(root.left, root.val);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.val == key)&#123;</span><br><span class="line">            <span class="comment">//1.有子节点为空</span></span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="keyword">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="comment">//2.子节点非空，则由左子树的最大值或者右子树的最小值替换此root，并在左子树（或右子树）删除此节点</span></span><br><span class="line">            root.val = getMaxLeft(root.left).val;</span><br><span class="line">            root.left = deleteNode(root.left, root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//key在右子树，对右子树进行删除操作，并把新的子树重新赋给root.right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; key)&#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从root.left出发,找到root的左子树的最大值（向右找）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMaxLeft</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li><p>由BST树的搜索框架，可以实现增（插）删改查，这几项的操作都是<strong>搜+改</strong>，做题可以先把框架写出来，再分析每步干什么。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)&#123;</span><br><span class="line">        <span class="comment">// 找到目标节点，进行具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标值target比当前节点值大，在右子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        BST(root.right, target);</span><br><span class="line">    <span class="comment">//目标值target比当前节点值小，在左子树中找</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        BST(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于BST树最大的特点就是左小右大，中序遍历的结果由小到大。</p></li><li><p>递归最重要的就是弄清函数的含义，如果有返回值代表什么。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/">二叉搜索树</category>
      
      
      <comments>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94BST%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%A5%97%E8%B7%AF%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—递归解决树</title>
      <link>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/</link>
      <guid>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/</guid>
      <pubDate>Wed, 16 Dec 2020 11:34:12 GMT</pubDate>
      
      <description>&lt;p&gt;对于树，经常用的算法有递归，回溯，BFS，DFS等。下面是一些用递归算法来解的题：&lt;br&gt;&lt;a href=&quot;#104%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy&quot;&gt;104，二叉树的最大深度，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#110%EF%BC%8C%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy&quot;&gt;110，平衡二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#543%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%EF%BC%8Ceasy&quot;&gt;543，二叉树的直径，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#226%EF%BC%8C%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy&quot;&gt;226，翻转二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#617%EF%BC%8C%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy&quot;&gt;617，合并二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#112%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%EF%BC%8Ceasy&quot;&gt;112，路径总和，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#113%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%E2%85%A1%EF%BC%8Cmidium&quot;&gt;113，路径总和Ⅱ，midium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#572%EF%BC%8C%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%EF%BC%8Ceasy&quot;&gt;572，另一个树的子树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#101%EF%BC%8C%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy&quot;&gt;101，对称二叉树，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#111%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy&quot;&gt;111，二叉树的最小深度，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#404%EF%BC%8C%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C%EF%BC%8Ceasy&quot;&gt;404，左叶子之和，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#687%EF%BC%8C%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84%EF%BC%8Cmedium&quot;&gt;687，最长同值路径，medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#671%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Ceasy&quot;&gt;671，二叉树中第二小的节点，easy&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>对于树，经常用的算法有递归，回溯，BFS，DFS等。下面是一些用递归算法来解的题：<br><a href="#104%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy">104，二叉树的最大深度，easy</a></p><p><a href="#110%EF%BC%8C%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">110，平衡二叉树，easy</a></p><p><a href="#543%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%EF%BC%8Ceasy">543，二叉树的直径，easy</a></p><p><a href="#226%EF%BC%8C%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">226，翻转二叉树，easy</a></p><p><a href="#617%EF%BC%8C%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">617，合并二叉树，easy</a></p><p><a href="#112%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%EF%BC%8Ceasy">112，路径总和，easy</a></p><p><a href="#113%EF%BC%8C%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%E2%85%A1%EF%BC%8Cmidium">113，路径总和Ⅱ，midium</a></p><p><a href="#572%EF%BC%8C%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%EF%BC%8Ceasy">572，另一个树的子树，easy</a></p><p><a href="#101%EF%BC%8C%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8Ceasy">101，对称二叉树，easy</a></p><p><a href="#111%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6%EF%BC%8Ceasy">111，二叉树的最小深度，easy</a></p><p><a href="#404%EF%BC%8C%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C%EF%BC%8Ceasy">404，左叶子之和，easy</a></p><p><a href="#687%EF%BC%8C%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84%EF%BC%8Cmedium">687，最长同值路径，medium</a></p><p><a href="#671%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Ceasy">671，二叉树中第二小的节点，easy</a></p><a id="more"></a><h5 id="104，二叉树的最大深度，easy"><a href="#104，二叉树的最大深度，easy" class="headerlink" title="104，二叉树的最大深度，easy"></a>104，二叉树的最大深度，easy</h5><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回它的最大深度 3 。</p><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftDepth = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftDepth &gt;= rightDepth ? leftDepth + <span class="number">1</span> : rightDepth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="110，平衡二叉树，easy"><a href="#110，平衡二叉树，easy" class="headerlink" title="110，平衡二叉树，easy"></a>110，平衡二叉树，easy</h5><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><p>示例 1：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/341009251c7788edc838975732064bf1.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bce64ca4c0e80b345a5a286122112851.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; []</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><ul><li><p>思想：先判断root 为根节点的树是不是平衡二叉树，（即比较左右子树的高度差是否不超过1），再判断以root.left 和 root.right 为根节点的树是不是平衡二叉树。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">         <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">     <span class="comment">//判断当前根节点的树是否为平衡二叉树</span></span><br><span class="line">     <span class="keyword">if</span>(Math.abs(l - r) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> (isBalanced(root.left) &amp;&amp; isBalanced(root.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取整棵树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        <span class="keyword">return</span> Math.max(depth(root.left),depth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="543，二叉树的直径，easy"><a href="#543，二叉树的直径，easy" class="headerlink" title="543，二叉树的直径，easy"></a>543，二叉树的直径，easy</h5><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><p>示例 :<br>给定二叉树</p><pre><code>      1     / \    2   3   / \       4   5    </code></pre><p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><p>注意：两结点之间的路径长度是以它们之间边的数目表示。</p><ul><li><p>方法：DFS递归。</p></li><li><p>思路：直径 = 任意两个结点路径长度中的最大值，可以看做树内的某一节点的左子树节点数l + 右子树节点数r - 1，所有节点的l + r - 1中的最大值即为直径。定义一个递归函数计算经过的左右子树的节点数l + r，函数返回给定节点为根的子树的深度。递归搜索每个节点并设一个全局变量 ans 记录 l + r 的最大值，最后返回 ans 即为树的直径。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        depth(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最大的 L+R</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = depth(root.left);</span><br><span class="line">        <span class="keyword">int</span> r = depth(root.right);</span><br><span class="line">        ans = Math.max(ans, l + r);<span class="comment">//找到最大直径</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(l, r) + <span class="number">1</span>;<span class="comment">//树的深度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="226，翻转二叉树，easy"><a href="#226，翻转二叉树，easy" class="headerlink" title="226，翻转二叉树，easy"></a>226，翻转二叉树，easy</h5><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>输出：</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><ul><li><p>方法一：递归。</p></li><li><p>思路：分别对左右子树都进行翻转，再交换。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode leftTree = root.left;<span class="comment">//保存原来的左子树</span></span><br><span class="line">        root.left = invertTree(root.right);</span><br><span class="line">        root.right = invertTree(leftTree);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：借助栈（DFS）。</p></li><li><p>思路：先将根节点压入栈。栈非空时，弹出栈顶节点，如果弹出节点的左右子节点有非空，将其压入栈，并进行交换，重复此过程直到栈空。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode temp = node.right;</span><br><span class="line">            node.right = node.left;</span><br><span class="line">            node.left = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="617，合并二叉树，easy"><a href="#617，合并二叉树，easy" class="headerlink" title="617，合并二叉树，easy"></a>617，合并二叉树，easy</h5><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">     1                           2 </span><br><span class="line">   &#x2F;   \                       &#x2F;   \</span><br><span class="line">  3     2                     1     3</span><br><span class="line"> &#x2F;                             \     \</span><br><span class="line">5                               4     7                               </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \   \ </span><br><span class="line"> 5   4   7</span><br></pre></td></tr></table></figure><p>注意: 合并必须从两个树的根节点开始。</p><ul><li><p>方法一：递归。(dfs)</p></li><li><p>思路：新建一棵树，如果原来两棵树的节点都存在，直接相加；如果有一个不存在，返回另一个节点。递归节点的左右子节点，作为新树的左右子树。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t1 == <span class="keyword">null</span> ? t2 : t1;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode newTree = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">        newTree.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">        newTree.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        <span class="keyword">return</span> newTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="112，路径总和，easy"><a href="#112，路径总和，easy" class="headerlink" title="112，路径总和，easy"></a>112，路径总和，easy</h5><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \      \    7    2      1</code></pre><p>返回 true, 因为存在目标和为 22 的根节点到叶子- 方法一：递归（dfs）</p><ul><li><p>思路：以当前根节点为例，如果为null，返回false；如果为叶子节点，判断当前节点值是否与sum相等并返回；如果不是叶子节点，递归搜索左右子节点。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.val == sum;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left,sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="113，路径总和Ⅱ，midium"><a href="#113，路径总和Ⅱ，midium" class="headerlink" title="113，路径总和Ⅱ，midium"></a>113，路径总和Ⅱ，midium</h5><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \    / \    7    2  5   1</code></pre><p>返回:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>方法：递归回溯（dfs）。</p></li><li><p>思路：</p><ul><li>回溯条件：<ol><li>节点为空— 如果当前节点为空，说明节点没有孩子，循着这条路径，已经找不到符合条件的路径。</li><li>节点为叶子节点— 如果当前节点是叶子节点并且它的值满足题目要求，则它所在的路径就是满足要求的。</li></ol></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        dfs(root, sum, res, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//把当前节点值加入到list中</span></span><br><span class="line">         list.add(root.val);</span><br><span class="line">        <span class="comment">//叶子节点且此节点值=sum</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; root.val == sum) res.add(<span class="keyword">new</span> ArrayList(list));</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//还没到叶子节点，继续从左右节点向下找</span></span><br><span class="line">        dfs(root.left, sum - root.val, res, list);</span><br><span class="line">        dfs(root.right, sum - root.val, res, list);</span><br><span class="line">        <span class="comment">//防止分支污染，遍历完当前节点的左子树、右子树，说明经过这个节点的路径已经被遍历完，因此要回溯到当前节点的父节点</span></span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&mid=2247487910&idx=1&sn=2670aec7139c6b98e83ff66114ac1cf7&chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&scene=21#wechat_redirect">关于递归与回溯的详解</a></p></li></ul><h5 id="572，另一个树的子树，easy"><a href="#572，另一个树的子树，easy" class="headerlink" title="572，另一个树的子树，easy"></a>572，另一个树的子树，easy</h5><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p><p>示例 1:<br>给定的树 s:</p><pre><code>         3        / \       4   5      / \         1   2   </code></pre><p>给定的树 t：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4 </span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure><p>返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p><p>示例 2:<br>给定的树 s：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   5</span><br><span class="line"> &#x2F; \    </span><br><span class="line">1   2 </span><br></pre></td></tr></table></figure><p>给定的树 t：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  4</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure><p>返回 false。</p><ul><li><p>方法：建立一个递归函数，判断两棵树是否相等。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第二棵树为空，一定是子树</span></span><br><span class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//第一棵树为空，没有子树</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较t是否是s的左子树和右子树的一部分，或s与t是两棵相同的树</span></span><br><span class="line">        <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t) || isSameTree(s, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断两棵树是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//如果其中有一个节点为空或两节点值不相等时，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归比较左子树和右子树是否相同</span></span><br><span class="line">        <span class="keyword">return</span> isSameTree(s.left, t.left) &amp;&amp; isSameTree(s.right, t.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="101，对称二叉树，easy"><a href="#101，对称二叉树，easy" class="headerlink" title="101，对称二叉树，easy"></a>101，对称二叉树，easy</h5><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><pre><code>    1   / \  2   2 / \ / \3  4 4  3</code></pre><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><pre><code>    1   / \  2   2   \   \   3    3</code></pre><ul><li><p>方法一：递归。</p></li><li><p>思路：建立一个递归函数，移动两个指针遍历这棵树，判断根节点的左右子树是否对称。在主函数调用此递归函数，参数为根的左子节点和右子节点。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用两个指针检查树是否对称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span> || p.val != q.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="111，二叉树的最小深度，easy"><a href="#111，二叉树的最小深度，easy" class="headerlink" title="111，二叉树的最小深度，easy"></a>111，二叉树的最小深度，easy</h5><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/6d8500c55fe3ebe98dc781d7b62a3bbf.png" alt="img"></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,null,3,null,4,null,5,null,6]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。</p><ul><li>结束条件：当root为空，返回0</li><li>递归体：若左右子树皆空，返回1；若左子树和右子树有非空的，记录其最小路径，最后返回结果为最小路径 ➕ 1</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1.当root的左右子树都为空</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mindep = Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//2.root的左子树或右子树有不为空，计算其最小路径</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.left), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mindep = Math.min(minDepth(root.right), mindep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回最小路径+1</span></span><br><span class="line">        <span class="keyword">return</span> mindep + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误原因：想法是dfs 来递归左右子树找它们的最小路径，然后取最小。但这样可能在 [2,null,3,null,4,null,5,null,6] 结构中不成立，因为root的左子树为空，所以要加一个判断。</p></li></ul><h5 id="404，左叶子之和，easy"><a href="#404，左叶子之和，easy" class="headerlink" title="404，左叶子之和，easy"></a>404，左叶子之和，easy</h5><p>计算给定二叉树的所有<strong>左叶子</strong>之和。</p><p>示例：</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</p><ul><li><p>方法一：递归dfs</p></li><li><p>思路：所有左叶子节点之和，需要遍历整棵树，采用dfs。</p><ul><li><p>递归出口：节点为空或为叶子节点</p></li><li><p>递归条件：</p><ul><li><p>如果左子树不为空，判断左子节点是否为叶子节点：若不是，递归调用左子节点</p><ul><li>如果右子树为空，结果不变；若不为空，上面的结果＋ 递归调用右子节点</li></ul></li><li><p>否则左子树为空，右子树一定不为空，只需判断右子节点是不是叶子节点，若不是，递归调用右子节点</p></li><li><p>最后返回结果</p></li></ul></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || isLeaf(root)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = isLeaf(root.left) ? root.left.val : dfs(root.left);</span><br><span class="line">            <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">            res += isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res = isLeaf(root.right) ? <span class="number">0</span> : dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简洁的版本：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLeaf(root.left)) <span class="keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另一题：一棵树所有左子节点的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">           res = sumOfLeftLeaves(root.left) + root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res = sumOfLeftLeaves(root.left) + root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="687，最长同值路径，medium"><a href="#687，最长同值路径，medium" class="headerlink" title="687，最长同值路径，medium"></a>687，最长同值路径，medium</h5><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p><p>注意：两个节点之间的路径长度由它们之间的边数表示。</p><p>示例 1:</p><p>输入:</p><pre><code>          5         / \        4   5       / \   \      1   1   5</code></pre><p>输出:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>示例 2:</p><p>输入:</p><pre><code>          1         / \        4   5       / \   \      4   4   5</code></pre><p>输出:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。（dfs）</p></li><li><p>思路：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20201214162048997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>最长路径分为2种情况：</p><ol><li>以root为起点，经过左子树或右子树，如(2)</li><li>不以root为起点，root为中间点，如(1)</li></ol></li><li><p>辅助函数helper，计算以每一个节点为起点的最长同值路径maxLength，在过程中可以得到以root为根节点的树的最长同值路径ans。</p></li></ul><ul><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="comment">//以root为根节点的树的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以root为起点的最长同值路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以左、右子节点为起点的最长同值路径</span></span><br><span class="line">        <span class="keyword">int</span> leftLength = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightLength = helper(root.right);</span><br><span class="line">        <span class="comment">//如果左、右子树都非空 且 root.val == root.left.val == root.right.val，更新ans</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span> &amp;&amp; root.val == root.left.val  &amp;&amp; root.val == root.right.val)&#123;</span><br><span class="line">            ans = Math.max(ans, leftLength + rightLength + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftPath = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightPath = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果左右子树有非空且子节点的值与root的值相等，以根节点为起点的最长同值路径为leftPath,rightPath中的最大值</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val)&#123;</span><br><span class="line">            leftPath  = leftLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val)&#123;</span><br><span class="line">            rightPath = rightLength + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取左右子树的最长同值路径的最大值</span></span><br><span class="line">        maxLength = Math.max(leftPath,rightPath);</span><br><span class="line">        <span class="comment">//更新ans</span></span><br><span class="line">        ans = Math.max(ans, maxLength);</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁版：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> path = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = dfs(root.left);</span><br><span class="line">    <span class="keyword">int</span> right = dfs(root.right);</span><br><span class="line">    <span class="keyword">int</span> leftPath = root.left != <span class="keyword">null</span> &amp;&amp; root.left.val == root.val ? left + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightPath = root.right != <span class="keyword">null</span> &amp;&amp; root.right.val == root.val ? right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    path = Math.max(path, leftPath + rightPath);</span><br><span class="line">    <span class="keyword">return</span> Math.max(leftPath, rightPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="671，二叉树中第二小的节点，easy"><a href="#671，二叉树中第二小的节点，easy" class="headerlink" title="671，二叉树中第二小的节点，easy"></a>671，二叉树中第二小的节点，easy</h5><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p><p>更正式地说，<code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p><p>给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p><p>示例 1：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bcc8d1bfd49276663468ef8e4c20907.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,5,null,null,5,7]</span><br><span class="line">输出：5</span><br><span class="line">解释：最小的值是 2 ，第二小的值是 5 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac58c17f14a23e31dd1aa6a7c40abcc6.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [2,2,2]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最小的值是 2, 但是不存在第二小的值。</span><br></pre></td></tr></table></figure><ul><li><p>题意解析：每个树的根节点的值都为这棵树所有节点最小的值，所有节点中第二小的值即只比根节点大的值。</p></li><li><p>方法一：递归。</p><ul><li>递归出口：节点为空，返回 -1。</li><li>递归体：<ul><li>左右子节点都为空，返回 -1。</li><li>根节点取的是左子节点的值，递归左子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li><li>根节点取的是右子节点的值，递归右子节点得到只比这个值大的值（或 -1，即此节点为叶子节点）</li></ul></li><li>结果：<ul><li>left 、right 如果都不为 -1，取最小值并返回</li><li>left 不为 -1(right 为 -1)，返回left</li><li>否则（left为 -1），返回right(-1 或 root.right.val或递归结果)</li></ul></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = root.left.val;</span><br><span class="line">        <span class="comment">//如果左子节点是最小值，递归左子节点，得到以左子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(left == root.val)&#123;</span><br><span class="line">            left = findSecondMinimumValue(root.left);<span class="comment">//-1 或 以root.left为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right = root.right.val;</span><br><span class="line">        <span class="comment">//如果右子节点是最小值，递归右子节点，得到以右子节点为根的树的第二小的值 或 -1</span></span><br><span class="line">        <span class="keyword">if</span>(right == root.val)&#123;</span><br><span class="line">            right = findSecondMinimumValue(root.right);<span class="comment">//-1 或 以root.right为根的树的第二小的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果两边的树递归结果都不为-1（都正常），返回它们的最小值，即在root为根的树中只比root.val大</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span> &amp;&amp; right != -<span class="number">1</span>) <span class="keyword">return</span> Math.min(left,right);</span><br><span class="line">        <span class="comment">//如果左子树正常，返回左子树</span></span><br><span class="line">        <span class="keyword">if</span>(left != -<span class="number">1</span>) <span class="keyword">return</span> left; </span><br><span class="line">        <span class="comment">//否则返回右子树递归值（-1 或 以root.right为根的树的第二小的值）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> right;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2020/12/16/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode刷题—链表</title>
      <link>http://example.com/2020/12/08/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%93%BE%E8%A1%A8/</link>
      <guid>http://example.com/2020/12/08/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Tue, 08 Dec 2020 09:12:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;LeetCode刷题&quot;&gt;&lt;a href=&quot;#LeetCode刷题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题&quot;&gt;&lt;/a&gt;LeetCode刷题&lt;/h1&gt;&lt;h2 id=&quot;数据结构：&quot;&gt;&lt;a href=&quot;#数据结构：&quot; class=&quot;headerlink&quot; title=&quot;数据结构：&quot;&gt;&lt;/a&gt;数据结构：&lt;/h2&gt;&lt;h3 id=&quot;一、链表&quot;&gt;&lt;a href=&quot;#一、链表&quot; class=&quot;headerlink&quot; title=&quot;一、链表&quot;&gt;&lt;/a&gt;一、链表&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;#160%EF%BC%8C%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy&quot;&gt;160，相交链表，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#206%EF%BC%8C%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy&quot;&gt;206，反转链表，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#21%EF%BC%8C%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy&quot;&gt;21，合并两个有序链表，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#83%EF%BC%8C%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Ceasy&quot;&gt;83，删除排序链表中的重复元素，easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#83-%E2%85%A1.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Cmiddle&quot;&gt;83-Ⅱ.删除排序链表中的重复元素，middle&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode刷题"><a href="#LeetCode刷题" class="headerlink" title="LeetCode刷题"></a>LeetCode刷题</h1><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><h3 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h3><p><a href="#160%EF%BC%8C%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">160，相交链表，easy</a></p><p><a href="#206%EF%BC%8C%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">206，反转链表，easy</a></p><p><a href="#21%EF%BC%8C%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">21，合并两个有序链表，easy</a></p><p><a href="#83%EF%BC%8C%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Ceasy">83，删除排序链表中的重复元素，easy</a></p><p><a href="#83-%E2%85%A1.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%EF%BC%8Cmiddle">83-Ⅱ.删除排序链表中的重复元素，middle</a></p><a id="more"></a><p><a href="#19%EF%BC%8C%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8Cmiddle">19，删除链表的倒数第N个节点，middle</a></p><p><a href="#24%EF%BC%8C%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8Cmiddle">24，两两交换链表中的节点，middle</a></p><p><a href="#445%EF%BC%8C%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%E2%85%A1%EF%BC%8Cmiddle">445，两数相加Ⅱ，middle</a></p><p><a href="#234%EF%BC%8C%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8%EF%BC%8Ceasy">234，回文链表，easy</a></p><p><a href="#725%EF%BC%8C%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8%EF%BC%8Cmiddle">725，分隔链表，middle</a></p><p><a href="#328%EF%BC%8C%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8%EF%BC%8Cmiddle">328，奇偶链表，middle</a></p><h4 id="160，相交链表，easy"><a href="#160，相交链表，easy" class="headerlink" title="160，相交链表，easy"></a>160，相交链表，easy</h4><p>输入两个链表，找出它们的第一个公共节点。</p><p>如下面的两个链表：</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222545595.png" alt="image-20201116222545595" style="zoom:67%;" /><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222612234.png" alt="image-20201116222612234" style="zoom:67%;" /><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201116222642573.png" alt="image-20201116222642573" style="zoom:67%;" /><ul><li>方法：双指针。<ul><li>思路：定义节点pA指向headA，节点pB指向headB。<ul><li>如果两链表长度相同<ul><li>有交点，返回此交点</li><li>没有交点，返回null</li></ul></li><li>如果两链表长度不同，先走完的指针指向另一个链表的头节点（如示例2的pB先走完，则指向headA），两指针再次出发，直到后走完的指针也走完了当前链表，使其指向另一链表（即pA走完，指向headB），两指针再次出发，直到找到交点或没有交点走完两链表。</li></ul></li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双指针，pA与pB如果能相遇，说明两个链表长度相同且有交点；第一遍不能相遇，pA转移到pB,pB转移到pA</span></span><br><span class="line">        <span class="comment">//再次遍历，如果能相遇说明有交点</span></span><br><span class="line"></span><br><span class="line">        ListNode pA = headA;</span><br><span class="line">        ListNode pB = headB;</span><br><span class="line"><span class="comment">//判别两个链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (pA == <span class="keyword">null</span> || pB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//长度不同会有先走完链表的</span></span><br><span class="line">        <span class="keyword">while</span>(pA != <span class="keyword">null</span> &amp;&amp; pB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//A先走完,转向headB pB同理</span></span><br><span class="line">        <span class="keyword">if</span>(pA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pB = headA;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//再次同时走，A继续向前，B转为headA        </span></span><br><span class="line">        <span class="keyword">while</span>(pA != <span class="keyword">null</span> &amp;&amp; pB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            pA = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pB = headA;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//pA在B链表，pB在A链表，同时向前找交点</span></span><br><span class="line">        <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">            pA = pA.next;</span><br><span class="line">            pB = pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode pA = headA;</span><br><span class="line">        ListNode pB = headB;</span><br><span class="line">        <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">            pA = pA == <span class="keyword">null</span> ? headB:pA.next;</span><br><span class="line">            pB = pB == <span class="keyword">null</span> ? headA:pB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意点：边界条件的判断：两链表可能为空。</li></ul><h4 id="206，反转链表，easy"><a href="#206，反转链表，easy" class="headerlink" title="206，反转链表，easy"></a>206，反转链表，easy</h4><p>反转一个单链表。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><ul><li><p>方法一：递归。 </p><ul><li>思路：先递归到底, 找到最后一个节点, 然后从最后一个节点开始, 把箭头方向掉转。</li></ul><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164846365.png" alt="image-20201203164846365" style="zoom: 67%;" /><ul><li><p>递归出口：链表为空或递归到链表的尾节点</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164821559.png" alt="image-20201203164821559" style="zoom: 67%;" /></li><li><p>递归体：假如归到节点2，</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203164342559.png" alt="image-20201203164342559"></p></li><li><p>代码：</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//方法一：递归</span></span><br><span class="line">        <span class="comment">//终止条件：链表为空或递归到链表的尾节点时</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode cur = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法二：迭代。</p><ul><li>思路：构建新链表，将原链表加入新链表，并调转顺序。</li></ul><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201203165433510.png" alt="image-20201203165433510" style="zoom:67%;" /><p>直到head = null</p><ul><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>; <span class="comment">//null</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode temp = head.next;<span class="comment">//保存后面用的新链表 2—&gt;3-&gt;4-&gt;null</span></span><br><span class="line">            head.next = newHead;      <span class="comment">//null&lt;-1</span></span><br><span class="line">            newHead = head;           <span class="comment">//更新结果链表 1为newHead</span></span><br><span class="line">            head = temp;              <span class="comment">//更新原链表 2—&gt;3-&gt;4-&gt;null中的2为head</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21，合并两个有序链表，easy"><a href="#21，合并两个有序链表，easy" class="headerlink" title="21，合并两个有序链表，easy"></a>21，合并两个有序链表，easy</h4><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><ul><li>方法一：迭代。<ul><li>思路：建立新节点（值为0），再定义一个临时节点temp存储链表。比较 l1.val 与 l2.val 。如果 l1.val &lt; l2.val，temp的下个节点设为l1，并将l1 向右移；如果 l1.val &gt;= l2.val，对 l2 进行上述操作。如果一个链表全部存完为空，将另一个链表剩余节点加入temp.next。最后返回newHead.next。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法一、迭代。新建链表</span></span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode temp = newHead;</span><br><span class="line">        <span class="comment">//l1与l2都不为空，较小的加入新链表</span></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">                temp.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1.val &gt;= l2.val)&#123;</span><br><span class="line">                temp.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.next = l2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.next = l1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：递归。思路和上面一致。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">            newHead = l1;</span><br><span class="line">            newHead.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l1.val &gt;= l2.val)&#123;</span><br><span class="line">            newHead = l2;</span><br><span class="line">            newHead.next = mergeTwoLists(l1,l2.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="83，删除排序链表中的重复元素，easy"><a href="#83，删除排序链表中的重复元素，easy" class="headerlink" title="83，删除排序链表中的重复元素，easy"></a>83，删除排序链表中的重复元素，easy</h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure><ul><li>方法一：直接法。<ul><li>思路：定义辅助单指针temp = head，比较temp与temp.next的值，如果相同，<code>temp.next = temp.next.next</code>，即<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201205102048317.png" alt="image-20201205102048317" style="zoom:67%;" /></li></ul></li></ul><p>​               如果不同，<code>temp = temp.next</code>，指针右移。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.val == temp.next.val)&#123;</span><br><span class="line">                temp.next = temp.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：双指针。<ul><li>思路：快慢指针。快指针用于探路，慢指针为结果链表指针。快指针如果与慢指针的值相等，快指针右移；不相等，保存到慢指针快指针再右移。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode right = head.next;</span><br><span class="line">        ListNode left = head;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(right.val != left.val)&#123;</span><br><span class="line">                left.next = right;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断开与后面重复元素的连接</span></span><br><span class="line">        left.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法三：递归。<ul><li>思路：把链表看成 头节点-&gt;没有重复元素的排序链表，则比较头节点与子链表的头节点，如果相同，返回子链表的头节点；否则，返回head。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归出口 空链表和链表只有头节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = deleteDuplicates(head.next);</span><br><span class="line">        head.next = newHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.val == newHead.val ? newHead : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="83-Ⅱ-删除排序链表中的重复元素，middle"><a href="#83-Ⅱ-删除排序链表中的重复元素，middle" class="headerlink" title="83-Ⅱ.删除排序链表中的重复元素，middle"></a>83-Ⅱ.删除排序链表中的重复元素，middle</h4><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">输出: 2-&gt;3</span><br></pre></td></tr></table></figure><ul><li>方法一：递归。<ul><li>思路：和上面那道题思路类似，但要判断头节点与后面元素是否相同。如果相同，找到第一个不重复的元素开始递归；如果不同，与上面题类似。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//如果head与后面的节点重复，找到第一个不重复的节点，进行递归。</span></span><br><span class="line">        <span class="keyword">if</span>(head.val == head.next.val)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val)&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> deleteDuplicates(head.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode newHead = deleteDuplicates(head.next);</span><br><span class="line">            head.next = newHead;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：双指针-快慢指针。<ul><li>思路：建立虚拟头节点dummy，双指针left指向dummy，right指向head，判断left.next 与 right.val是否相等。如果不相等，两指针右移；如果相等，right需要跳过所有重复数字，再令left的下一位为 right.next（第一个不重复的数字）。最后返回dummy之后的节点。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//双指针，建立虚拟头节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode left = dummy;</span><br><span class="line">        ListNode right = head;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left.next.val != right.next.val)&#123;</span><br><span class="line">                left = left.next;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span> &amp;&amp; left.next.val == right.next.val)&#123;</span><br><span class="line">                    right = right.next;<span class="comment">//right右移直到right.next不是重复数字</span></span><br><span class="line">                &#125;</span><br><span class="line">                left.next = right.next;<span class="comment">//left下一位是去掉重复数字之后的数字</span></span><br><span class="line">                right = right.next;<span class="comment">//继续右移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19，删除链表的倒数第N个节点，middle"><a href="#19，删除链表的倒数第N个节点，middle" class="headerlink" title="19，删除链表的倒数第N个节点，middle"></a>19，删除链表的倒数第N个节点，middle</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><ul><li>方法一：先求出链表长度，就可以找到要删除节点的前一个节点，再使他指向后一个节点即可。<ul><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//先得到长度，再单指针跳过倒数第n个元素 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = getLength(head);</span><br><span class="line">        <span class="keyword">if</span>(length == n) <span class="keyword">return</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：双指针-快慢指针。<ul><li>思路：令快指针先走 n 步，慢指针再与快指针同时出发，直到快指针走到链表尾部，此时慢指针走到要删除节点的前一个节点，跳过即可。<em>有些类似第160题.相交链表</em></li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="comment">//快指针先走n步</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果此时fast为空，说明删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fast走到头，此时slow走到要删除节点的前一个</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24，两两交换链表中的节点，middle"><a href="#24，两两交换链表中的节点，middle" class="headerlink" title="24，两两交换链表中的节点，middle"></a>24，两两交换链表中的节点，middle</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p> <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201206195646801.png" alt="image-20201206195646801" style="zoom:80%;" /><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><ul><li>方法一：递归。<ul><li>思路：两个相邻节点看为一组，组间节点交换（递归实现），再调整组间顺序。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//两个相邻节点为一组，使后一个节点的指针指向前一个，组间指向也需要调整</span></span><br><span class="line">        <span class="comment">//先保存节点2</span></span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        <span class="comment">//头节点下一个节点为递归的结果（1-&gt;4-&gt;3）</span></span><br><span class="line">        head.next = swapPairs(head.next.next);</span><br><span class="line">        <span class="comment">//2-&gt;1-&gt;4-&gt;3</span></span><br><span class="line">        temp.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：迭代。<ul><li>思路：定义一个虚拟头节点dummy，三个指针：left、right用于进行交换，temp用于连接两次迭代之间的节点。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode left = dummy;</span><br><span class="line">        ListNode right = dummy; </span><br><span class="line">        ListNode temp = dummy;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="keyword">null</span> &amp;&amp; right.next != <span class="keyword">null</span> &amp;&amp; right.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分别向前走一步、两步</span></span><br><span class="line">            left = left.next; <span class="comment">// 1</span></span><br><span class="line">            right = right.next.next; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//使下次循环的1指向4</span></span><br><span class="line">            temp.next = right;</span><br><span class="line">            left.next = right.next;</span><br><span class="line">            right.next = left;</span><br><span class="line">            <span class="comment">//2-&gt;1-&gt;3-&gt;4</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">//再使temp、right都指向1.下次迭代时left为3，right为4</span></span><br><span class="line">            temp = left;</span><br><span class="line">            right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="445，两数相加Ⅱ，middle"><a href="#445，两数相加Ⅱ，middle" class="headerlink" title="445，两数相加Ⅱ，middle"></a>445，两数相加Ⅱ，middle</h4><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>进阶：</p><p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出： 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure><ul><li>题目说明：题目中说明<strong>最高位位于链表头部</strong>，即 7243 + 564 = 7807，最后输出的即7 -&gt; 8 -&gt; 0 -&gt; 7。</li><li>方法一：借助栈。<ul><li>思路：逆序先想到栈来存储链表节点的值，相加后再弹出，存储到一个新的链表。注意要记录进位，加到下一位。</li><li>图解：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201207160650072.png" alt="image-20201207160650072" style="zoom:80%;" /></li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//法一：栈+取和的个位</span></span><br><span class="line">        Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(l1.val);</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack2.push(l2.val);</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//相加的进位</span></span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//有非空栈或carry &gt; 0就进行相加操作</span></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty() || carry &gt; <span class="number">0</span>)&#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> sum = carry;<span class="comment">//两数的和</span></span><br><span class="line">            sum += stack1.isEmpty() ? <span class="number">0</span> : stack1.pop();</span><br><span class="line">            sum += stack2.isEmpty() ? <span class="number">0</span> : stack2.pop();</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：while条件里添加carry &gt; 0是为了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:(5) + (5)</span><br><span class="line">输出: 1-&gt;0</span><br></pre></td></tr></table></figure><p>也可以单独判断carry，如果stack1、stack2都为空了但还有进位，则创建新节点加入结果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty() )&#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> sum = carry;<span class="comment">//两数的和</span></span><br><span class="line">            sum += stack1.isEmpty() ? <span class="number">0</span> : stack1.pop();</span><br><span class="line">            sum += stack2.isEmpty() ? <span class="number">0</span> : stack2.pop();</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ListNode node1 = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">            node1.next = head;</span><br><span class="line">            head = node1;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：反转链表。<ul><li>思路：因为要从链尾开始相加，所以先反转链表，两个链表从头开始相加节点的值，再将新的链表反转，得到结果。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//法二：反转链表 3-&gt;4-&gt;2-&gt;7 4-&gt;6-&gt;5  7 -&gt; 0 -&gt; 8 -&gt;7反转输出结果</span></span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        ListNode newl1 = reverse(l1);</span><br><span class="line">        ListNode newl2 = reverse(l2);</span><br><span class="line">       </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">        <span class="keyword">while</span>(newl1 != <span class="keyword">null</span> || newl2 != <span class="keyword">null</span> || carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            sum += newl1 == <span class="keyword">null</span> ? <span class="number">0</span> : newl1.val;</span><br><span class="line">            sum += newl2 == <span class="keyword">null</span> ? <span class="number">0</span> : newl2.val;</span><br><span class="line"></span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line"></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(newl1 != <span class="keyword">null</span>) newl1 = newl1.next;</span><br><span class="line">            <span class="keyword">if</span>(newl2 != <span class="keyword">null</span>) newl2 = newl2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = reverse(dummy.next);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode node = reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>扩展：另一道类似题</p><p><img src="https://pic.leetcode-cn.com/7208a246263722b9757ec7fd94a7c3bf7c17e6f55f2395eae8592f4f5e29323a-image-20200805204018584.png" alt="image-20200805204018584.png"></p><ul><li>题目说明：逆序存储，即<strong>链尾为高位</strong>，相加得到结果仍要逆序输出。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            sum += l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            sum += l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="234，回文链表，easy"><a href="#234，回文链表，easy" class="headerlink" title="234，回文链表，easy"></a>234，回文链表，easy</h4><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><ul><li>方法一：借助栈。<ul><li>思路：将链表节点值放入栈并统计链表长度，循环 l/2 次（只需比较前一半节点值），如果链表的头部值与栈弹出的值不相等，返回false；否则节点右移，最终返回true。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="comment">//将节点值放入栈</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(temp.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        length /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(length-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.pop() != head.val)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：将链表节点值转为集合存储，再使用双指针-头尾指针。<ul><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!list.get(left).equals(list.get(right)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>错误点：<code>if(list.get(left) != list.get(right))</code> 错误</p><ul><li>Integer是对象，比较两个对象相等要用equals</li><li>使用 == 比较Integer类型时，默认缓存 -128 ~ 127，超过此范围会new新对象，两个对象地址不一样则返回false</li></ul></li><li><p>方法三：快慢指针。</p><ul><li>思路：找到中间节点，将后半段链表进行反转，再比较反转后的链表与原链表前半段的值。</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode middle = getMiddle(head);<span class="comment">//链表中点，如果长度是偶数，返回第 l/2 - 1 个节点</span></span><br><span class="line">        ListNode newHead = reverse(middle.next);<span class="comment">//反转后半部分链表</span></span><br><span class="line">        <span class="comment">//比较前半部分和后半部分链表的节点值</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val != newHead.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">                newHead = newHead.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getMiddle</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode left = head;</span><br><span class="line">        ListNode right = head;</span><br><span class="line">        <span class="keyword">while</span>(right.next != <span class="keyword">null</span> &amp;&amp; right.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            left = left.next;</span><br><span class="line">            right = right.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表的中间节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode temp = reverse(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="725，分隔链表，middle"><a href="#725，分隔链表，middle" class="headerlink" title="725，分隔链表，middle"></a>725，分隔链表，middle</h4><p>给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。</p><p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p><p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p><p>返回一个符合上述规则的链表的列表。</p><p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3], k &#x3D; 5</span><br><span class="line">输出: [[1],[2],[3],[],[]]</span><br><span class="line">解释:</span><br><span class="line">输入输出各部分都应该是链表，而不是数组。</span><br><span class="line">例如, 输入的结点 root 的 val&#x3D; 1, root.next.val &#x3D; 2, \root.next.next.val &#x3D; 3, 且 root.next.next.next &#x3D; null。</span><br><span class="line">第一个输出 output[0] 是 output[0].val &#x3D; 1, output[0].next &#x3D; null。</span><br><span class="line">最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k &#x3D; 3</span><br><span class="line">输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br><span class="line">解释:</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure><ul><li><p>方法一：拆分链表。</p><ul><li><p>思路：分类讨论。</p><ul><li>如果链表为空，返回 k 个空节点组成的节点数组。</li><li>如果链表长度l &lt;= k，前 l 个元素是单个节点，后 l - k 个元素为空。</li><li>如果链表长度l &gt; k，每部分至少有 l / k 个节点，前 l % k 部分节点数 + 1。再将原链表分部分存储在结果数组中，每部分为一个链表，部分之间要断开连接。</li></ul></li><li><p>代码：</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode[] splitListToParts(ListNode root, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ListNode[k];</span><br><span class="line">        ListNode[] res = <span class="keyword">new</span> ListNode[k];</span><br><span class="line">        <span class="keyword">int</span> length = getLength(root);</span><br><span class="line">        <span class="keyword">if</span>(length &lt;= k)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; )&#123;</span><br><span class="line">                ListNode temp = root.next;</span><br><span class="line">                root.next = <span class="keyword">null</span>;</span><br><span class="line">                res[i++] = root;</span><br><span class="line">                root = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &lt; k; i++)&#123;</span><br><span class="line">                res[i] = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(length &gt; k)&#123;</span><br><span class="line">        <span class="comment">//length 比 k 大时 每部分存放 l/k 个节点 , 前 l%k 部分存放 l/k+1 个节点</span></span><br><span class="line">        <span class="keyword">int</span> n = length / k;</span><br><span class="line">        <span class="keyword">int</span> m = length % k;</span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[k];<span class="comment">//记录每部分存储元素个数，[4][3][3]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            counts[i] = m-- &gt; <span class="number">0</span> ? n + <span class="number">1</span>: n;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = root;</span><br><span class="line">        <span class="comment">//将节点存储到数组中 counts[0]=4</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = cur;</span><br><span class="line">            <span class="comment">//跳到每部分最末节点 1-&gt;2-&gt;3-&gt;4</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; counts[i] - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//断开每部分之间的连接</span></span><br><span class="line">            ListNode temp = cur.next;</span><br><span class="line">            cur.next = <span class="keyword">null</span>;</span><br><span class="line">            cur = temp;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="328，奇偶链表，middle"><a href="#328，奇偶链表，middle" class="headerlink" title="328，奇偶链表，middle"></a>328，奇偶链表，middle</h4><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL </span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p>说明:</p><p>应当保持奇数节点和偶数节点的相对顺序。<br>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p><ul><li>方法一：双指针，分离链表为奇链表、偶链表，再合并。<ul><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode odd = head;</span><br><span class="line">        ListNode evenHead = head.next;</span><br><span class="line">        ListNode even = evenHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(even != <span class="keyword">null</span> &amp;&amp; even.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            odd.next = odd.next.next;</span><br><span class="line">            odd = odd.next;</span><br><span class="line">            even.next = even.next.next;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125;</span><br><span class="line">        odd.next = evenHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      
      <comments>http://example.com/2020/12/08/LeetCode%E5%88%B7%E9%A2%98%E2%80%94%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>typora使用攻略</title>
      <link>http://example.com/2020/12/01/typora%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</link>
      <guid>http://example.com/2020/12/01/typora%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</guid>
      <pubDate>Tue, 01 Dec 2020 11:43:41 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一、内部跳转&lt;/p&gt;
&lt;p&gt;想在文章开头使用链接直接跳转到指定标题，可以使用快捷键 &lt;code&gt;Ctrl + K&lt;/code&gt; 创建内部链接，并在&lt;code&gt;[]&lt;/code&gt;中填写链接内容，&lt;code&gt;()&lt;/code&gt;中的格式为 &lt;code&gt;#要跳转到的标题&lt;/code</description>
        
      
      
      
      <content:encoded><![CDATA[<p>一、内部跳转</p><p>想在文章开头使用链接直接跳转到指定标题，可以使用快捷键 <code>Ctrl + K</code> 创建内部链接，并在<code>[]</code>中填写链接内容，<code>()</code>中的格式为 <code>#要跳转到的标题</code> 。</p><p>效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20201201194926993.png" alt="img"></p><p>然后按住Ctrl，点击链接，即跳转到想看的标题了。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E4%B8%80/">一</category>
      
      
      <comments>http://example.com/2020/12/01/typora%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>全国高校计算机能力挑战赛</title>
      <link>http://example.com/2020/11/30/%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98%E8%B5%9B/</link>
      <guid>http://example.com/2020/11/30/%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98%E8%B5%9B/</guid>
      <pubDate>Mon, 30 Nov 2020 14:04:37 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;2020真题&quot;&gt;&lt;a href=&quot;#2020真题&quot; class=&quot;headerlink&quot; title=&quot;2020真题&quot;&gt;&lt;/a&gt;2020真题&lt;/h2&gt;&lt;h4 id=&quot;16题：1-N整数中所有立方值的平方根为整数的数的个数&quot;&gt;&lt;a href=&quot;#16题：1-N整数中所有立方值的平方根为整数的数的个数&quot; class=&quot;headerlink&quot; title=&quot;16题：1-N整数中所有立方值的平方根为整数的数的个数&quot;&gt;&lt;/a&gt;16题：1-N整数中所有立方值的平方根为整数的数的个数&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="2020真题"><a href="#2020真题" class="headerlink" title="2020真题"></a>2020真题</h2><h4 id="16题：1-N整数中所有立方值的平方根为整数的数的个数"><a href="#16题：1-N整数中所有立方值的平方根为整数的数的个数" class="headerlink" title="16题：1-N整数中所有立方值的平方根为整数的数的个数"></a>16题：1-N整数中所有立方值的平方根为整数的数的个数</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 10</span><br><span class="line">输出： 3</span><br></pre></td></tr></table></figure><ul><li>输入是10，其中1* 1* 1 = 1，平方根是1，为整数<br>输入是4，其中4 * 4 * 4 = 64，平方根是8，为整数<br>输入是8，其中9 * 9 * 9 = 729，平方根是27，为整数<br>输出 3</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mul = i * i * i;</span><br><span class="line">            <span class="keyword">int</span> sqrt = (<span class="keyword">int</span>)Math.sqrt(mul);</span><br><span class="line">            <span class="keyword">if</span>(sqrt * sqrt == mul)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。"><a href="#17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。" class="headerlink" title="17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。"></a>17题：收到N个鸡蛋，每个鸡蛋各有重量，找出M个重量差距最小的鸡蛋摆出一盒出售，输出最重一盒鸡蛋的总重量。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">8 4</span><br><span class="line">11 9 12 5 10 19 8 6  </span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">42</span><br></pre></td></tr></table></figure><ul><li>思路：要找出M个重量差距最小的放在一盒（即一组），可以先将所有鸡蛋的重量（数组中所有元素）从小到大排序，找出每组的<strong>最大值 - 最小值</strong>，其中差值最小的且数组元素总和最大的一组即为所求，输出这组的元素总和。</li><li>实现步骤：<ul><li>将数组进行排序（采用了快速排序，具体讲解请见另一篇博文）</li><li>将N- M + 1组的差值保存在abs数组</li><li>找出abs数组的最小值（与排序后nums的索引相同）</li><li>上面找出的最小值可能有多个元素相同为最小值，从后向前遍历abs数组，找到最小值的那组nums元素，输出它们的和。</li><li>题目要求输入的N和M是整数，鸡蛋重量和最后的输出都是浮点型，输出结果保留两位小数。</li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String str1 = sc.nextLine();</span><br><span class="line">      String str2 = sc.nextLine();</span><br><span class="line">      String[] num = str1.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> N = Integer.parseInt(num[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">int</span> M = Integer.parseInt(num[<span class="number">1</span>]);</span><br><span class="line">      String[] ff = str2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">float</span>[] nums = <span class="keyword">new</span> <span class="keyword">float</span>[N];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">          nums[i] = Float.parseFloat(ff[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//        Arrays.sort(nums);</span></span><br><span class="line">      quickSort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">float</span> res = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//M个重量差距最小 即找出最小差值</span></span><br><span class="line">      <span class="keyword">float</span>[] abs = <span class="keyword">new</span> <span class="keyword">float</span>[N - M + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - M + <span class="number">1</span>; i++)&#123;</span><br><span class="line">              abs[i] = nums[i + M - <span class="number">1</span>] - nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//找出abs中的最小值</span></span><br><span class="line">      <span class="keyword">float</span> min = abs[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; abs.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(abs[i] &lt; min)&#123;</span><br><span class="line">              min = abs[i];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//返回abs[i]中元素的和</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = abs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(min == abs[i])&#123;</span><br><span class="line">              <span class="comment">//3-6 N=8 M=4 i=6</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j = i + (N - M -<span class="number">1</span>); j &gt;= i ; j--)&#123;</span><br><span class="line">                  res += nums[j];</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//题目要求结果保留两位小数</span></span><br><span class="line">      DecimalFormat fnum  =   <span class="keyword">new</span>  DecimalFormat(<span class="string">&quot;##0.00&quot;</span>);</span><br><span class="line">      String dd = fnum.format(res);</span><br><span class="line">      System.out.println(dd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//快速排序</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">float</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//数组有多个元素进行排序</span></span><br><span class="line">      <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">          <span class="keyword">float</span> base = nums[start];<span class="comment">//以要进行排序数组第0个元素为base</span></span><br><span class="line">          <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">          <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">          <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">              <span class="comment">//从右向左找，比base大，right--</span></span><br><span class="line">              <span class="keyword">while</span> (left&lt; right &amp;&amp; nums[right] &gt;= base) &#123;</span><br><span class="line">                  right--;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//比base小，替换left所在位置的数字</span></span><br><span class="line">              nums[left] = nums[right];</span><br><span class="line">              <span class="comment">//从左向右找，比base小，left++</span></span><br><span class="line">              <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= base)&#123;</span><br><span class="line">                  left++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//比base大，替换right所在位置的数字</span></span><br><span class="line">              nums[right] = nums[left];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//交换base与此时left、right指向的元素</span></span><br><span class="line">          <span class="keyword">float</span> temp = nums[left];</span><br><span class="line">          nums[left] = base;<span class="comment">//此时left=right，用base替换这个位置的数字</span></span><br><span class="line">          base = temp;</span><br><span class="line">          <span class="comment">//排列比base小的数字的数组</span></span><br><span class="line">          quickSort(nums, start, left - <span class="number">1</span>);</span><br><span class="line">          <span class="comment">//排列比base大的数字的数组</span></span><br><span class="line">          quickSort(nums, left + <span class="number">1</span>, end);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201130161528809.png" alt="在这里插入图片描述"></li></ul><h4 id="19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y-求当天饮料店两种饮料的销量"><a href="#19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y-求当天饮料店两种饮料的销量" class="headerlink" title="19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y 求当天饮料店两种饮料的销量"></a>19题：一种每瓶含奶粉15g茶粉5g，另一种每瓶含奶粉10g茶粉10g。设某天消耗的奶粉和茶粉分别为x和y 求当天饮料店两种饮料的销量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：400 300</span><br><span class="line">输出：10 25</span><br></pre></td></tr></table></figure><ul><li>方法一：数学方法，解一元二次方程组。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">    <span class="comment">//15 * m + 10 * n = 400   5 * m + 10 * n = 300</span></span><br><span class="line">    System.out.println((a - b) / <span class="number">10</span> + <span class="string">&quot; &quot;</span> + (<span class="number">3</span> * b - a) / <span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a>模拟题</h2><h4 id="题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。"><a href="#题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。" class="headerlink" title="题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。"></a>题目1：给定字符数组，统计字母类型（a-z）、数字类型（0-9）和符号类型（除字母、数字及空格以外的其他字符）的字符出现次数。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Hello World!</span><br><span class="line">输出：</span><br><span class="line">a-z 10</span><br><span class="line">0-9 0</span><br><span class="line">others 1</span><br></pre></td></tr></table></figure><ul><li>ASCII 码一共规定了128个字符的编码，0-31及127是控制字符或通信专用字符，32-126是字符，其中：32为空格，48-57为0~9十个阿拉伯数字，65-90为26个大写英文字母，97-122为26个小写英文字母。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String input = in.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> count1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count3 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count4 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">          <span class="keyword">char</span> temp = input.charAt(i);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">65</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">90</span> || <span class="number">97</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">              count1++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">48</span> &lt;= temp &amp;&amp; temp &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">              count2++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//空格</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(temp &lt;= <span class="number">32</span>)</span><br><span class="line">              count3++;</span><br><span class="line">          <span class="keyword">else</span> count4++;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;a-z&quot;</span> + <span class="string">&quot; &quot;</span> + count1);</span><br><span class="line">      System.out.println(<span class="string">&quot;0-9&quot;</span> + <span class="string">&quot; &quot;</span> + count2);</span><br><span class="line">      System.out.println(<span class="string">&quot;others&quot;</span> + <span class="string">&quot; &quot;</span> + count4);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="题目2：输入第一行，数组中元素的个数-第二行，N个正整数，空行隔开-输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间"><a href="#题目2：输入第一行，数组中元素的个数-第二行，N个正整数，空行隔开-输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间" class="headerlink" title="题目2：输入第一行，数组中元素的个数 第二行，N个正整数，空行隔开 输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间"></a>题目2：输入第一行，数组中元素的个数 第二行，N个正整数，空行隔开 输出：3合数区间的个数。连续3个元素均为合数的区间为3合数区间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">7</span><br><span class="line">6 8 4 9 7 5 8</span><br><span class="line">输出：</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li>合数即 除了能被1和它本身整除，还能被其他数整除。与质数相对，质数也叫素数。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     <span class="keyword">int</span> N = sc.nextInt();<span class="comment">//N个整数</span></span><br><span class="line">     <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">         nums[i] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!isPrime(nums[i]) &amp;&amp; !isPrime(nums[i + <span class="number">1</span>]) &amp;&amp; !isPrime(nums[i + <span class="number">2</span>])) count++;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(count);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//返回true,不是合数;返回false,是合数</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="comment">//质数不小于2    2，3，5，7。。。</span></span><br><span class="line">     <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(n); i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="题目3：统计1-N之间所有平方数的个数"><a href="#题目3：统计1-N之间所有平方数的个数" class="headerlink" title="题目3：统计1-N之间所有平方数的个数"></a>题目3：统计1-N之间所有平方数的个数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：50</span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = (<span class="keyword">int</span>)Math.sqrt(i);</span><br><span class="line">        <span class="keyword">if</span>(m * m == i)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。"><a href="#题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。" class="headerlink" title="题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。"></a>题目4：由N个整数组成的数组，连续K个元素构成一个区间，称为K区间。一个K区间内所有素数和记为Sk，输出所有K区间的最大Sk值。第一行是两个整数N和K，第二行为N个数，输出最大Sk值。</h4><p>示例1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：8 2</span><br><span class="line">     12 23 27 34 19 17 45 8</span><br><span class="line">输出：36</span><br></pre></td></tr></table></figure><ul><li>方法一： 双重for循环。建立一个数组res存储所有K区间的Sk值。第一层遍历所有的N - K + 1个区间，第二层遍历区间的K个元素，如果有素数，加入到res[i]中，最后在结果数组res中取最大值。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2_19</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">      <span class="keyword">int</span> K = sc.nextInt();</span><br><span class="line">      <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">          nums[i] = sc.nextInt();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//区间个数</span></span><br><span class="line">      <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[N - K + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + K; j++) &#123;</span><br><span class="line">              <span class="comment">//是素数</span></span><br><span class="line">              <span class="keyword">if</span> (isPrime(nums[j])) &#123;</span><br><span class="line">                  res[i] += nums[j];</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> (res[i] &gt; max) &#123;</span><br><span class="line">              temp = max;</span><br><span class="line">              max = res[i];</span><br><span class="line">              res[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(max);</span><br><span class="line">      <span class="comment">//        Arrays.sort(res);</span></span><br><span class="line">      <span class="comment">//        System.out.println(res[N - K]);</span></span><br><span class="line">      ｝</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//判断是否是素数</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (a &lt; <span class="number">2</span>) &#123;<span class="comment">// 素数不小于2</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(a); i++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;<span class="comment">// 若能被整除，则说明不是素数，返回false</span></span><br><span class="line">                  flag = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">break</span>;<span class="comment">// 跳出循环</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> flag;</span><br><span class="line">  &#125;</span><br><span class="line">  ｝</span><br></pre></td></tr></table></figure></li><li>测试<br> <img src="https://img-blog.csdnimg.cn/20201127150704668.PNG#pic_center" alt="在这里插入图片描述"></li></ul><h4 id="题目5：由N个整数组成的数组，其中连续K（K-lt-200）个元素构成一个区间，称为K区间。-一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。"><a href="#题目5：由N个整数组成的数组，其中连续K（K-lt-200）个元素构成一个区间，称为K区间。-一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。" class="headerlink" title="题目5：由N个整数组成的数组，其中连续K（K &lt;= 200）个元素构成一个区间，称为K区间。 一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。"></a>题目5：由N个整数组成的数组，其中连续K（K &lt;= 200）个元素构成一个区间，称为K区间。 一个K区间中任意两个数求其差值的绝对值其中最大的绝对值记为Dk。</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入：8 2</span><br><span class="line">     12 23 27 34 35 36 8 45</span><br><span class="line">输出：37</span><br></pre></td></tr></table></figure><ul><li>方法一：和另一道题类似，在双重循环中定义最大值max，最小值min为K区间首个元素，下面再进行判断是否还有比max大的重新确定为max，比min小的重新确定为min。max-min即为Dk，保存在数组res中，res长度为N - K + 1，输出即为res中的最大值。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> K = input.nextInt();</span><br><span class="line">        <span class="comment">//先划分为 N-K+1 个 K区间，在区间内排序，计算最大绝对值</span></span><br><span class="line">        <span class="comment">//N-K+1 数组的区间数</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[N - K + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;<span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + K ; j++) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                min = nums[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt; max) &#123;</span><br><span class="line">                    max = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; min) &#123;</span><br><span class="line">                    min = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res[i] = max - min;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        Arrays.sort(res);</span></span><br><span class="line"><span class="comment">//        System.out.println(res[N - K]);</span></span><br><span class="line">        System.out.println(Dk(res));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//找到数组最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Dk</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max)&#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试结果<br><img src="https://img-blog.csdnimg.cn/20201127211427402.png" alt="在这里插入图片描述"></li></ul><h4 id="题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。"><a href="#题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。" class="headerlink" title="题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。"></a>题目6：字母连连看，给定一个由小写英文字母组成的字符串，如果字符串中有两个连续的字母相同，则这两个字母可同时消除，并不断重复该操作，直到不能消除为止。</h4><p>示例1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：abbcddcaba</span><br><span class="line">输出：YES</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：asdfghhgf</span><br><span class="line">输出：asd</span><br></pre></td></tr></table></figure><ul><li>方法一：借助辅助栈。<ul><li>若栈为空，将输入字母入栈。否则，比较栈顶元素与下一个入栈的字母，若相等，则弹出栈顶元素；若不同，入栈。最后判断栈是否为空，若空，输出YES；若栈不为空，倒序输出栈中元素。<ul><li> 借助StringBuilder，将栈中元素加入，再逆序打印。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String s = sc.next();</span><br><span class="line">      Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">          <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">          chars[i] = s.charAt(i);</span><br><span class="line">          <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">              <span class="keyword">if</span> (stack.peek() != chars[i]) &#123;</span><br><span class="line">                  stack.push(chars[i]);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> stack.pop();</span><br><span class="line">          &#125; <span class="keyword">else</span></span><br><span class="line">              stack.push(chars[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断</span></span><br><span class="line">      <span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line">          System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">          <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">              sb.append(stack.pop());</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(sb.reverse());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>方法二：与上面思路类似，改为使用list实现。最后一步无需逆序打印，直接遍历输出结果。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     String s = sc.next();</span><br><span class="line">     List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">         <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">         chars[i] = s.charAt(i);</span><br><span class="line">         <span class="keyword">if</span>(!list.isEmpty()) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!list.contains(chars[i])) &#123;</span><br><span class="line">                 list.add(chars[i]);</span><br><span class="line">             &#125; <span class="keyword">else</span> list.remove(list.get(list.size() - <span class="number">1</span>));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> list.add(chars[i]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (list.isEmpty()) System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">char</span> a : list) &#123;</span><br><span class="line">             System.out.print(a);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AB%9E%E8%B5%9B/">竞赛</category>
      
      
      <category domain="http://example.com/tags/competitions/">competitions</category>
      
      
      <comments>http://example.com/2020/11/30/%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98%E8%B5%9B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java-Scanner类</title>
      <link>http://example.com/2020/11/28/Java-Scanner%E7%B1%BB/</link>
      <guid>http://example.com/2020/11/28/Java-Scanner%E7%B1%BB/</guid>
      <pubDate>Sat, 28 Nov 2020 13:00:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Java-Scanner类&quot;&gt;&lt;a href=&quot;#Java-Scanner类&quot; class=&quot;headerlink&quot; title=&quot;Java Scanner类&quot;&gt;&lt;/a&gt;Java Scanner类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用于获取用户输入&lt;br&gt;语法：&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Scanner s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可通过调用下列函数&lt;code&gt;nextDouble()&lt;/code&gt;，&lt;code&gt;nextFloat&lt;/code&gt;，&lt;code&gt;nextInt()&lt;/code&gt;，&lt;code&gt;nextLine()&lt;/code&gt;，&lt;code&gt;nextLong()&lt;/code&gt;，&lt;code&gt;nextShot()&lt;/code&gt;读取用户在命令行输入的各种数据类型　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;next()与nextLine()区别：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Java-Scanner类"><a href="#Java-Scanner类" class="headerlink" title="Java Scanner类"></a>Java Scanner类</h2><ul><li><p>用于获取用户输入<br>语法：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure></li><li><p>可通过调用下列函数<code>nextDouble()</code>，<code>nextFloat</code>，<code>nextInt()</code>，<code>nextLine()</code>，<code>nextLong()</code>，<code>nextShot()</code>读取用户在命令行输入的各种数据类型　</p></li><li><p>next()与nextLine()区别：</p>  <a id="more"></a><ul><li>next() : </li></ul><ol><li>一定要读到有效字符结束输入</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。<ol start="3"><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。<br>总之就是<strong>遇到空格停止扫描</strong></li></ol><ul><li>nextLine()：</li></ul><ol><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。<br>总之就是<strong>以回车为停止扫描</strong></li></ol></li></ol></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入：&quot;</span>);</span><br><span class="line">String s = sc.next();<span class="comment">//Hello World!</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p>  测试效果：<br><img src="https://img-blog.csdnimg.cn/20201127160744149.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入：&quot;</span>);</span><br><span class="line">String s = sc.nextLine();<span class="comment">//Hello World!</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p>  测试效果：<br><img src="https://img-blog.csdnimg.cn/20201127160901915.png" alt="在这里插入图片描述"></p><ul><li><p>控制台输入一个可变长度数组</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String[] strArray = <span class="keyword">null</span>;</span><br><span class="line">strArray = sc.nextLine().split(<span class="string">&quot;\\s*,\\s*&quot;</span>);  <span class="comment">// &#x27;,&#x27;分割，前后可以有空格</span></span><br><span class="line"><span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[strArray.length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; strArray.length; i++) &#123;</span><br><span class="line">    intArray[i] = Integer.parseInt(strArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制台输入一个二维数组</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> System.out.print(<span class="string">&quot;二维数组的行数：&quot;</span>);</span><br><span class="line"> <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line"> System.out.println(<span class="string">&quot;二维数组的列数：&quot;</span>);</span><br><span class="line"> <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line"> <span class="keyword">int</span>[][]matrix = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line"> sc.nextLine();<span class="comment">//用来跳过行列后的回车符</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++)&#123;</span><br><span class="line">         matrix[i][j] = sc.nextInt();</span><br><span class="line">         System.out.print(matrix[i][j] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 测试效果：<br><img src="https://img-blog.csdnimg.cn/20201128205414284.PNG" alt="在这里插入图片描述"></p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/Scanner%E7%B1%BB/">Scanner类</category>
      
      
      <comments>http://example.com/2020/11/28/Java-Scanner%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
