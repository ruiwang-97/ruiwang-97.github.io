<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Tue, 27 Oct 2020 08:16:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hexo攻略-添加分类</title>
      <link>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</link>
      <guid>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</guid>
      <pubDate>Tue, 27 Oct 2020 07:22:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Hexo攻略-添加分类&quot;&gt;&lt;a href=&quot;#Hexo攻略-添加分类&quot; class=&quot;headerlink&quot; title=&quot;Hexo攻略-添加分类&quot;&gt;&lt;/a&gt;Hexo攻略-添加分类&lt;/h2&gt;&lt;h3 id=&quot;1-创建“分类”选项&quot;&gt;&lt;a href=&quot;#1-创建“分类”选项&quot; class=&quot;headerlink&quot; title=&quot;1.创建“分类”选项&quot;&gt;&lt;/a&gt;1.创建“分类”选项&lt;/h3&gt;&lt;p&gt;在命令窗口输入下方命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; hexo new page categories&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Hexo攻略-添加分类"><a href="#Hexo攻略-添加分类" class="headerlink" title="Hexo攻略-添加分类"></a>Hexo攻略-添加分类</h2><h3 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h3><p>在命令窗口输入下方命令</p><blockquote><p> hexo new page categories</p></blockquote><a id="more"></a><p>/source/categories文件夹下会有index.md文件，打开后内容默认为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-10-26 19:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: categories到内容中，添加后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="2-新建文章并添加“categories”属性"><a href="#2-新建文章并添加“categories”属性" class="headerlink" title="2.新建文章并添加“categories”属性"></a>2.新建文章并添加“categories”属性</h3><p>在命令行输入下方命令创建新文章</p><blockquote><p>hexo n “新文章名称”  </p></blockquote><p>在/source/_posts下自动生成.md文件，打开为其添加categories属性。下方的categories:Hexo攻略，表示这篇文章添加到到“Hexo攻略”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo攻略-添加分类及标签</span><br><span class="line">date: 2020-10-27 15:22:42</span><br><span class="line">categories: Hexo攻略</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”即可看到该分类下的所有文章。效果如图。</p><p><img src="/images/cate.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Hexo%E6%94%BB%E7%95%A5/">Hexo攻略</category>
      
      
      
      <comments>http://example.com/2020/10/27/Hexo%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java的值传递机制</title>
      <link>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</link>
      <guid>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Tue, 27 Oct 2020 05:56:47 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;Java中方法的值传递方式只有一种：值传递。&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>Java中方法的值传递方式只有一种：值传递。</strong></p><a id="more"></a><p>值传递机制：</p><ul><li>如果参数是基本数据类型，此时实参赋给形参的是<strong>实参真实存储的数据值</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;排序前：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);</span><br><span class="line">     valueTransferTest t=<span class="keyword">new</span> valueTransferTest();</span><br><span class="line">     t.swap(a,b);</span><br><span class="line">     System.out.println(<span class="string">&quot;排序后：&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);<span class="comment">//a = 10,b = 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp=m;</span><br><span class="line">     m=n;</span><br><span class="line">     n=temp;</span><br><span class="line">     <span class="comment">// System.out.println(&quot;m=&quot;+m+&quot;,n=&quot;+n);//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实参a,b将值传给形参，排序后a,b的值未发生改变，对实参值没有影响。</p><p>内存中</p><p><img src="/images/image_1.jpg"></p><ul><li>如果参数是引用数据类型，此时实参赋给形参的是<strong>实参存储数据的地址值</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> Data data = <span class="keyword">new</span> Data();</span><br><span class="line"></span><br><span class="line"> data.m = <span class="number">10</span>; data.n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 10, n = 20</span></span><br><span class="line"> swap(data);</span><br><span class="line">     System.out.println(<span class="string">&quot;m = &quot;</span> + data.m + <span class="string">&quot;, n = &quot;</span> + data.n);<span class="comment">//m = 20, n = 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Data data)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> temp = data.m;</span><br><span class="line"> data.m = data.n;</span><br><span class="line"> data.n = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存中显示</p><p><img src="/images/image_2.jpg"></p><p>参数保存的是实际对象的地址值，改变的只是地址值指向的堆内存中的实际对象，<strong>并没有真正改变参数</strong>，<strong>参数的地址值没有变</strong>。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java/">Java</category>
      
      
      <category domain="http://example.com/tags/JavaSE/">JavaSE</category>
      
      
      <comments>http://example.com/2020/10/27/Java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HashMap</title>
      <link>http://example.com/2020/10/26/HashMap/</link>
      <guid>http://example.com/2020/10/26/HashMap/</guid>
      <pubDate>Mon, 26 Oct 2020 12:40:21 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;Map实现类之一：HashMap&quot;&gt;&lt;a href=&quot;#Map实现类之一：HashMap&quot; class=&quot;headerlink&quot; title=&quot;Map实现类之一：HashMap&quot;&gt;&lt;/a&gt;Map实现类之一：HashMap&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()&lt;/li&gt;
&lt;li&gt;所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="Map实现类之一：HashMap"><a href="#Map实现类之一：HashMap" class="headerlink" title="Map实现类之一：HashMap"></a>Map实现类之一：HashMap</h4><ul><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li></ul><a id="more"></a><ul><li>一个key-value构成一个entry</li><li>所有的entry构成的集合是Set:无序的、不可重复的</li><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li><li>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul><h5 id="HashMap的存储结构"><a href="#HashMap的存储结构" class="headerlink" title="HashMap的存储结构"></a>HashMap的存储结构</h5><p><strong>数组+链表  （jdk7及之前）</strong></p><img src="https://img-blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img" style="zoom:67%;" /><p><strong>数组+链表+红黑树 （jdk 8）</strong></p><img src="https://img-blog.csdn.net/20170803204952538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG9naW5fc29uYXRh/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="存储结构" style="zoom:67%;" /><h5 id="HashMap添加元素的过程"><a href="#HashMap添加元素的过程" class="headerlink" title="HashMap添加元素的过程"></a>HashMap添加元素的过程</h5><p>HashMap map=new HashMap();</p><p>实例化后底层创建了长度是<strong>16</strong>的一维数组Entry[] table。这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 </p><p> 每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</p><p>…可能已经多次put…</p><p>map.put(key1,value1):</p><ol><li><p>调用key1所在类的HashCode()方法计算key1的哈希值</p></li><li><p>此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置</p><p>1).如果此位置上的数据为空，此时的key1-value1（即entyr1）添加成功。 —-&gt;情况1</p><p>2).如果此位置已存在一个或多个数据（以链表形式存在），比较key1和已存在数据的哈希值</p><ul><li>key1的哈希值与已存在数据的哈希值都不相同，添加成功。 —-&gt;情况2</li><li>key1的哈希值与key2的哈希值相同，调用key1所在类的equals()方法<ul><li>equals()返回false：此时key1-value1添加成功。   —&gt;情况3</li><li>equals()返回true：value1替换value2</li></ul></li></ul></li></ol><ul><li><p>对于情况2、3添加成功的元素a与已存在的元素以链表形式存储—7上8下</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/21/167cf3bc3724604a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p></li></ul><h5 id="HashMap的扩容"><a href="#HashMap的扩容" class="headerlink" title="HashMap的扩容"></a>HashMap的扩容</h5><h6 id="jdk7及以前"><a href="#jdk7及以前" class="headerlink" title="jdk7及以前"></a>jdk7及以前</h6><ul><li><pre><code> DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</code></pre></li><li><pre><code> DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</code></pre></li><li><pre><code> threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</code></pre></li><li><pre><code> TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</code></pre></li><li><pre><code> MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</code></pre></li></ul><p>​       当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的默认值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么<strong>当HashMap中元素个数超过$16<em>0.75 = 12$（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 $2</em>16=32$，即扩大一倍</strong>，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p><h6 id="jdk8"><a href="#jdk8" class="headerlink" title="jdk8"></a>jdk8</h6><p> 相较于jdk7在底层实现方面的不同：</p><ol><li><p>new HashMap():底层没有创建一个长度为16的数组</p></li><li><p>jdk 8底层的数组是：<strong>Node[]</strong>,而非Entry[]</p></li><li><p>首次调用put()方法时，底层创建长度为16的数组</p></li><li><p>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p><p>4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）<br>4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java/">Java</category>
      
      
      <category domain="http://example.com/tags/JavaSE/">JavaSE</category>
      
      
      <comments>http://example.com/2020/10/26/HashMap/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
