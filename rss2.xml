<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rui</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>去摘遥不可及的星星</description>
    <pubDate>Wed, 23 Jun 2021 14:34:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>微信红包怎么测试</title>
      <link>http://example.com/2021/06/23/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E6%80%8E%E4%B9%88%E6%B5%8B%E8%AF%95/</link>
      <guid>http://example.com/2021/06/23/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E6%80%8E%E4%B9%88%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Wed, 23 Jun 2021 14:29:58 GMT</pubDate>
      
      <description>&lt;p&gt;分为功能测试、性能测试、兼容性测试、界面测试、安全测试、中断测试几大方面。&lt;/p&gt;
&lt;h2 id=&quot;功能测试&quot;&gt;功能测试&lt;/h2&gt;
&lt;h4 id=&quot;发送给单个好友&quot;&gt;1）发送给单个好友&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>分为功能测试、性能测试、兼容性测试、界面测试、安全测试、中断测试几大方面。</p><h2 id="功能测试">功能测试</h2><h4 id="发送给单个好友">1）发送给单个好友</h4><a id="more"></a><p>①发送金额，留言，表情</p><blockquote><p>正确的金额+无留言+无表情 　</p><p>错误的金额+无留言+无表情 　</p><p>正确的金额+有留言+无表情 　</p><p>错误的金额+有留言+无表情</p><p>正确的金额+无留言+有表情 　</p><p>错误的金额+无留言+有表情 　</p><p>正确的金额+有留言+有表情 　</p><p>错误的金额+有留言+有表情</p></blockquote><p>②金额为0.01~200，需要测试0，0.01，1，199.99，200，200.01这些边界值。</p><p>③留言是否可以输入数字，汉字，英文，特殊字符或它们的组合</p><p>④输入超长文本是是否有限制或提示</p><p>⑤添加表情时选择收藏的表情（动图/静图）</p><p>⑥是否可以录制表情</p><p>⑦表情添加后是否可删除</p><p><strong>付款</strong></p><p>①可以使用零钱/银行卡/添加新卡，需要考虑</p><p>金额＞零钱/银行卡余额，金额＜零钱/银行卡余额，金额=零钱/银行卡余额 三种情况</p><p>②使用指纹确认付款</p><p>③使用密码确认付款</p><p>④发送成功后，账户减少对应金额，退回原界面</p><p>⑤24小时后若没有领取，将退回原账户，此时原付款方式增加发出的金额</p><p><strong>好友</strong></p><p>① 金额、留言、表情可以正常显示</p><p>② 点击领取红包，零钱中增加相应的金额，再次点击只能看到信息不能领取</p><p>③ 24小时之内没有领取的红包将无法领取，显示已过期，并无法查看到金额</p><h4 id="发送群红包">2）发送群红包</h4><p>（部分相似）</p><p>①选择为普通红包，每个人领取的金额相同；拼手气红包，每个人收到的金额随机</p><p>②红包个数（1-100）：0，1，2，大于群成员人数，小于群成员人数，等于群成员人数，99，100，101，小数，中文、英文、特殊字符、表情或者他们的组合</p><p>③群里的人都可以抢一次，且最多一次</p><h2 id="性能测试">性能测试</h2><p>①打开和发送红包的响应时间不能超过2s，高并发场景下不能超过3s</p><p>②耗电量</p><p>③占内存大小</p><p>④消耗流量</p><h2 id="兼容性测试">兼容性测试</h2><p>①苹果手机和安卓手机</p><p>②ios不同版本</p><p>③安卓不同机型</p><p>④微信电脑端可以抢红包</p><h2 id="界面测试">界面测试</h2><p>①设计风格是否一致</p><p>②排版是否合理</p><p>③界面没有错别字</p><p>④易学、易理解</p><h2 id="中断测试">中断测试</h2><p>前后台切换，网络异常，低电量，断电，来电，短信等</p><h2 id="安全测试">安全测试</h2><p>①给好友发红包，是否会显示异地登录提醒</p><p>②红包发送失败，余额和银行卡的钱是否退回</p><p>③红包发送成功，是否会收到微信支付的通知</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/">测试用例设计</category>
      
      
      
      <comments>http://example.com/2021/06/23/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E6%80%8E%E4%B9%88%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java中的锁机制—synchronized关键字</title>
      <link>http://example.com/2021/06/22/Java%E4%B8%AD%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6%E2%80%94synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <guid>http://example.com/2021/06/22/Java%E4%B8%AD%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6%E2%80%94synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <pubDate>Tue, 22 Jun 2021 07:14:49 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;java中的锁机制&quot;&gt;Java中的锁机制&lt;/h2&gt;
&lt;p&gt;Java中多线程加锁机制主要有两种：一种是jdk实现的Lock锁，一种是JVM底层实现的synchronized关键字。&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;synchronized用于方法或代码块；Lock是一个接口，实现类有ReentrantLock可重入锁、ReadWriteLock读写锁。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;synchronized是隐式锁，无需手动开启和关闭，因此不会出现死锁；Lock锁是显示锁，需要手动开启和关闭，如果开启和关闭次数不一致，可能发生死锁。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="java中的锁机制">Java中的锁机制</h2><p>Java中多线程加锁机制主要有两种：一种是jdk实现的Lock锁，一种是JVM底层实现的synchronized关键字。</p><p>区别：</p><ul><li><p>synchronized用于方法或代码块；Lock是一个接口，实现类有ReentrantLock可重入锁、ReadWriteLock读写锁。</p></li><li><p>synchronized是隐式锁，无需手动开启和关闭，因此不会出现死锁；Lock锁是显示锁，需要手动开启和关闭，如果开启和关闭次数不一致，可能发生死锁。</p></li></ul><a id="more"></a><p>在JDK1.6后，对synchronized进行了很多优化，如偏向锁、轻量级锁等，synchronized的性能已经与Reentrantlock大致相同，除非要使用Reentrantlock的一些高级功能（实现公平锁、中断锁等），一般推荐使用synchronized关键字来实现加锁机制。</p><h2 id="synchronized锁机制">synchronized锁机制</h2><p>在对象的MarkWord中记录一个锁状态，锁的状态有四种：<strong>无锁、偏向锁、轻量级锁、重量级锁</strong>。</p><p>随着竞争的增加，锁的使用情况如下:</p><blockquote><p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p></blockquote><p>其中偏向锁和轻量级锁是从 JDK 6 时引入的，在 JDK 6 中默认开启。 锁的升级（锁膨胀）是单向的，只能从低到高（从左到右）。不会出现锁的降级。</p><p><img src="https://img-blog.csdnimg.cn/20210622151128813.png" /></p><h3 id="锁状态转换">锁状态转换</h3><p><img src="https://img-blog.csdnimg.cn/20210622151234703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p><h4 id="偏向锁">①偏向锁</h4><p>当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设为“01” （可偏向），即偏向模式，在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要花费CAS操作来加锁和解锁，而只需简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><h4 id="轻量级锁">②轻量级锁</h4><p>当两个线程交替获取一个对象的锁时，偏向锁会升级为轻量级锁。这个阶段线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，则自旋获取锁，当自旋获取锁仍然失败时，表示存在其他线程竞争锁(两条或两条以上的线程竞争同一个锁)，则轻量级锁会膨胀成重量级锁。</p><h4 id="自旋锁">自旋锁</h4><p>如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。但是线程自旋是需要消耗CPU的。所以自旋的次数一般控制在一个范围内，例如10,100等，在超出这个范围后，自旋锁会升级为阻塞锁。</p><h4 id="重量级锁">③重量级锁</h4><p>通过系统的线程互斥锁来实现的，代价最昂贵。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java%E5%B9%B6%E5%8F%91/">Java并发</category>
      
      
      
      <comments>http://example.com/2021/06/22/Java%E4%B8%AD%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6%E2%80%94synchronized%E5%85%B3%E9%94%AE%E5%AD%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java类的初始化顺序（代码测试）</title>
      <link>http://example.com/2021/06/16/Java%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%EF%BC%89/</link>
      <guid>http://example.com/2021/06/16/Java%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%EF%BC%89/</guid>
      <pubDate>Wed, 16 Jun 2021 08:09:01 GMT</pubDate>
      
      <description>&lt;p&gt;Java类的初始化顺序为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态变量/静态代码块—main()方法—非静态变量/代码块—构造器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码验证：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Java类的初始化顺序为</p><p><strong>静态变量/静态代码块—main()方法—非静态变量/代码块—构造器</strong></p><p>代码验证：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadClassTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">2</span>;<span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态变量a=&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;我在静态代码块里&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在代码块里&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量b=&quot;</span> + b);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在main方法里&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">new</span> LoadClassTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadClassTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在构造器里&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/20210616155820829.png" /></p><p>注：关于成员变量和类变量的区别可以看<a href="https://blog.csdn.net/qq_39181839/article/details/114264566?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162383035716780264094464%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162383035716780264094464&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-114264566.nonecase&amp;utm_term=%E5%8F%98%E9%87%8F&amp;spm=1018.2226.3001.4450">这一篇</a></p><p>JVM自动执行静态变量/静态代码块，每个静态代码块只被执行一次。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadClassTest</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stu[] stu = <span class="keyword">new</span> Stu[<span class="number">3</span>];</span><br><span class="line">        stu[<span class="number">0</span>] = <span class="keyword">new</span> Stu(<span class="string">&quot;小李&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        stu[<span class="number">1</span>] = <span class="keyword">new</span> Stu(<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">        stu[<span class="number">2</span>] = <span class="keyword">new</span> Stu(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Stu s : stu)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name：&quot;</span> + s.getName() + <span class="string">&quot;,id：&quot;</span> + s.getId() + <span class="string">&quot;, gender：&quot;</span> + s.getGender());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> gender;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Random generator = <span class="keyword">new</span> Random();</span><br><span class="line">        nextId = generator.nextInt(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        id = nextId;</span><br><span class="line">        nextId++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(String name, <span class="keyword">char</span> gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(<span class="keyword">char</span> gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Student #&quot;</span> + nextId , gender);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 测试结果： <img src="https://img-blog.csdnimg.cn/20210616161840494.png" /></p><p>可见静态代码块只执行了一次，而代码块随类的加载而执行。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/">静态代码块</category>
      
      
      <comments>http://example.com/2021/06/16/Java%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>旋转数组（0°-360°）</title>
      <link>http://example.com/2021/06/06/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%EF%BC%880%C2%B0-360%C2%B0%EF%BC%89/</link>
      <guid>http://example.com/2021/06/06/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%EF%BC%880%C2%B0-360%C2%B0%EF%BC%89/</guid>
      <pubDate>Sun, 06 Jun 2021 08:55:54 GMT</pubDate>
      
      <description>&lt;p&gt;6.6的LeetCode周赛&lt;a href=&quot;https://leetcode-cn.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/&quot;&gt;第一题&lt;/a&gt;为旋转数组，与&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-image/&quot;&gt;48题&lt;/a&gt;有些类似。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>6.6的LeetCode周赛<a href="https://leetcode-cn.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/">第一题</a>为旋转数组，与<a href="https://leetcode-cn.com/problems/rotate-image/">48题</a>有些类似。</p><a id="more"></a><h4 id="顺时针旋转90">顺时针旋转90°</h4><p>顺时针转90°，可以通过一行来找规律。 <img src="https://img-blog.csdnimg.cn/20210606163658824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 90度旋转后行转为列，第 i 行变为 第 n - 1 - i 列，则<code>mat[i][j] ——&gt; mat[j][n-1-i]</code></p><h4 id="顺时针旋转180">顺时针旋转180°</h4><p>旋转180°后，第 i 行转到了 第 n - 1 - i 行，同时对应的列也发生了变化，第 j 列转到了 第 n - 1 - j 列。 <img src="https://img-blog.csdnimg.cn/20210606164728125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 则<code>mat[i][j] ——&gt; mat[n-1-i][n-1-j]</code></p><h4 id="顺时针旋转360">顺时针旋转360°</h4><p>旋转360°后，第 i 行转到了 第 i 列，同时对应的列也发生了变化，第 j 列转到了 第 n - 1 - j 行。 <img src="https://img-blog.csdnimg.cn/202106061651270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /> 则<code>mat[i][j] ——&gt; mat[n-1-j][i]</code></p><p>题意中旋转若干次，则可能旋转0°、90°、180°、360°，如果有旋转结果能使mat与target一致，则返回true。</p><h4 id="代码">代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findRotation</span><span class="params">(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span>[][] target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mat.length;</span><br><span class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> c = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> d = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[j][n - i - <span class="number">1</span>] != target[i][j])&#123;</span><br><span class="line">                    a = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="keyword">if</span>(mat[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>] != target[i][j])&#123;</span><br><span class="line">                    b = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="keyword">if</span>(mat[n - j - <span class="number">1</span>][i] != target[i][j])&#123;</span><br><span class="line">                    c = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] != target[i][j])&#123;</span><br><span class="line">                    d = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a || b || c || d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      
      <comments>http://example.com/2021/06/06/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%EF%BC%880%C2%B0-360%C2%B0%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>try-catch-finally执行顺序</title>
      <link>http://example.com/2021/06/03/try-catch-finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link>
      <guid>http://example.com/2021/06/03/try-catch-finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid>
      <pubDate>Thu, 03 Jun 2021 08:50:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;异常处理方式之一：try-catch-finally&quot;&gt;&lt;a href=&quot;#异常处理方式之一：try-catch-finally&quot; class=&quot;headerlink&quot; title=&quot;异常处理方式之一：try-catch-finally&quot;&gt;&lt;/a&gt;异常处理方式之一：try-catch-finally&lt;/h2&gt;&lt;h4 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="异常处理方式之一：try-catch-finally"><a href="#异常处理方式之一：try-catch-finally" class="headerlink" title="异常处理方式之一：try-catch-finally"></a>异常处理方式之一：try-catch-finally</h2><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 变量名<span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式3</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>try代码块中有异常时，会根据异常类型进入相应的catch。</li></ol><ol><li>finally可选，如果有finally，那finally中的代码一定会执行。</li></ol><p>问题：如果try、catch和finally中都有返回值，会返回什么结果呢？</p><h4 id="test1：没有异常"><a href="#test1：没有异常" class="headerlink" title="test1：没有异常"></a>test1：没有异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Try_catch_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String res = test();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在try里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：try&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在catch里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：catch&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在finally里&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的结果：</p><p><img src="https://img-blog.csdnimg.cn/20210603162329852.png" alt=""></p><p>分析：没有异常所以没有执行catch中的代码，执行顺序是try=&gt;finally=&gt;return；</p><h4 id="test2：发生异常"><a href="#test2：发生异常" class="headerlink" title="test2：发生异常"></a>test2：发生异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Try_catch_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String res = test();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在try里&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">5</span> / <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：try&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在catch里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：catch&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在finally里&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的结果：</p><p><img src="https://img-blog.csdnimg.cn/20210603164136790.png" alt=""></p><p>分析：在try中发生异常时，没有正常返回，会在catch中捕获异常。执行顺序是try=&gt;catch=&gt;finally=&gt;return；</p><h4 id="test3：finally中有返回"><a href="#test3：finally中有返回" class="headerlink" title="test3：finally中有返回"></a>test3：finally中有返回</h4><p>上面已经分析了不发生异常时不进入catch，finally的语句又一定会执行。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Try_catch_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String res = test();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在try里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：try&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在catch里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：catch&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在finally里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：finally&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试的结果为：</p><p><img src="https://img-blog.csdnimg.cn/20210603164450246.png" alt=""><br>如果发生异常，进入catch，但最终返回的仍是finally语句的结果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Try_catch_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String res = test();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在try里&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">5</span> / <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：try&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在catch里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：catch&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在finally里&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;返回：finally&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的结果为：</p><p><img src="https://img-blog.csdnimg.cn/20210603164550241.png" alt=""></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>try中没有异常时不会执行catch，出现异常时执行顺序为try-catch-finally</li></ol><ol><li>finally中有return语句时，会忽略try、catch中的返回语句，只返回finally的结果。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/%E5%BC%82%E5%B8%B8/">异常</category>
      
      
      <comments>http://example.com/2021/06/03/try-catch-finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MyBatis防止SQL注入</title>
      <link>http://example.com/2021/06/01/MyBatis%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/</link>
      <guid>http://example.com/2021/06/01/MyBatis%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/</guid>
      <pubDate>Tue, 01 Jun 2021 08:29:53 GMT</pubDate>
      
      <description>&lt;p&gt;MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;p&gt;动态 sql 是 mybatis 的主要特性之一，在mybatis中我们可以把参数传到xml文件，由mybatis对sql及其语法进行解析，mybatis支持使用${}和#{}。&lt;/p&gt;
&lt;p&gt;那么&lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;有什么区别呢？&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><p>动态 sql 是 mybatis 的主要特性之一，在mybatis中我们可以把参数传到xml文件，由mybatis对sql及其语法进行解析，mybatis支持使用${}和#{}。</p><p>那么<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code>有什么区别呢？</p><a id="more"></a><p>mybatis 在<strong>对 sql 语句进行预编译之前，会对 sql 进行动态解析</strong>。</p><h3 id="一">一、<code>#&#123;&#125;</code></h3><p><code>#&#123;&#125;</code>是sql的参数占位符。<code>#&#123;&#125;</code>相当于JDBC中的PreparedStatement，对于传入的参数，在预处理阶段使用 <code>?</code> 代替，真正查询的时候即在数据库管理系统中（DBMS）才代入参数。</p><p>例如：</p><p>mapper.xml中的sql语句: <code>select * from user where name = #&#123;name&#125;;</code> 解析为： <code>select * from user where name = ?;</code> 一个<code>#&#123;&#125;</code>被解析为一个参数占位符 <code>?</code>，不管传入什么参数，打印的sql都是这样的。</p><p>执行时，直接使用编译好的SQL，替换占位符<code>?</code>就可以了。因为<em>SQL注入只能对编译过程起作用</em>，所以这样的方式就很好地避免了SQL注入的问题。</p><h3 id="二">二、<code>$&#123;&#125;</code></h3><p><code>$&#123;&#125;</code>是properties文件中的变量占位符，仅仅为一个纯粹的String替换。</p><p>上面的例子传递参数为 &quot;admin&quot; 时，sql解析为 <code>select * from user where name = &quot;admin&quot;;</code> 预编译之前的 SQL 语句已经不包含变量 name 了。</p><p>如果传递参数为 user;delet user;--，那么sql动态解析阶段之后，预编译之前的sql将变为 <code>select * from user;delete user; -- where name = ?;</code></p><p><code>--</code>之后的语句将作为注释，不起作用，因此本来的一条查询语句偷偷的包含了一个删除表数据的 SQL！</p><h3 id="三总结">三、总结</h3><p>#{}是经过预编译的，是安全的；${}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。</p><h3 id="四sql预编译">四、sql预编译</h3><ol type="1"><li>定义</li></ol><p>sql 预编译指的是数据库驱动在发送 sql 语句和参数给 DBMS 之前对 sql 语句进行编译，这样 DBMS 执行 sql 时，就不需要重新编译。</p><ol start="2" type="1"><li>为什么需要预编译</li></ol><p>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。</p><p>1）预编译阶段可以优化 sql 的执行。</p><p>预编译之后的 sql 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的sql，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。</p><p>2）预编译语句对象可以重复利用。</p><p>把一个 sql 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个sql，可以直接使用这个缓存的 PreparedState 对象。</p><p>mybatis 默认情况下，将对所有的 sql 进行预编译。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/MyBatis/">MyBatis</category>
      
      
      
      <comments>http://example.com/2021/06/01/MyBatis%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二叉树的镜像—输入输出处理</title>
      <link>http://example.com/2021/05/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F%E2%80%94%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%A4%84%E7%90%86/</link>
      <guid>http://example.com/2021/05/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F%E2%80%94%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%A4%84%E7%90%86/</guid>
      <pubDate>Fri, 28 May 2021 04:54:38 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/&quot;&gt;剑指 Offer 27. 二叉树的镜像&lt;/a&gt;&lt;br&gt;比较简单，可以采用递归也可以借助栈操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在处理输入时，建立一个TreeNode类，并生成树，镜像之后比较层序遍历结果。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a><br>比较简单，可以采用递归也可以借助栈操作。</p><p><strong>思路</strong></p><p>在处理输入时，建立一个TreeNode类，并生成树，镜像之后比较层序遍历结果。</p><a id="more"></a><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;<span class="keyword">this</span>.val = val;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main0528</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">mirrorTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归 此函数的作用是返回以root为根节点的镜像树</span></span><br><span class="line">        <span class="comment">//对于左右子节点，递归调用此函数，再对结果进行交换</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode l = mirrorTree(root.right);</span><br><span class="line">        TreeNode r = mirrorTree(root.left);</span><br><span class="line">        root.left = l;</span><br><span class="line">        root.right = r;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//层序遍历打印树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        TreeNode left = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode left1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode right1 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode right = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">        TreeNode left2 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">        TreeNode right2 = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line">        root.left = left;</span><br><span class="line">        root.right = right;</span><br><span class="line">        left.left = left1;</span><br><span class="line">        left.right = right1;</span><br><span class="line">        right.left = left2;</span><br><span class="line">        right.right = right2;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = build();</span><br><span class="line">        bfs(root);</span><br><span class="line">        mirrorTree(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/">LeetCode刷题</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2021/05/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F%E2%80%94%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%A4%84%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>招银提前批SQL题</title>
      <link>http://example.com/2021/05/27/%E6%8B%9B%E9%93%B6%E6%8F%90%E5%89%8D%E6%89%B9SQL%E9%A2%98/</link>
      <guid>http://example.com/2021/05/27/%E6%8B%9B%E9%93%B6%E6%8F%90%E5%89%8D%E6%89%B9SQL%E9%A2%98/</guid>
      <pubDate>Thu, 27 May 2021 13:23:09 GMT</pubDate>
      
      <description>&lt;p&gt;面试馆出的题很简单，奈何平时练的都是select，好久没用过update和delete了。&lt;/p&gt;
&lt;p&gt;以面养面，继续总结！&lt;/p&gt;
&lt;p&gt;题目：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>面试馆出的题很简单，奈何平时练的都是select，好久没用过update和delete了。</p><p>以面养面，继续总结！</p><p>题目：</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20210527211246813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p><p>建表： <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> employees;  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (  </span><br><span class="line">     <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">     <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">     s_x <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">     s_y <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span> (<span class="number">1001</span>,<span class="string">&#x27;张三&#x27;</span>, <span class="number">3000</span>, <span class="number">5000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span> (<span class="number">1002</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="number">2000</span>, <span class="number">1000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span> (<span class="number">1003</span>,<span class="string">&#x27;张五&#x27;</span>, <span class="number">4000</span>, <span class="number">1000</span>); </span><br></pre></td></tr></table></figure></p><p>更新语句：<code>update 表名 set 字段 = 新值 where 条件;</code> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> employees <span class="keyword">set</span> salary_x = <span class="number">9000</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;李四&#x27;</span>;</span><br></pre></td></tr></table></figure> 查询 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(s_x + s_y) <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/MySQl/">MySQl</category>
      
      
      
      <comments>http://example.com/2021/05/27/%E6%8B%9B%E9%93%B6%E6%8F%90%E5%89%8D%E6%89%B9SQL%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java多态之左右</title>
      <link>http://example.com/2021/05/26/Java%E5%A4%9A%E6%80%81%E4%B9%8B%E5%B7%A6%E5%8F%B3/</link>
      <guid>http://example.com/2021/05/26/Java%E5%A4%9A%E6%80%81%E4%B9%8B%E5%B7%A6%E5%8F%B3/</guid>
      <pubDate>Wed, 26 May 2021 07:44:30 GMT</pubDate>
      
      <description>&lt;p&gt;学习Java的人都很熟悉多态。&lt;/p&gt;
&lt;p&gt;多态即事物的多种状态，比如人，分男人女人，也可以分学生老师等。&lt;/p&gt;
&lt;p&gt;多态的实现：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>学习Java的人都很熟悉多态。</p><p>多态即事物的多种状态，比如人，分男人女人，也可以分学生老师等。</p><p>多态的实现：</p><a id="more"></a><ul><li>继承（类 / 实现接口）</li><li>重写</li><li>向上转型 所谓向上转型即由子到父。父类引用指向子类对象。<code>Person p = new Student();</code></li></ul><p>那么Person类和Student类有自己的变量和方法，如果子类有重写的方法，或子类没有父类的方法，或父类的方法私有，在编译和运行时都会出现什么情况呢？</p><p>以下面代码为例： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.age = <span class="number">14</span>;</span><br><span class="line">        <span class="comment">//p.stuNumber=1;编译不通过</span></span><br><span class="line">        p.eat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//p.study();编译不通过</span></span><br><span class="line">        p.talk();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//p.test();//编译不通过</span></span><br><span class="line">        p.test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> stuNumber;<span class="comment">//子类有的属性，父类没有</span></span><br><span class="line">    <span class="keyword">int</span> gender;<span class="comment">//0-男</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生也要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生要学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生也要讲话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> gender;<span class="comment">//0-男</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人要讲话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法不能被重写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我只有父类有哦！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 运行之后的结果：</p><p><img src="https://img-blog.csdnimg.cn/20210526153641647.png" /></p><p>可以总结规律：</p><ol type="1"><li><p>对于成员变量：编译看左边，运行看左边 也就是如果父类中没有子类的变量，编译不通过；子类中也有父类的变量，运行父类的。</p></li><li><p>对于成员方法：编译看左边，运行看右边 父类中没有子类的方法，编译不通过；子类重写了父类的成员方法，运行子类的。</p></li><li><p>对于静态方法：编译看左边，运行看左边 子类重写了父类的静态方法，但还是运行父类的。</p></li></ol><p>再来个例子思考一下： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main0520</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.show();</span><br><span class="line">        B b = <span class="keyword">new</span> C();</span><br><span class="line">        b.show();</span><br><span class="line">        <span class="comment">//成员方法编译看左运行看右</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        show2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 结果是什么呢？</p><p>点个赞再往下拉吧~</p><p>· · ·</p><p>· · ·</p><p>· · ·</p><p>· · ·</p><p>· · · <img src="https://img-blog.csdnimg.cn/20210526154215304.png" alt="在这里插入图片描述" /></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java-SE/">Java SE</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%9A%E6%80%81/">多态</category>
      
      
      <comments>http://example.com/2021/05/26/Java%E5%A4%9A%E6%80%81%E4%B9%8B%E5%B7%A6%E5%8F%B3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL-MVCC、当前读、快照读</title>
      <link>http://example.com/2021/05/24/MySQL-MVCC%E3%80%81%E5%BD%93%E5%89%8D%E8%AF%BB%E3%80%81%E5%BF%AB%E7%85%A7%E8%AF%BB/</link>
      <guid>http://example.com/2021/05/24/MySQL-MVCC%E3%80%81%E5%BD%93%E5%89%8D%E8%AF%BB%E3%80%81%E5%BF%AB%E7%85%A7%E8%AF%BB/</guid>
      <pubDate>Mon, 24 May 2021 04:38:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;mvcc&quot;&gt;MVCC&lt;/h2&gt;
&lt;p&gt;多版本并发控制，通过保存数据在每个时间点的快照来实现。&lt;/p&gt;
&lt;p&gt;InnoDB的MVCC通过在&lt;strong&gt;每行记录后面保存两个隐藏的列&lt;/strong&gt;来实现，一列保存&lt;strong&gt;行的创建时间&lt;/strong&gt;，一列保存&lt;strong&gt;行的删除时间&lt;/strong&gt;，这个时间指的是系统版本号。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="mvcc">MVCC</h2><p>多版本并发控制，通过保存数据在每个时间点的快照来实现。</p><p>InnoDB的MVCC通过在<strong>每行记录后面保存两个隐藏的列</strong>来实现，一列保存<strong>行的创建时间</strong>，一列保存<strong>行的删除时间</strong>，这个时间指的是系统版本号。</p><a id="more"></a><figure><img src="https://img-blog.csdnimg.cn/20210524122455323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>MVCC<strong>只在读已提交（RC）和可重复读（RR）</strong>两个隔离级别下工作。</p><h2 id="快照读">快照读</h2><p>读取记录的可见版本（有可能是历史版本），不用加锁。</p><p>简单的select操作，不包括 <code>select ... lock in share mode</code>，<code>select ... for update</code>。</p><ul><li><p>RC：每次select都生成一个快照读，总是读取已提交的最新数据行</p></li><li><p>RR：第一次select生成快照读，读取上一次的快照</p></li></ul><p>举例： <img src="https://img-blog.csdnimg.cn/2021052412263796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210524122720935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>对于操作的前四行，即只有事务2已提交</p><ul><li><p>读已提交： 未提交的事务id：[1,3] 最大的事务id：3 每一次查询都生成一个快照读，所以事务4的查询结果为29。</p></li><li><p>可重复读： RR第一次查询会生成快照，对一个事务，每次都沿用第一次的快照，直接复制一份之前的快照。 则在RR下，事务4再次查询的结果将会是29，而不是图中RC情况下的30。</p></li></ul><h2 id="当前读">当前读</h2><p>读取的是最新版本，并且对读取的记录加锁。</p><p><code>select...lock in share mode (共享读锁)</code> <code>select...for update</code> <code>update , delete , insert</code></p><p>上面形式都属于当前读。</p><h4 id="当前读的实现方式">当前读的实现方式</h4><p>使用next-key锁(行记录锁+Gap间隙锁)实现 <img src="https://img-blog.csdnimg.cn/20210524212217638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" /></p><h4 id="rr级别怎样防止幻读">RR级别怎样防止幻读？</h4><p>RR级别下只要对 SELECT 操作也手动加行（X）锁即可类似 SERIALIZABLE 级别（它会对 SELECT 隐式加锁） <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里需要用 X锁， 用 LOCK IN SHARE MODE 拿到 S锁 后我们没办法做 写操作</span><br><span class="line">SELECT &#96;id&#96; FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; 1 FOR UPDATE;</span><br></pre></td></tr></table></figure> 如果 id = 1 的记录存在则会被加行（X）锁；如果不存在，则会加 next-key lock/ gap 锁（范围行锁），即记录存在与否，mysql 都会对记录对应的索引加锁，其他事务是无法操作的。 <img src="https://img-blog.csdnimg.cn/20210524212316380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如图，表t2有主键，score字段有索引idc_scaore，在事务中查询t2表score&lt;80的记录，加了一个S锁（lock in share mode）。 在另一个事务中插入score=74，无法插入成功，因为有gap锁；插入score=90成功，因为不在此区间内。 <img src="https://img-blog.csdnimg.cn/2021052421240962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgxODM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/MySQL/">MySQL</category>
      
      
      <category domain="http://example.com/tags/MVCC/">MVCC</category>
      
      
      <comments>http://example.com/2021/05/24/MySQL-MVCC%E3%80%81%E5%BD%93%E5%89%8D%E8%AF%BB%E3%80%81%E5%BF%AB%E7%85%A7%E8%AF%BB/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
